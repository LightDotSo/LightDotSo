name: Rust
on:
  push:
    branches:
      - main
  pull_request:
  pull_request_target:
    types:
      - labeled
  merge_group:
  workflow_dispatch:
    inputs:
      crate:
        type: choice
        default: graphql
        description: "Crate to test"
        options:
          - crate
        required: true
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  rust-turbo:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      trigger: ${{ steps.turbo.outputs.trigger }}
    steps:
      - name: Turbo Trigger
        id: turbo
        uses: wallet-rs/wallet-rs/.github/actions/turbo-trigger@main
        with:
          workspace: "@lightdotso/crates"
  rust:
    strategy:
      matrix:
        include:
          - name: Workspace
            os: buildjet-4vcpu-ubuntu-2204
            target: x86_64-unknown-linux-gnu
            package: --workspace
            check: false
            test: true
            workspace: true
          - name: Clippy
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            package: --workspace
            check: true
            test: false
            workspace: false
          - name: Android
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            package: --package lightwallet-core
            check: false
            test: true
            workspace: false
          - name: iOS
            os: macos-latest
            target: x86_64-apple-darwin
            package: --package lightwallet-core
            check: false
            test: false
            workspace: false
    if: needs.rust-turbo.outputs.trigger == 'true'
    needs:
      - rust-turbo
    runs-on: ${{ matrix.os }}
    env:
      CARGO_INCREMENTAL: 0
      SCCACHE_GHA_ENABLED: "true"
      RUST_BACKTRACE: 1
      RUST_LOG: "sccache=trace"
      RUSTC_WRAPPER: "sccache"
      RUSTFLAGS: "-A warnings"
      AWS_ACCESS_KEY_ID: ${{ secrets.SCCACHE_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: "sccache"
      SCCACHE_ENDPOINT: ${{ secrets.SCCACHE_ENDPOINT }}
      SCCACHE_REGION: auto
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    permissions:
      contents: read
      security-events: write
    timeout-minutes: 90
    steps:
      - name: Fetch Head
        uses: actions/checkout@v4
      - if: matrix.workspace
        name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          large-packages: false
          tool-cache: false
      - name: Rust Install
        uses: wallet-rs/wallet-rs/.github/actions/rust-install@main
      - name: Node Install
        uses: wallet-rs/wallet-rs/.github/actions/node-install@main
      - name: Install sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: "v0.5.2"
      - if: matrix.workspace
        name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - if: matrix.workspace
        name: Node Build
        run: |
          pnpm turbo run build
      - if: matrix.workspace
        name: Docker Compose Up
        run: |
          docker-compose up -d --build
      - if: matrix.workspace
        name: Make Install
        run: |
          make install
      - name: Make Prisma
        run: |
          pnpm turbo run prisma
      # - name: Rust Build
      #   run: |
      #     cargo build --target ${{ matrix.target }} ${{ matrix.package }}
      - if: matrix.workspace
        name: Rust Format Check
        run: |
          cargo fmt --all --check
      - if: matrix.test
        name: Rust Test
        run: |
          cargo nextest run \
          --locked --all-features ${{ matrix.package }}
      - if: github.event_name == 'workflow_dispatch'
        name: Rust Test
        run: |
          cargo nextest run \
          --locked --all-features --package ${{ inputs.crate }}
      # - if: matrix.test
      #   name: Rust Coverage
      #   run: |
      #     cargo llvm-cov nextest --lcov --output-path lcov.info \
      #     --locked --all-features ${{ matrix.package }} \
      #     --partition hash:${{ matrix.partition }}/${{ matrix.job-total }}
      # - if: matrix.test
      #   name: Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: false
      #     files: lcov.info
      #     flags: rust
      - if: matrix.check
        name: Deny Check
        run: |
          cargo deny check
      - if: matrix.check
        name: Run Clippy
        run: |
          cargo clippy \
            --all-features \
            ${{ matrix.package }} \
            --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true
      - if: matrix.check
        name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        continue-on-error: true
        with:
          sarif_file: rust-clippy-results.sarif
      - if: always()
        name: Run sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats
      - if: always()
        name: Rust Finish
        uses: wallet-rs/wallet-rs/.github/actions/rust-finish@main
  rust-check:
    if: always()
    needs:
      - rust-turbo
      - rust
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Check All Green
        uses: re-actors/alls-green@release/v1
        with:
          allowed-skips: rust
          jobs: ${{ toJSON(needs) }}
