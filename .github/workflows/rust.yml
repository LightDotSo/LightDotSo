name: Rust
on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
env:
  RUSTFLAGS: -D warnings
  CARGO_TERM_COLOR: always
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
jobs:
  rust-turbo:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      trigger: ${{ steps.turbo.outputs.trigger }}
    steps:
      - name: Fetch Head
        uses: actions/checkout@v3
      - name: Turbo Trigger
        id: turbo
        uses: ./.github/actions/turbo-trigger
        with:
          workspace: "@lightdotso/crates"
  rust:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            test: true
          # - os: ubuntu-latest
          #   target: x86_64-linux-android
          # - os: macos-latest
          #   target: x86_64-apple-ios
          #   test: false
          - os: macos-latest
            target: x86_64-apple-darwin
            test: true
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
    env:
      RUSTFLAGS: -D warnings
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    if: needs.rust-turbo.outputs.trigger == 'true'
    steps:
      - name: Fetch Head
        uses: actions/checkout@v3
      - name: Rust Install
        uses: wallet-rs/wallet-rs/.github/actions/rust-install@main
        with:
          sccache_endpoint: ${{ secrets.SCCACHE_ENDPOINT }}
          sccache_key_id: ${{ secrets.SCCACHE_KEY_ID }}
          sccache_secret: ${{ secrets.SCCACHE_SECRET }}
      - name: Rust Format Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check
      - name: Node Install
        uses: wallet-rs/wallet-rs/.github/actions/node-install@main
      - name: Node Build
        run: |
          pnpm run build
      - name: Rust Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }}
      - if: matrix.test
        name: Rust Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }}
      - if: matrix.test
        name: Rust Coverage Install
        uses: taiki-e/install-action@cargo-llvm-cov
      - if: matrix.test
        name: Rust Coverage
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - if: matrix.test
        name: Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false
      - name: Rust Clippy Check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      - name: Rust Finish
        uses: wallet-rs/wallet-rs/.github/actions/rust-finish@main
  rust-check:
    if: always()
    needs:
      - rust-turbo
      - rust
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Check All Green
        uses: re-actors/alls-green@release/v1
        with:
          allowed-skips: rust
          jobs: ${{ toJSON(needs) }}
