# Copyright (C) 2023 Light, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

type AccountDeployed @entity(immutable: true) {
  id: Bytes!
  index: BigInt!
  userOpHash: Bytes! # bytes32
  sender: Bytes! # address
  factory: Bytes! # address
  paymaster: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeforeExecution @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposited @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  totalDeposit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SignatureAggregatorChanged @entity(immutable: true) {
  id: Bytes!
  aggregator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeLocked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  totalStaked: BigInt! # uint256
  unstakeDelaySec: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeUnlocked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  withdrawTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeWithdrawn @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  withdrawAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserOperationEvent @entity(immutable: true) {
  id: Bytes! # bytes32 (hash)
  index: BigInt!
  userOpHash: Bytes! # bytes32
  sender: Bytes! # address
  paymaster: Bytes! # address
  nonce: BigInt! # uint256
  success: Boolean! # bool
  actualGasCost: BigInt! # uint256
  actualGasUsed: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  userOperation: UserOperation!
}

type UserOperationRevertReason @entity(immutable: true) {
  id: Bytes! # bytes32 (hash)
  index: BigInt!
  userOpHash: Bytes! # bytes32
  sender: Bytes! # address
  nonce: BigInt! # uint256
  revertReason: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  userOperation: UserOperation!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  withdrawAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Default Log type from graph-tooling
# https://github.com/graphprotocol/graph-tooling/blob/3860fb58190aad708a754a0338b1c37475943e25/packages/ts/chain/ethereum.ts#L569
type Log @entity {
  id: ID!, # transactionHash + logIndex
  address: Bytes!,
  topics: [Bytes!],
  data: Bytes!,
  blockHash: Bytes!,
  blockNumber: Bytes!,
  transactionHash: Bytes!,
  transactionIndex: BigInt!,
  logIndex: BigInt!,
  # transactionLogIndex: BigInt!,
  # logType: String!,
  # removed: Boolean,

  userOperation: UserOperation
  receipt: Receipt!
}

# Default Receipt type from graph-tooling
# https://github.com/graphprotocol/graph-tooling/blob/3860fb58190aad708a754a0338b1c37475943e25/packages/ts/chain/ethereum.ts#L569
type Receipt @entity {
  id: Bytes!, # bytes32 (transactionHash)
  transactionHash: Bytes!,
  transactionIndex: BigInt!,
  blockHash: Bytes!,
  blockNumber: BigInt!,
  cumulativeGasUsed: BigInt!,
  gasUsed: BigInt!,
  status: BigInt!,
  logsBloom: Bytes!,
  # FIXME: The below fields can be null even if a non-null value. https://github.com/graphprotocol/graph-node/issues/4239
  # contractAddress: Bytes!,
  # root: Bytes!,

  logs: [Log!] @derivedFrom(field: "receipt"),
  transaction: Transaction!
}

# Default Transaction type from graph-tooling
# https://github.com/graphprotocol/graph-tooling/blob/3860fb58190aad708a754a0338b1c37475943e25/packages/ts/chain/ethereum.ts#L569
# Entity type not immutable because of the userOperations field that can be added later on events parsing
type Transaction @entity {
  id: Bytes!, # bytes32 (transactionHash)
  hash: Bytes,
  index: BigInt,
  from: Bytes!,
  to: Bytes,
  value: BigInt,
  gasLimit: BigInt,
  gasPrice: BigInt,
  input: Bytes,
  nonce: BigInt,

  receipt: Receipt @derivedFrom(field: "transaction"),
  userOperations: [UserOperation!]! @derivedFrom(field: "transaction")
}

# Function: handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[], address)
type UserOperation @entity {
  id: Bytes! # bytes32 (userOpHash)
  index: BigInt!
  sender: Bytes # address
  nonce: BigInt # uint256
  initCode: Bytes #bytes
  callData: Bytes #bytes
  callGasLimit: BigInt #uint256
  verificationGasLimit: BigInt #uint256
  preVerificationGas: BigInt #uint256
  maxFeePerGas: BigInt #uint256
  maxPriorityFeePerGas: BigInt #uint256
  paymasterAndData: Bytes #bytes
  signature: Bytes #bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  entryPoint: Bytes! # address

  lightWallet: LightWallet! @derivedFrom(field: "userOperations")
  logs: [Log!] @derivedFrom(field: "userOperation")
  transaction: Transaction!
  userOperationEvent: UserOperationEvent @derivedFrom(field: "userOperation")
  userOperationRevertReason: UserOperationRevertReason @derivedFrom(field: "userOperation")
}

type LightWallet @entity {
  id: Bytes! # address of the wallet
  index: BigInt!
  address: Bytes! # address
  imageHash: Bytes # bytes32
  userOpHash: Bytes! # bytes32
  sender: Bytes! # address
  factory: Bytes! # address
  paymaster: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  userOperations: [UserOperation!]!
}

type Counter @entity {
  id: String!
  userOpCount: BigInt!
  userOpRevertCount: BigInt!
  userOpSuccessCount: BigInt!
  walletCount: BigInt!
}
