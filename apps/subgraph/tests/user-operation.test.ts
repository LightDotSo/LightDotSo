// Copyright 2023-2024 LightDotSo.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// biome-ignore lint/suspicious/noShadowRestrictedNames: <explanation>
import { Address, BigInt } from "@graphprotocol/graph-ts";
import { assert, test } from "matchstick-as/assembly/index";
import { log } from "matchstick-as/assembly/log";
import { ENTRYPOINT_V060_ADDRESS, ENTRYPOINT_V070_ADDRESS } from "../src/const";
import { handleUserOperationFromCalldata } from "../src/user-operation";

// From: https://thegraph.com/docs/en/developing/unit-testing-framework

test("Success for v0.6.0", () => {
  // https://sepolia.etherscan.io/tx/0x87efb66c2b17af424b7fd2584d268eb1c301b9337eaad3137be5c4c7bbd574bf
  const opStruct = handleUserOperationFromCalldata(
    "0x1fad948c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d53eb5203e367bbdd4f72338938224881fc501ab0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000010dbbe70128929723c1b982e53c51653232e4ff20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000001122e6ea000000000000000000000000000000000000000000000000000000001122e6ea000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000580000000000756d3e6464f5efe7e413a0af1c7474183815c8b7f285c774a1c925209bebaab24662b22e7cf32e2f7a412bfcb1bf52294b9ed60000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095000000000018d32df916ff115a25fbefc70baf8b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006517bc953e0624bf37d995fbcab5ccab2dc2589bcfc6bac1581d161a135ce749e1099fe032c83e21360fa516bdd13cb080e4090b924ce7a06459d837ee3556037ea21e381c0000000000000000000000000000000000000000000000000000000000000000000000000000000000004a0001000000010001783610798879fb9af654e2a99929e00e82c3a0f4288c08bc30266b64dc3e23285d634f6658fdeeb5ba9193b5e935a42a1d9bdf5007144707c9082e6eda5d8fbd1b0100000000000000000000000000000000000000000000",
    new BigInt(0),
    Address.fromString(ENTRYPOINT_V060_ADDRESS),
  );

  assert.assertNotNull(opStruct);
  assert.assertTrue(opStruct.signature.toHexString().length > 2);
  log.info("Info!", [opStruct.signature.toHexString()]);
});

test("Success for v0.7.0", () => {
  // https://etherscan.io/tx/0x1c5150e4090281a3f2f2c9fd99043db48dc690d023d77b1cf462ab4ace57fcee
  const opStruct = handleUserOperationFromCalldata(
    "0x765e827f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000004337016838785634c63fce393bfc6222564436c400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a4719472b1a44d1619b8484948260c7d2206e06f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000004dbd80000000000000000000000000000238c00000000000000000000000000000000000000000000000000000000000100b400000000000000000000000000118c3000000000000000000000000001b9992f00000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000058000000000048c2e27c97b9978c9b27f6937a40db183815c83c01efabf2ce62868626005b468fcc0cd03c644030e51dad0d5df74b0fbd4e9500000000000000000000000000000000000000000000000000000192422b0ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000820000000000000039cd5e8ae05257ce51c473ddd100000000000000000000000000006c570000000000000000000000000000000100000066fc58f10000000000001ab311caa7c7cf8562bb7a3033c00b3d128b1b9eb36c57565e5ddda4a77efb62440ed4fdaf95712fbcc9e05a8b4662b0c345209df4d373a0705d8b2f593535711c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b01000100000000000105e0b7db0019a51e9e972e54a799a786274c81c79500af6652612c295bdca7863a94b72b244137a30c4ab0746faba37673065d055b4faefce2455955d70d184d1b02000000000000000000000000000000000000000000",
    new BigInt(0),
    Address.fromString(ENTRYPOINT_V070_ADDRESS),
  );

  assert.assertNotNull(opStruct);
  assert.assertTrue(opStruct.signature.toHexString().length > 2);
  log.info("Info!", [opStruct.signature.toHexString()]);
});
