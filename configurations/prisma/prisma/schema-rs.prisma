generator prisma {
  provider        = "cargo prisma"
  output          = "../../../crates/prisma/src/lib.rs"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  address       String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  owners        Owner[]
  wallets       Wallet[]
  feedbacks     Feedback[]
  notifications Notification[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wallet {
  address        String   @id
  salt           String
  factoryAddress String
  name           String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  configurations  Configuration[]
  transactions    Transaction[]
  userOperations  UserOperation[]
  users           User[]
  notifications   Notification[]
  supportRequests SupportRequest[]
}

model Configuration {
  id         String @id @default(cuid())
  address    String
  checkpoint BigInt
  imageHash  String
  threshold  BigInt

  owners  Owner[]
  wallets Wallet[]

  @@unique([address, checkpoint])
}

model Owner {
  id        String   @id @default(cuid())
  address   String
  weight    BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  configuration   Configuration @relation(fields: [configurationId], references: [id])
  configurationId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  signatures Signature[]

  @@index([configurationId])
  @@index([userId])
}

/// ethers-rs Log struct converted to Prisma model.
/// From: https://github.com/gakonst/ethers-rs/blob/e8514a7bdbe7e05a16c5e6b994cfc5cab22a1076/ethers-core/src/types/log.rs#L6-L62
model Log {
  id                  String     @id @default(cuid())
  /// H160. the contract that emitted the log
  /// pub address: Address
  address             String
  /// topics: Array of 0 to 4 32 Bytes of indexed log arguments.
  /// (In solidity: The first topic is the hash of the signature of the event
  /// (e.g. `Deposit(address,bytes32,uint256)`), except you declared the event
  /// with the anonymous specifier.)
  /// pub topics: Vec<H256>
  topics              LogTopic[]
  /// Data
  /// pub data: Bytes
  data                Bytes
  /// Block Hash
  /// pub block_hash: Option<H256>
  blockHash           String?
  /// Block Number
  /// pub block_number: Option<U64>
  blockNumber         Int?
  /// Transaction Hash
  /// pub transaction_hash: Option<H256>
  transactionHash     String?
  /// Transaction Index
  /// pub transaction_index: Option<U64>
  transactionIndex    Int?
  /// Integer of the log index position in the block. None if it's a pending log.
  /// pub log_index: Option<U256>
  logIndex            BigInt?
  /// Integer of the transactions index position log was created from.
  /// None when it's a pending log.
  /// pub transaction_log_index: Option<U256>
  transactionLogIndex BigInt?
  /// Log Type
  /// pub log_type: Option<String>
  logType             String?
  /// True when the log was removed, due to a chain reorganization.
  /// false if it's a valid log.
  /// pub removed: Option<bool>
  removed             Boolean?

  receipt Receipt? @relation(fields: [transactionHash], references: [transactionHash])

  @@index([transactionHash])
}

model LogTopic {
  id String @unique

  log Log @relation(fields: [id], references: [id])

  @@index([id])
}

/// ethers-rs TransactionReceipt struct converted to Prisma model.
/// From: https://github.com/gakonst/ethers-rs/blob/e8514a7bdbe7e05a16c5e6b994cfc5cab22a1076/ethers-core/src/types/transaction/response.rs#L388-440
model Receipt {
  /// Transaction hash.
  /// pub transaction_hash: H256
  transactionHash   String  @id
  /// Index within the block.
  /// pub transaction_index: U64
  transactionIndex  Int
  /// Hash of the block this transaction was included within.
  /// pub block_hash: Option<H256>
  blockHash         String?
  /// Number of the block this transaction was included within.
  /// pub block_number: Option<U64>
  blockNumber       Int?
  /// address of the sender.
  /// pub from: Address
  from              String
  /// address of the receiver. null when its a contract creation transaction.
  /// pub to: Option<Address>
  to                String?
  /// Cumulative gas used within the block after this was executed.
  /// pub cumulative_gas_used: U256
  cumulativeGasUsed BigInt
  /// Gas used by this transaction alone.
  ///
  /// Gas used is `None` if the the client is running in light client mode.
  /// pub gas_used: Option<U256>
  gas_used          BigInt?
  /// Contract address created, or `None` if not a deployment.
  /// pub contract_address: Option<Address>
  contractAddress   String?
  /// Status: either 1 (success) or 0 (failure). Only present after activation of [EIP-658](https://eips.ethereum.org/EIPS/eip-658)
  /// pub status: Option<U64>
  status            Int?
  /// State root. Only present before activation of [EIP-658](https://eips.ethereum.org/EIPS/eip-658)
  /// pub root: Option<H256>
  root              String?
  /// Logs bloom
  /// pub logs_bloom: Bloom
  logsBloom         Bytes
  /// Transaction type, Some(1) for AccessList transaction, None for Legacy
  /// pub transaction_type: Option<U64>
  transactionType   Int?
  /// The price paid post-execution by the transaction (i.e. base fee + priority fee).
  /// Both fields in 1559-style transactions are *maximums* (max fee + max priority fee), the
  /// amount that's actually paid by users can only be determined post-execution
  /// pub effective_gas_price: Option<U256>
  effectiveGasPrice BigInt?

  /// Logs generated within this transaction.
  /// pub logs: Vec<Log>
  logs Log[]

  transaction Transaction? @relation(fields: [transactionHash], references: [hash])

  @@index([transactionHash])
}

/// ethers-rs Transactionstruct converted to Prisma model.
/// From: https://github.com/gakonst/ethers-rs/blob/e8514a7bdbe7e05a16c5e6b994cfc5cab22a1076/ethers-core/src/types/transaction/response.rs#L17-L123
model Transaction {
  /// The transaction's hash
  /// pub hash: H256
  hash                 String  @id
  /// The transaction's nonce
  /// pub nonce: U256
  nonce                BigInt
  /// Block hash. None when pending.
  /// pub block_hash: Option<H256>
  blockHash            String?
  /// Block number. None when pending.
  ///pub block_number: Option<U64>
  blockNumber          Int?
  /// Transaction Index. None when pending.
  /// pub transaction_index: Option<U64>
  transactionIndex     Int?
  /// Sender
  ///pub from: Address
  from                 String
  /// Recipient (None when contract creation)
  /// pub to: Option<Address>
  to                   String?
  /// Transferred value
  /// pub value: U256
  value                String
  /// Gas Price, null for Type 2 transactions
  /// pub gas_price: Option<U256>
  gas_price            BigInt?
  /// Gas amount
  /// pub gas: U256
  gas                  String
  /// Input data
  /// pub input: Bytes
  input                Bytes
  /// ECDSA recovery id
  /// pub v: U64
  v                    String
  /// ECDSA signature r
  /// pub r: U256
  r                    String
  /// ECDSA signature s
  /// pub s: U256
  s                    String
  /// EIP2718
  /// Transaction type, Some(2) for EIP-1559 transaction,
  /// Some(1) for AccessList transaction, None for Legacy
  ///  ub transaction_type: Option<U64>
  transactionType      Int?
  /// Represents the maximum tx fee that will go to the miner as part of the user's
  /// fee payment. It serves 3 purposes:
  /// 1. Compensates miners for the uncle/ommer risk + fixed costs of including transaction in a
  /// block; 2. Allows users with high opportunity costs to pay a premium to miners;
  /// 3. In times where demand exceeds the available block space (i.e. 100% full, 30mm gas),
  /// this component allows first price auctions (i.e. the pre-1559 fee model) to happen on the
  /// priority fee.
  ///
  /// More context [here](https://hackmd.io/@q8X_WM2nTfu6nuvAzqXiTQ/1559-wallets)
  /// pub max_priority_fee_per_gas: Option<U256>
  maxPriorityFeePerGas BigInt?
  /// Represents the maximum amount that a user is willing to pay for their tx (inclusive of
  /// baseFeePerGas and maxPriorityFeePerGas). The difference between maxFeePerGas and
  /// baseFeePerGas + maxPriorityFeePerGas is “refunded” to the user.
  /// pub max_fee_per_gas: Option<U256>
  maxFeePerGas         BigInt?

  /// pub chain_id: Option<U256>
  chainId   BigInt
  timestamp DateTime
  trace     Json

  wallet        Wallet? @relation(fields: [walletAddress], references: [address])
  walletAddress String?

  receipt Receipt?

  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?

  userOperations      UserOperation[]
  transactionCategory TransactionCategory[]

  @@index([walletAddress])
  @@index([notificationId])
}

model TransactionCategory {
  id       String @id @default(cuid())
  category String

  transaction Transaction @relation(fields: [id], references: [hash])

  @@index([id])
}

/// From the official implementation at: https://eips.ethereum.org/EIPS/eip-4337
model UserOperation {
  /// The userOperation's hash
  /// pub hash: H256
  hash                 String @id
  /// The account making the operation
  /// address
  sender               String
  /// Anti-replay parameter (see “Semi-abstracted Nonce Support” )
  /// uint256
  nonce                BigInt
  /// The initCode of the account (needed if and only if the account is not yet on-chain and needs to be created)
  /// bytes
  initCode             Bytes
  /// The data to pass to the sender during the main execution call
  /// bytes
  callData             Bytes
  /// The amount of gas to allocate the main execution call
  /// uint256
  callGasLimit         BigInt
  /// The amount of gas to allocate for the verification step
  /// uint256
  verificationGasLimit BigInt
  /// The amount of gas to pay for to compensate the bundler for pre-verification execution, calldata and any gas overhead that can’t be tracked on-chain
  /// uint256
  preVerificationGas   BigInt
  /// Maximum fee per gas (similar to EIP-1559 max_fee_per_gas)
  /// uint256
  maxFeePerGas         BigInt
  /// Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas)
  /// uint256
  maxPriorityFeePerGas BigInt
  /// Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (empty for self-sponsored transaction)
  /// bytes
  paymasterAndData     Bytes
  /// Data passed into the account along with the nonce during the verification step
  signature            Bytes?

  chainId    BigInt
  /// The address of the entry point contract
  entryPoint String              @default("0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789")
  status     UserOperationStatus @default(Proposed)

  transaction     Transaction? @relation(fields: [transactionHash], references: [hash])
  transactionHash String?      @unique

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String

  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?

  signatures            Signature[]
  userOperationCategory UserOperationCategory[]

  @@index([chainId, walletAddress])
  @@index([transactionHash])
  @@index([notificationId])
  @@index([walletAddress])
}

enum UserOperationStatus {
  Proposed
  Pending
  Executed
  Reverted
}

model UserOperationCategory {
  id       String @id @default(cuid())
  category String

  userOperation UserOperation @relation(fields: [id], references: [hash])

  @@index([id])
}

model Signature {
  id             String   @id @default(cuid())
  signature      Bytes
  signature_type Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  owner   Owner  @relation(fields: [ownerId], references: [id])
  ownerId String

  userOperation     UserOperation @relation(fields: [userOperationHash], references: [hash])
  userOperationHash String        @unique

  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId String?

  @@index([ownerId])
  @@index([userOperationHash])
  @@index([notificationId])
}

model Notification {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  readAt       DateTime?
  readDeviceId String?

  wallet        Wallet? @relation(fields: [walletAddress], references: [address])
  walletAddress String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  signatures     Signature[]
  transactions   Transaction[]
  userOperations UserOperation[]

  @@index([walletAddress])
  @@index([userId])
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  emoji     String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model SupportRequest {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  area        String
  severity    Int

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String

  @@index([walletAddress])
}
