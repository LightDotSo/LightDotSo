generator prisma {
  provider        = "cargo prisma"
  output          = "../../../crates/prisma/src/lib.rs"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// Account
// -----------------------------------------------------------------------------

model Account {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Auth Fields
  // ---------------------------------------------------------------------------

  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?

  // ---------------------------------------------------------------------------
  // One-to-many
  // ---------------------------------------------------------------------------

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([providerId, providerAccountId])
  // Relations
  @@index([userId])
}

// -----------------------------------------------------------------------------
// Session
// -----------------------------------------------------------------------------

model Session {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Auth Fields
  // ---------------------------------------------------------------------------

  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique

  // ---------------------------------------------------------------------------
  // One-to-many
  // ---------------------------------------------------------------------------

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([userId])
}

// -----------------------------------------------------------------------------
// User
// -----------------------------------------------------------------------------

model User {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Auth Fields
  // ---------------------------------------------------------------------------

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  address String @unique

  // ---------------------------------------------------------------------------
  // Auth Many-to-many
  // ---------------------------------------------------------------------------

  accounts Account[]
  sessions Session[]

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  activities    Activity[]
  owners        Owner[]
  wallets       Wallet[]
  feedbacks     Feedback[]
  notifications Notification[]
  inviteCodes   InviteCode[]
}

// -----------------------------------------------------------------------------
// VerificationRequest
// -----------------------------------------------------------------------------

model VerificationRequest {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Auth Fields
  // ---------------------------------------------------------------------------

  identifier String
  token      String   @unique
  expires    DateTime

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([identifier, token])
}

// -----------------------------------------------------------------------------
// Wallet
// -----------------------------------------------------------------------------

model Wallet {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  address   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  salt           String
  factoryAddress String
  name           String @default("")

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  walletSettings WalletSettings?

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  activities         Activity[]
  configurations     Configuration[]
  paymasterOperation PaymasterOperation[]
  notifications      Notification[]
  supportRequests    SupportRequest[]
  transactions       Transaction[]
  userOperations     UserOperation[]
  users              User[]
  walletBalances     WalletBalance[]
}

// -----------------------------------------------------------------------------
// WalletSettings
// -----------------------------------------------------------------------------

model WalletSettings {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  isEnabledTestnet Boolean @default(false)

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String @unique

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  activities Activity[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([walletAddress])
}

// -----------------------------------------------------------------------------
// Configuration
// -----------------------------------------------------------------------------

model Configuration {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  address    String
  checkpoint BigInt
  imageHash  String
  threshold  BigInt

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  owners  Owner[]
  wallets Wallet[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([address, checkpoint])
}

// -----------------------------------------------------------------------------
// Owner
// -----------------------------------------------------------------------------

model Owner {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  address String
  weight  BigInt
  index   Int

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  configuration   Configuration @relation(fields: [configurationId], references: [id])
  configurationId String

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  signatures Signature[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([configurationId])
  @@index([userId])
}

// -----------------------------------------------------------------------------
// Interpretation
// -----------------------------------------------------------------------------

model Interpretation {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  actions      InterpretationAction[]
  assetChanges AssetChange[]
  simulations  Simulation[]
  transactions Transaction[]
}

model InterpretationAction {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  interpretations Interpretation[]
}

model AssetChange {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id String @id @default(cuid())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  address        String
  amount         BigInt
  previousAmount BigInt
  newAmount      BigInt

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  interpretation   Interpretation @relation(fields: [interpretationId], references: [id])
  interpretationId String

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  protocol   Protocol? @relation(fields: [protocolId], references: [id])
  protocolId String?

  token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String

  tokenProtocol   TokenProtocol? @relation(fields: [tokenProtocolId], references: [id])
  tokenProtocolId String?

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([interpretationId])
  @@index([protocolId])
  @@index([tokenId])
  @@index([tokenProtocolId])
}

// -----------------------------------------------------------------------------
// Simulation
// -----------------------------------------------------------------------------

model Simulation {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  interpretation   Interpretation @relation(fields: [interpretationId], references: [id])
  interpretationId String

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  userOperation     UserOperation? @relation(fields: [userOperationHash], references: [hash])
  userOperationHash String?

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([interpretationId])
  @@index([userOperationHash])
}

// -----------------------------------------------------------------------------
// Log
// -----------------------------------------------------------------------------

/// ethers-rs Log struct converted to Prisma model.
/// From: https://github.com/gakonst/ethers-rs/blob/e8514a7bdbe7e05a16c5e6b994cfc5cab22a1076/ethers-core/src/types/log.rs#L6-L62
model Log {
  // ---------------------------------------------------------------------------
  // Eth
  // ---------------------------------------------------------------------------

  id                  String     @id @default(cuid())
  /// H160. the contract that emitted the log
  /// pub address: Address
  address             String
  /// topics: Array of 0 to 4 32 Bytes of indexed log arguments.
  /// (In solidity: The first topic is the hash of the signature of the event
  /// (e.g. `Deposit(address,bytes32,uint256)`), except you declared the event
  /// with the anonymous specifier.)
  /// pub topics: Vec<H256>
  topics              LogTopic[]
  /// Data
  /// pub data: Bytes
  data                Bytes
  /// Block Hash
  /// pub block_hash: Option<H256>
  blockHash           String?
  /// Block Number
  /// pub block_number: Option<U64>
  blockNumber         Int?
  /// Transaction Hash
  /// pub transaction_hash: Option<H256>
  transactionHash     String?
  /// Transaction Index
  /// pub transaction_index: Option<U64>
  transactionIndex    Int?
  /// Integer of the log index position in the block. None if it's a pending log.
  /// pub log_index: Option<U256>
  logIndex            BigInt?
  /// Integer of the transactions index position log was created from.
  /// None when it's a pending log.
  /// pub transaction_log_index: Option<U256>
  transactionLogIndex BigInt?
  /// Log Type
  /// pub log_type: Option<String>
  logType             String?
  /// True when the log was removed, due to a chain reorganization.
  /// false if it's a valid log.
  /// pub removed: Option<bool>
  removed             Boolean?

  // ---------------------------------------------------------------------------
  // Eth One-to-none
  // ---------------------------------------------------------------------------

  receipt Receipt? @relation(fields: [transactionHash], references: [transactionHash])

  userOperation     UserOperation? @relation(fields: [userOperationHash], references: [hash])
  userOperationHash String?

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([transactionHash, logIndex])
  // Relations
  @@index([transactionHash])
  @@index([userOperationHash])
}

model LogTopic {
  // ---------------------------------------------------------------------------
  // Eth
  // ---------------------------------------------------------------------------

  /// H256 + index of the topic (0-3)
  /// The concatenated id is separated by a hyphen
  id String @id

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  logs Log[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([id])
}

// -----------------------------------------------------------------------------
// Receipt
// -----------------------------------------------------------------------------

/// ethers-rs TransactionReceipt struct converted to Prisma model.
/// From: https://github.com/gakonst/ethers-rs/blob/e8514a7bdbe7e05a16c5e6b994cfc5cab22a1076/ethers-core/src/types/transaction/response.rs#L388-440
model Receipt {
  // ---------------------------------------------------------------------------
  // Eth
  // ---------------------------------------------------------------------------

  /// Transaction hash.
  /// pub transaction_hash: H256
  transactionHash   String  @id
  /// Index within the block.
  /// pub transaction_index: U64
  transactionIndex  Int
  /// Hash of the block this transaction was included within.
  /// pub block_hash: Option<H256>
  blockHash         String?
  /// Number of the block this transaction was included within.
  /// pub block_number: Option<U64>
  blockNumber       Int?
  /// address of the sender.
  /// pub from: Address
  from              String
  /// address of the receiver. null when its a contract creation transaction.
  /// pub to: Option<Address>
  to                String?
  /// Cumulative gas used within the block after this was executed.
  /// pub cumulative_gas_used: U256
  cumulativeGasUsed BigInt
  /// Gas used by this transaction alone.
  ///
  /// Gas used is `None` if the the client is running in light client mode.
  /// pub gas_used: Option<U256>
  gas_used          BigInt?
  /// Contract address created, or `None` if not a deployment.
  /// pub contract_address: Option<Address>
  contractAddress   String?
  /// Status: either 1 (success) or 0 (failure). Only present after activation of [EIP-658](https://eips.ethereum.org/EIPS/eip-658)
  /// pub status: Option<U64>
  status            Int?
  /// State root. Only present before activation of [EIP-658](https://eips.ethereum.org/EIPS/eip-658)
  /// pub root: Option<H256>
  root              String?
  /// Logs bloom
  /// pub logs_bloom: Bloom
  /// WARNING: Converting this as optional due to the graph limitations
  logsBloom         Bytes?
  /// Transaction type, Some(1) for AccessList transaction, None for Legacy
  /// pub transaction_type: Option<U64>
  transactionType   Int?
  /// The price paid post-execution by the transaction (i.e. base fee + priority fee).
  /// Both fields in 1559-style transactions are *maximums* (max fee + max priority fee), the
  /// amount that's actually paid by users can only be determined post-execution
  /// pub effective_gas_price: Option<U256>
  effectiveGasPrice BigInt?

  /// Logs generated within this transaction.
  /// pub logs: Vec<Log>
  logs Log[]

  // ---------------------------------------------------------------------------
  // Eth One-to-none
  // ---------------------------------------------------------------------------

  transaction Transaction? @relation(fields: [transactionHash], references: [hash])

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([transactionHash])
}

// -----------------------------------------------------------------------------
// Transaction
// -----------------------------------------------------------------------------

/// ethers-rs Transactionstruct converted to Prisma model.
/// From: https://github.com/gakonst/ethers-rs/blob/e8514a7bdbe7e05a16c5e6b994cfc5cab22a1076/ethers-core/src/types/transaction/response.rs#L17-L123
model Transaction {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  timestamp DateTime

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  /// pub chain_id: Option<U256>
  chainId   BigInt
  trace     Json
  isTestnet Boolean @default(false)

  // ---------------------------------------------------------------------------
  // Eth
  // ---------------------------------------------------------------------------

  /// The transaction's hash
  /// pub hash: H256
  hash                 String  @id
  /// The transaction's nonce
  /// pub nonce: U256
  nonce                BigInt
  /// Block hash. None when pending.
  /// pub block_hash: Option<H256>
  blockHash            String?
  /// Block number. None when pending.
  ///pub block_number: Option<U64>
  blockNumber          Int?
  /// Transaction Index. None when pending.
  /// pub transaction_index: Option<U64>
  transactionIndex     Int?
  /// Sender
  ///pub from: Address
  from                 String
  /// Recipient (None when contract creation)
  /// pub to: Option<Address>
  to                   String?
  /// Transferred value
  /// pub value: U256
  /// WARNING: Converting this as optional due to the graph limitations
  value                String?
  /// Gas Price, null for Type 2 transactions
  /// pub gas_price: Option<U256>
  gas_price            BigInt?
  /// Gas amount
  /// pub gas: U256
  /// WARNING: Converting this as optional due to the graph limitations
  gas                  String?
  /// Input data
  /// pub input: Bytes
  /// WARNING: Converting this as optional due to the graph limitations
  input                Bytes?
  /// ECDSA recovery id
  /// pub v: U64
  /// WARNING: Converting this as optional due to the graph limitations
  v                    String?
  /// ECDSA signature r
  /// pub r: U256
  /// WARNING: Converting this as optional due to the graph limitations
  r                    String?
  /// ECDSA signature s
  /// pub s: U256
  /// WARNING: Converting this as optional due to the graph limitations
  s                    String?
  /// EIP2718
  /// Transaction type, Some(2) for EIP-1559 transaction,
  /// Some(1) for AccessList transaction, None for Legacy
  ///  ub transaction_type: Option<U64>
  transactionType      Int?
  /// Represents the maximum tx fee that will go to the miner as part of the user's
  /// fee payment. It serves 3 purposes:
  /// 1. Compensates miners for the uncle/ommer risk + fixed costs of including transaction in a
  /// block; 2. Allows users with high opportunity costs to pay a premium to miners;
  /// 3. In times where demand exceeds the available block space (i.e. 100% full, 30mm gas),
  /// this component allows first price auctions (i.e. the pre-1559 fee model) to happen on the
  /// priority fee.
  ///
  /// More context [here](https://hackmd.io/@q8X_WM2nTfu6nuvAzqXiTQ/1559-wallets)
  /// pub max_priority_fee_per_gas: Option<U256>
  maxPriorityFeePerGas BigInt?
  /// Represents the maximum amount that a user is willing to pay for their tx (inclusive of
  /// baseFeePerGas and maxPriorityFeePerGas). The difference between maxFeePerGas and
  /// baseFeePerGas + maxPriorityFeePerGas is “refunded” to the user.
  /// pub max_fee_per_gas: Option<U256>
  maxFeePerGas         BigInt?

  // ---------------------------------------------------------------------------
  // Eth One-to-none
  // ---------------------------------------------------------------------------

  wallet        Wallet? @relation(fields: [walletAddress], references: [address])
  walletAddress String?

  receipt Receipt?

  // ---------------------------------------------------------------------------
  // Relation One-to-none
  // ---------------------------------------------------------------------------

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?   @unique

  interpretation   Interpretation? @relation(fields: [interpretationId], references: [id])
  interpretationId String?

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  userOperations UserOperation[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([walletAddress])
  @@index([activityId])
  @@index([interpretationId])
}

// -----------------------------------------------------------------------------
// UserOperation
// -----------------------------------------------------------------------------

/// From the official implementation at: https://eips.ethereum.org/EIPS/eip-4337
model UserOperation {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  chainId    BigInt
  /// The address of the entry point contract
  entryPoint String
  status     UserOperationStatus @default(PROPOSED)
  isTestnet  Boolean             @default(false)

  // ---------------------------------------------------------------------------
  // Eth
  // ---------------------------------------------------------------------------

  /// The userOperation's hash
  /// pub hash: H256
  hash                 String @id
  /// The account making the operation
  /// address
  sender               String
  /// Anti-replay parameter (see “Semi-abstracted Nonce Support” )
  /// uint256
  nonce                BigInt
  /// The initCode of the account (needed if and only if the account is not yet on-chain and needs to be created)
  /// bytes
  initCode             Bytes
  /// The data to pass to the sender during the main execution call
  /// bytes
  callData             Bytes
  /// The amount of gas to allocate the main execution call
  /// uint256
  callGasLimit         BigInt
  /// The amount of gas to allocate for the verification step
  /// uint256
  verificationGasLimit BigInt
  /// The amount of gas to pay for to compensate the bundler for pre-verification execution, calldata and any gas overhead that can’t be tracked on-chain
  /// uint256
  preVerificationGas   BigInt
  /// Maximum fee per gas (similar to EIP-1559 max_fee_per_gas)
  /// uint256
  maxFeePerGas         BigInt
  /// Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas)
  /// uint256
  maxPriorityFeePerGas BigInt
  /// Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (empty for self-sponsored transaction)
  /// bytes
  paymasterAndData     Bytes
  /// Data passed into the account along with the nonce during the verification step
  signature            Bytes?

  logs Log[]

  // ---------------------------------------------------------------------------
  // Eth One-to-none
  // ---------------------------------------------------------------------------

  paymaster   Paymaster? @relation(fields: [paymasterId], references: [id])
  paymasterId String?

  paymasterOperation   PaymasterOperation? @relation(fields: [paymasterOperationId], references: [id])
  paymasterOperationId String?             @unique

  transaction     Transaction? @relation(fields: [transactionHash], references: [hash])
  transactionHash String?

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String

  // ---------------------------------------------------------------------------
  // Relation One-to-none
  // ---------------------------------------------------------------------------

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?   @unique

  metadata   UserOperationMetadata? @relation(fields: [metadataId], references: [id])
  metadataId String?

  // ---------------------------------------------------------------------------
  // Relation Many-to-many
  // ---------------------------------------------------------------------------

  signatures  Signature[]
  simulations Simulation[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@index([walletAddress, status, isTestnet])
  // Relations
  @@index([paymasterId])
  @@index([paymasterOperationId])
  @@index([transactionHash])
  @@index([walletAddress])
  @@index([activityId])
  @@index([metadataId])
}

enum UserOperationStatus {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  PROPOSED
  PENDING
  EXECUTED
  REVERTED
  INVALID
}

model UserOperationMetadata {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  url String?

  // ---------------------------------------------------------------------------
  // Many-to-one
  // ---------------------------------------------------------------------------

  userOperations UserOperation[]
}

// -----------------------------------------------------------------------------
// Paymaster
// -----------------------------------------------------------------------------

model Paymaster {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  address String
  chainId BigInt

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  userOperations      UserOperation[]
  paymasterOperations PaymasterOperation[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([address, chainId])
}

model PaymasterOperation {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id String @id @default(cuid())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  sender      String
  senderNonce BigInt
  validUntil  DateTime
  validAfter  DateTime

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  paymaster   Paymaster @relation(fields: [paymasterId], references: [id])
  paymasterId String

  wallet Wallet @relation(fields: [sender], references: [address])

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  userOperation UserOperation?

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([validAfter, paymasterId])
  // Relations
  @@index([paymasterId])
  @@index([sender])
  @@index([sender, senderNonce])
}

// -----------------------------------------------------------------------------
// Signature
// -----------------------------------------------------------------------------

model Signature {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  signature     Bytes
  signatureType Int
  procedure     SignatureProcedure

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  owner   Owner  @relation(fields: [ownerId], references: [id])
  ownerId String

  userOperation     UserOperation @relation(fields: [userOperationHash], references: [hash])
  userOperationHash String        @unique

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([ownerId])
  @@index([userOperationHash])
}

enum SignatureProcedure {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  OFF_CHAIN
  ON_CHAIN
  ERC_1271
}

// -----------------------------------------------------------------------------
// Token
// -----------------------------------------------------------------------------

model Token {
  // ---------------------------------------------------------------------------
  // Cores
  // ---------------------------------------------------------------------------

  id String @id @default(cuid())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  type     TokenType @default(ERC_20)
  symbol   String
  name     String?
  address  String
  chainId  BigInt
  decimals Int
  tokenId  BigInt?

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  group   TokenGroup? @relation(fields: [groupId], references: [id])
  groupId String?

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  assetChanges AssetChange[]
  balances     WalletBalance[]
  prices       TokenPrice[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Unique
  @@unique([address, chainId])
  @@unique([address, chainId, tokenId])
  // Relations
  @@index([groupId])
}

model TokenGroup {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id String @id @default(cuid())

  // ---------------------------------------------------------------------------
  // Many-to-one
  // ---------------------------------------------------------------------------

  tokens Token[]
}

model TokenPrice {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  price Float

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([tokenId])
}

enum TokenType {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  ERC_20
  ERC_721
  ERC_1155
}

// -----------------------------------------------------------------------------
// Protocol
// -----------------------------------------------------------------------------

model Protocol {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  chainId BigInt
  name    String
  status  ProtocolStatus @default(UNKNOWN)

  // ---------------------------------------------------------------------------
  // One-to-many
  // ---------------------------------------------------------------------------

  assetChanges AssetChange[]
  protocols    TokenProtocol[]
}

enum ProtocolStatus {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  TRUSTWORTHY
  KNOWN
  UNKNOWN
}

// The wallet balances are from: https://github.com/llamafolio/llamafolio-api
// License: GPL-3.0
model TokenProtocol {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id String @id @default(cuid())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  balanceUSD Float
  debtUSD    Float
  rewardUSD  Float

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  protocol   Protocol @relation(fields: [protocolId], references: [id])
  protocolId String

  // ---------------------------------------------------------------------------
  // Many-to-many
  // ---------------------------------------------------------------------------

  assetChanges   AssetChange[]
  walletBalances WalletBalance[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([protocolId])
}

// -----------------------------------------------------------------------------
// WalletBalance
// -----------------------------------------------------------------------------

model WalletBalance {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  balanceUSD Float

  // The below fields are from: https://github.com/llamafolio/llamafolio-api
  // License: GPL-3.0

  // rewardUSD  Float?
  // debtUSD    Float?
  // apy           Float?
  // apyBase       Float?
  // apyMean30d    Float?
  // ilRisk        Boolean?
  // collateralUSD Float?

  chainId   BigInt
  amount    BigInt?
  stable    Boolean?
  isLatest  Boolean  @default(false)
  isSpam    Boolean  @default(false)
  isTestnet Boolean  @default(false)

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  token   Token?  @relation(fields: [tokenId], references: [id])
  tokenId String?

  tokenProtocol   TokenProtocol? @relation(fields: [tokenProtocolId], references: [id])
  tokenProtocolId String?

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Query
  @@index([walletAddress, chainId, amount, isLatest, isSpam, isTestnet])
  // Relations
  @@index([tokenId])
  @@index([tokenProtocolId])
  @@index([walletAddress])
}

// -----------------------------------------------------------------------------
// Activity
// -----------------------------------------------------------------------------

model Activity {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  entity    ActivityEntity
  operation ActivityOperation
  log       Json

  // ---------------------------------------------------------------------------
  // Relations One-to-none
  // ---------------------------------------------------------------------------

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  wallet        Wallet? @relation(fields: [walletAddress], references: [address])
  walletAddress String?

  // ---------------------------------------------------------------------------
  // Mutable Relations One-to-none
  // ---------------------------------------------------------------------------

  inviteCode   InviteCode? @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId String?

  supportRequest   SupportRequest? @relation(fields: [supportRequestId], references: [id])
  supportRequestId String?

  walletSettings   WalletSettings? @relation(fields: [walletSettingsId], references: [id])
  walletSettingsId String?

  // ---------------------------------------------------------------------------
  // Immutable Relations One-to-none
  // ---------------------------------------------------------------------------

  feedback      Feedback?
  notification  Notification?
  userOperation UserOperation?
  transaction   Transaction?

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([userId])
  @@index([walletAddress])
  @@index([inviteCodeId])
  @@index([supportRequestId])
  @@index([walletSettingsId])
}

enum ActivityEntity {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  WALLET
  USER

  INVITE_CODE
  SUPPORT_REQUEST
  WALLET_SETTINGS

  FEEDBACK
  NOTIFICATION
  USER_OPERATION
  TRANSACTION
}

enum ActivityOperation {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  CREATE
  UPDATE
  DELETE
}

// -----------------------------------------------------------------------------
// Notification
// -----------------------------------------------------------------------------

model Notification {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  readAt       DateTime?
  readDeviceId String?

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?   @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  wallet        Wallet? @relation(fields: [walletAddress], references: [address])
  walletAddress String?

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([activityId])
  @@index([userId])
  @@index([walletAddress])
}

// -----------------------------------------------------------------------------
// Feedback
// -----------------------------------------------------------------------------

model Feedback {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  text  String
  emoji String

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // ---------------------------------------------------------------------------
  // One-to-none
  // ---------------------------------------------------------------------------

  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?   @unique

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([userId])
  @@index([activityId])
}

// -----------------------------------------------------------------------------
// InviteCode
// -----------------------------------------------------------------------------

enum InviteCodeStatus {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  ACTIVE
  USED
}

model InviteCode {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  code   String           @unique
  status InviteCodeStatus @default(ACTIVE)

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // ---------------------------------------------------------------------------
  // One-to-many
  // ---------------------------------------------------------------------------

  activities Activity[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([userId])
}

// -----------------------------------------------------------------------------
// SupportRequest
// -----------------------------------------------------------------------------

model SupportRequest {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------

  title       String
  description String
  area        String
  severity    Int
  status      SupportRequestStatus @default(OPEN)

  // ---------------------------------------------------------------------------
  // One-to-one
  // ---------------------------------------------------------------------------

  wallet        Wallet @relation(fields: [walletAddress], references: [address])
  walletAddress String

  // ---------------------------------------------------------------------------
  // One-to-many
  // ---------------------------------------------------------------------------

  activities Activity[]

  // ---------------------------------------------------------------------------
  // Mappings
  // ---------------------------------------------------------------------------

  // Relations
  @@index([walletAddress])
}

enum SupportRequestStatus {
  // ---------------------------------------------------------------------------
  // Enum Fields
  // ---------------------------------------------------------------------------

  OPEN
  ACTIVE
  CLOSED
}
