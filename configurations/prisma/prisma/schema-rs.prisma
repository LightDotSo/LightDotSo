generator prisma {
  provider        = "cargo prisma"
  output          = "../../../crates/prisma/src/lib.rs"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  address       String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  wallets  Wallet[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wallet {
  id        String   @id @default(cuid())
  address   String
  chainId   String
  hash      String
  testnet   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@unique([address, chainId])
}

model Log {
  id                  String   @id @default(cuid())
  address             String
  chainId             String
  topics              String[]
  data                String
  blockHash           String?
  blockNumber         String?
  transactionHash     String?
  transactionIndex    String?
  transactionLogIndex String?
  logIndex            String?
  logType             String?
  removed             Boolean?

  transaction   Transaction? @relation(fields: [transactionId], references: [hash])
  transactionId String?
}

model Receipt {
  hash                String  @id
  base_fee_per_gas    String?
  burned_fees         String
  chainId             String
  contract_address    String?
  cumulative_gas_used String
  effective_gas_price String?
  gas_used            String?
  status              String

  timestamp DateTime

  transaction   Transaction @relation(fields: [transactionId], references: [hash])
  transactionId String      @unique
}

model Transaction {
  hash                     String  @id
  nonce                    String
  block_hash               String?
  block_number             String?
  transaction_index        String?
  from                     String
  to                       String?
  value                    String
  gas_price                String?
  gas                      String
  input                    String
  v                        String
  r                        String
  s                        String
  fee_currency             String?
  gateway_fee_recipient    String?
  gateway_fee              String?
  transaction_type         String?
  access_list              String?
  max_priority_fee_per_gas String?
  max_fee_per_gas          String?
  chain_id                 String?
  other                    String?

  timestamp DateTime

  logs    Log[]
  Receipt Receipt?
}
