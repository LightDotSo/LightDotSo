generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "tracing", "fullTextSearch"]
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/zod"
  modelCase   = "PascalCase"
  modelSuffix = "Model"

  relationModel = true
  useDecimalJs  = true

  prismaJsonNullability = true
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../../kysely/src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  address       String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  wallets  Wallet[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Wallet {
  id        String   @id @default(cuid())
  address   String
  chainId   String
  hash      String
  testnet   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@unique([address, chainId])
}

model Log {
  id                  String   @id @default(cuid())
  address             String
  topics              String[]
  data                String
  blockHash           String?
  blockNumber         String?
  transactionHash     String?
  transactionIndex    String?
  logIndex            String?
  transactionLogIndex String?
  logType             String?
  removed             Boolean?

  receipt Receipt? @relation(fields: [transactionHash], references: [transactionHash])
}

model Receipt {
  transactionHash   String  @id
  transactionIndex  String
  blockHash         String?
  blockNumber       String?
  from              String
  to                String?
  cumulativeGasUsed String
  gas_used          String?
  contractAddress   String?
  status            String?
  root              String?
  logsBloom         String
  transactionType   String?
  effectiveGasPrice String?
  // other             Json?

  logs Log[]

  transaction Transaction? @relation(fields: [transactionHash], references: [hash])
}

model Transaction {
  hash                 String  @id
  nonce                String
  blockHash            String?
  blockNumber          String?
  transactionIndex     String?
  from                 String
  to                   String?
  value                String
  gas_price            String?
  gas                  String
  input                String
  v                    String
  r                    String
  s                    String
  transactionType      String?
  maxPriorityFeePerGas String?
  maxFeePerGas         String?
  // other                Json?

  chainId   String
  timestamp DateTime

  Receipt Receipt?
}
