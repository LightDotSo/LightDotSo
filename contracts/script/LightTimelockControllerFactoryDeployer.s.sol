// Copyright 2023-2024 LightDotSo.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// SPDX-License-Identifier: Apache-2.0

pragma solidity ^0.8.18;

import {EntryPoint} from "@/contracts/core/EntryPoint.sol";
import {LightTimelockControllerFactory} from "@/contracts/LightTimelockControllerFactory.sol";
import {BaseLightDeployer} from "@/script/base/BaseLightDeployer.s.sol";
// solhint-disable-next-line no-console
import {console} from "forge-std/console.sol";
import {Script} from "forge-std/Script.sol";

// LightTimelockControllerFactoryDeployer -- Deploys the LightTimelockControllerFactory contract
contract LightTimelockControllerFactoryDeployer is BaseLightDeployer, Script {
    // -------------------------------------------------------------------------
    // Bytecode
    // -------------------------------------------------------------------------

    bytes private byteCode =
        hex"604060808152600436101561001357600080fd5b600090813560e01c806349d27e27146101f7578063817ec604146101bf578063a3f4df7e14610145578063c5e8f3e5146100d75763ffa1ad741461005657600080fd5b346100d357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d35780516100cf916100938261028c565b600582527f302e312e3000000000000000000000000000000000000000000000000000000060208301525191829160208352602083019061033b565b0390f35b5080fd5b50346100d357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d3576020905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000a16e02e87b7454126e5e10d957a927a7f5b5d2be168152f35b50346100d357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d35780516100cf916101838261028c565b601e82527f4c6967687454696d656c6f636b436f6e74726f6c6c6572466163746f7279000060208301525191829160208352602083019061033b565b50346100d35760209073ffffffffffffffffffffffffffffffffffffffff6101ef6101e936610227565b916103ae565b915191168152f35b50346100d35760209073ffffffffffffffffffffffffffffffffffffffff6101ef61022136610227565b9161050f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126102875773ffffffffffffffffffffffffffffffffffffffff90600435828116810361028757916024359081168103610287579060443590565b600080fd5b6040810190811067ffffffffffffffff8211176102a857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102a857604052565b60005b83811061032b5750506000910152565b818101518382015260200161031b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361037781518092818752878088019101610318565b0116010190565b60409073ffffffffffffffffffffffffffffffffffffffff6103ab9493168152816020820152019061033b565b90565b919073ffffffffffffffffffffffffffffffffffffffff92838116156104e557838216156104bb576103e183838361050f565b803b6104b357506040517f485cc95500000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9182166024820152911660448083019190915281526104466064826102d7565b604051906104038083019183831067ffffffffffffffff8411176102a85783926104989261065f8539867f000000000000000000000000a16e02e87b7454126e5e10d957a927a7f5b5d2be169061037e565b03906000f580156104a7571690565b6040513d6000823e3d90fd5b925050501690565b60046040517f2d167c42000000000000000000000000000000000000000000000000000000008152fd5b60046040517f7275e109000000000000000000000000000000000000000000000000000000008152fd5b605592600b9261040361063a61064660409586516020958692610534848801846102d7565b86835283830196610a62883989517f485cc955000000000000000000000000000000000000000000000000000000008582015273ffffffffffffffffffffffffffffffffffffffff9182166024820152911660448083019190915281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06105bd6064836102d7565b6106148a5191826106088782019573ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000a16e02e87b7454126e5e10d957a927a7f5b5d2be168761037e565b039081018352826102d7565b895195869361062b868601998a9251928391610318565b84019151809386840190610318565b010380845201826102d7565b5190208351938401528201523081520160ff8153209056fe604060808152610403908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160be90816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea164736f6c6343000812000a604060808152610403908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160be90816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea164736f6c6343000812000aa164736f6c6343000812000a";
    bytes private initCode = byteCode;

    // -------------------------------------------------------------------------
    // Run
    // -------------------------------------------------------------------------

    function run() public {
        console.logBytes(byteCode);
        // Log the byte code hash
        // solhint-disable-next-line no-console
        console.logBytes32(keccak256(initCode));
        // The init code hash of the LightTimelockControllerFactory
        bytes32 initCodeHash = 0x37f27db07e7024f891b7883da0f40c66e29ad2a4484c4bdee21ecff680658cfd;
        // Assert that the init code is the expected value
        assert(keccak256(initCode) == initCodeHash);

        // Salt for deterministic deployment
        bytes32 salt = 0x0000000000000000000000000000000000000000473bb6920a760f10ddaebb74;

        // // If testing on a local chain, use without a safe create2
        if (block.chainid == 0x7a69) {
            // Use private key
            vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

            // Create the factory
            timelockFactory = new LightTimelockControllerFactory();
        } else {
            // Use regular broadcast
            vm.startBroadcast();

            // Create LightTimelockControllerFactory
            timelockFactory = LightTimelockControllerFactory(IMMUTABLE_CREATE2_FACTORY.safeCreate2(salt, initCode));

            // Assert that the factory is the expected address
            assert(address(timelockFactory) == LIGHT_TIMELOCK_CONTROLLER_FACTORY_ADDRESS);
        }

        // Stop the broadcast
        vm.stopBroadcast();
    }
}
