default_platform(:ios)

APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
GH_NUMBER = ENV["GH_NUMBER"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
KEYCHAIN_NAME = ENV["TEMP_KEYCHAIN_USER"]
KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    lock_when_sleeps: false
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def app_store_api_key
  app_store_connect_api_key(
    key_id: APPLE_KEY_ID,
    issuer_id: APPLE_ISSUER_ID,
    key_content: APPLE_KEY_CONTENT,
    duration: 1200,
    in_house: false
  )
end

def update_dev_xcconfig(name, new_value)
  update_xcconfig_value(
    path: "./LightWallet/Configuration/Light.Development.xcconfig",
    name: name,
    value: new_value
  )
end

def update_prod_xcconfig(name, new_value)
  update_xcconfig_value(
    path: "./LightWallet/Configuration/Light.Production.xcconfig",
    name: name,
    value: new_value
  )
end

def prepare_android_environment(app_id)
  previous_build_number = google_play_track_version_codes(
    package_name: app_id,
    track: "internal",
    json_key: "./play_store_key.json",
  )[0]

  current_build_number = previous_build_number + 1

  increment_version_code(
    gradle_file_path: "./android/build.gradle",
    version_code: current_build_number
  )
end

def prepare_ios_environment(name, api_key, live)
  number = app_store_build_number(
    initial_build_number: 0,
    app_identifier: name,
    api_key: api_key,
    live: live
  )
  increment_build_number(
    build_number: number + 1,
    xcodeproj: "./ios/LightWallet.xcodeproj"
  )
end

def apply_dev_xcconfig
  # update_dev_xcconfig("NEXT_PUBLIC_ZERION_API_KEY", NEXT_PUBLIC_ZERION_API_KEY)
end

def apply_prod_xcconfig
  # update_prod_xcconfig("NEXT_PUBLIC_ZERION_API_KEY", NEXT_PUBLIC_ZERION_API_KEY)
end

before_all do |lane, options|
  # Dotenv.overload("./.env")
  # XCODE_PROJECT_PATH = "./ios/LightWallet.xcodeproj"
  # XCODE_WORKSPACE_PATH = "./ios/LightWallet.xcworkspace"
end

platform :android do
  before_all do
    if is_ci
      validate_play_store_json_key(
        json_key: "./play_store_key.json"
      )
    end
  end

  lane :build do
    gradle(
      task: "assemble",
      build_type: "Release"
    )

    gradle(
      task: "bundle",
      build_type: "Release"
    )
  end

  lane :dev do
    increment_version_name(
      gradle_file_path: "./android/build.gradle",
      version_name: GH_NUMBER,
    )

    gradle(
      task: "assemble",
      build_type: "Release"
    )

    upload_to_play_store(
      package_name: "io.magic.light.dev",
      track: "alpha",
      json_key: "./play_store_key.json"
    )
  end

  lane :production do
    gradle(
      task: "assemble",
      build_type: "Release"
    )

    upload_to_play_store(
      package_name: "io.magic.light",
      track: "beta",
      json_key: "./play_store_key.json"
    )
  end
end

platform :ios do
  before_all do
  end

  lane :keychain do
    keychain_name = KEYCHAIN_NAME
    keychain_password = KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)
  end

  lane :build do
    if is_ci
      keychain
      api_key = app_store_api_key

      match(
        keychain_name: KEYCHAIN_NAME,
        keychain_password: KEYCHAIN_PASSWORD,
        git_branch: "main",
        type: "appstore",
        app_identifier: "io.magic.light",
        git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
        readonly: false,
        api_key: api_key
      )

      match(
        keychain_name: KEYCHAIN_NAME,
        keychain_password: KEYCHAIN_PASSWORD,
        git_branch: "main",
        type: "appstore",
        app_identifier: "io.magic.light.Light-Safari-Extension",
        git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
        readonly: false,
        api_key: api_key
      )
    end

    gym(
      configuration: "Release",
      workspace: "./ios/LightWallet.xcworkspace",
      scheme: "LightWallet",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_ID => "match AppStore io.magic.light"
        }
      },
    )
  end

  lane :dev do
    keychain
    api_key = app_store_api_key
    # apply_dev_xcconfig

    increment_version_number_in_xcodeproj(
      version_number: GH_NUMBER,
      xcodeproj: "./ios/LightWallet.xcodeproj",
      target: "LightWalletDev"
    )

    increment_version_number_in_xcodeproj(
      version_number: GH_NUMBER,
      xcodeproj: "./ios/LightWallet.xcodeproj",
      target: "LightWalletDevSafariExtension"
    )

    prepare_ios_environment("io.magic.light.dev", api_key, false)

    match(
      keychain_name: KEYCHAIN_NAME,
      keychain_password: KEYCHAIN_PASSWORD,
      git_branch: "main",
      type: "appstore",
      app_identifier: "io.magic.light.dev",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: false,
      api_key: api_key
    )

    match(
      keychain_name: KEYCHAIN_NAME,
      keychain_password: KEYCHAIN_PASSWORD,
      git_branch: "main",
      type: "appstore",
      app_identifier: "io.magic.light.dev.Light-Safari-Extension",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: false,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "./ios/LightWallet.xcworkspace",
      scheme: "LightWalletDev",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_ID => "match AppStore io.magic.light.dev"
        }
      },
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "io.magic.light.dev",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: true,
      itc_provider: "4Z47XRX22C",
      team_id: "4Z47XRX22C"
    )
  end

  lane :production do
    keychain
    api_key = app_store_api_key
    # apply_prod_xcconfig

    prepare_ios_environment("io.magic.light", api_key, false)

    match(
      keychain_name: KEYCHAIN_NAME,
      keychain_password: KEYCHAIN_PASSWORD,
      git_branch: "main",
      type: "appstore",
      app_identifier: "io.magic.light",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: false,
      api_key: api_key
    )

    match(
      keychain_name: KEYCHAIN_NAME,
      keychain_password: KEYCHAIN_PASSWORD,
      git_branch: "main",
      type: "appstore",
      app_identifier: "io.magic.light.Light-Safari-Extension",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: false,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "./ios/LightWallet.xcworkspace",
      scheme: "LightWallet",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_ID => "match AppStore io.magic.light"
        }
      },
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "io.magic.light",
      changelog: "Bug fixes and performance improvements",
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: true,
      notify_external_testers: true,
      itc_provider: "4Z47XRX22C",
      team_id: "4Z47XRX22C"
    )
  end

  lane :change_app_icon do
    appicon(
      appicon_image_file: "Resources/AppIconDev.png",
      appicon_devices: [:iphone, :ios_marketing],
      appicon_path: "./ios/LightWallet/Resources/Assets.xcassets",
      appicon_name: "AppIcon-Prod.appiconset"
    )
  end

  lane :bump do
    increment_version_number_in_xcodeproj(
      version_number: "1.0",
      xcodeproj: "./ios/LightWallet.xcodeproj",
      target: "LightWallet"
    )
    increment_version_number_in_xcodeproj(
      version_number: "1.0",
      xcodeproj: "./ios/LightWallet.xcodeproj",
      target: "LightWalletSafariExtension"
    )
  end

  lane :test do
    if is_ci
      keychain
      api_key = app_store_api_key

      match(
        keychain_name: KEYCHAIN_NAME,
        keychain_password: KEYCHAIN_PASSWORD,
        git_branch: "main",
        type: "development",
        app_identifier: "io.magic.light.dev",
        git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
        readonly: false,
        api_key: api_key
      )

      match(
        keychain_name: KEYCHAIN_NAME,
        keychain_password: KEYCHAIN_PASSWORD,
        git_branch: "main",
        type: "development",
        app_identifier: "io.magic.light.dev.Light-Safari-Extension",
        git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
        readonly: false,
        api_key: api_key
      )
    end

    gym(
      workspace: "./ios/LightWallet.xcworkspace",
      scheme: "LightWalletDev",
      skip_archive: false,
      skip_package_ipa: true,
      destination: "platform=iOS Simulator,name=iPhone 8",
      configuration: "Debug",
      build_path: ".",
      archive_path: "LightWalletDev.xcarchive",
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_ID => "match Development io.magic.light.dev"
        }
      },
    )

    run_tests(workspace: "./ios/LightWallet.xcworkspace",
              devices: ["iPhone 8"],
              scheme: "LightWalletTests")

    run_tests(workspace: "./ios/LightWallet.xcworkspace",
              devices: ["iPhone 8"],
              scheme: "LightWalletUITests")
  end

  lane :update_devices do
    app_store_api_key
    match(git_branch: "main", app_identifier: ["io.magic.light"], type: "development", force_for_new_devices: true)
  end

  lane :update_dev_devices do
    app_store_api_key
    match(git_branch: "main", app_identifier: ["io.magic.light.dev"], type: "development", force_for_new_devices: true)
  end

  lane :match_development do
    app_store_api_key
    match(git_branch: "main", app_identifier: ["io.magic.light", "io.magic.light.Light-Safari-Extension"], type: "development", readonly: is_ci)
  end

  lane :match_dev_development do
    app_store_api_key
    match(git_branch: "main", app_identifier: ["io.magic.light.dev", "io.magic.light.dev.Light-Safari-Extension"], type: "development", readonly: is_ci)
  end

  lane :match_appstore do
    app_store_api_key
    match(git_branch: "main", app_identifier: ["io.magic.light", "io.magic.light.Light-Safari-Extension"], type: "appstore", readonly: is_ci)
  end

  lane :match_dev_appstore do
    app_store_api_key
    match(git_branch: "main", app_identifier: ["io.magic.light.dev", "io.magic.light.dev.Light-Safari-Extension"], type: "appstore", readonly: is_ci)
  end
end
