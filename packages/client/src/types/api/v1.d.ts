/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
export type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
export type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
export type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/activity/get": {
    /**
     * Get a activity
     * @description Get a activity
     */
    get: operations["v1_activity_get_handler"];
  };
  "/activity/list": {
    /**
     * Returns a list of activities.
     * @description Returns a list of activities.
     */
    get: operations["v1_activity_list_handler"];
  };
  "/activity/list/count": {
    /**
     * Returns a count of list of activities.
     * @description Returns a count of list of activities.
     */
    get: operations["v1_activity_list_count_handler"];
  };
  "/asset_change/get": {
    /**
     * Get a asset
     * @description Get a asset
     */
    get: operations["v1_asset_change_get_handler"];
  };
  "/asset_change/list": {
    /**
     * Returns a list of assets.
     * @description Returns a list of assets.
     */
    get: operations["v1_asset_change_list_handler"];
  };
  "/auth/logout": {
    /**
     * Logout a session
     * @description Logout a session
     */
    post: operations["v1_auth_logout_handler"];
  };
  "/auth/nonce": {
    /**
     * Get a auth nonce
     * @description Get a auth nonce
     */
    get: operations["v1_auth_nonce_handler"];
  };
  "/auth/session": {
    /**
     * Get a session
     * @description Get a session
     */
    get: operations["v1_auth_session_handler"];
  };
  "/auth/verify": {
    /**
     * Verify a auth
     * @description Verify a auth
     */
    post: operations["v1_auth_verify_handler"];
  };
  "/chain/create": {
    /**
     * Create a chain.
     * @description Create a chain.
     */
    post: operations["v1_chain_create_handler"];
  };
  "/chain/get": {
    /**
     * Get a protocol group
     * @description Get a protocol group
     */
    get: operations["v1_chain_get_handler"];
  };
  "/chain/list": {
    /**
     * Returns a list of protocol groups.
     * @description Returns a list of protocol groups.
     */
    get: operations["v1_chain_list_handler"];
  };
  "/chain/update": {
    /**
     * Update a chain.
     * @description Update a chain.
     */
    put: operations["v1_chain_update_handler"];
  };
  "/check": {
    /**
     * Check if the server is running.
     * @description Check if the server is running.
     */
    get: operations["handler"];
  };
  "/configuration/get": {
    /**
     * Get a configuration
     * @description Get a configuration
     */
    get: operations["v1_configuration_get_handler"];
  };
  "/configuration/list": {
    /**
     * Returns a list of configurations.
     * @description Returns a list of configurations.
     */
    get: operations["v1_configuration_list_handler"];
  };
  "/feedback/create": {
    /**
     * Create a feedback
     * @description Create a feedback
     */
    post: operations["v1_feedback_create_handler"];
  };
  "/health": {
    /**
     * Check the health of the server.
     * @description Check the health of the server.
     */
    get: operations["handler"];
  };
  "/interpretation/get": {
    /**
     * Get a interpretation
     * @description Get a interpretation
     */
    get: operations["v1_interpretation_get_handler"];
  };
  "/interpretation/list": {
    /**
     * Returns a list of interpretations.
     * @description Returns a list of interpretations.
     */
    get: operations["v1_interpretation_list_handler"];
  };
  "/interpretation_action/get": {
    /**
     * Get a paymaster
     * @description Get a paymaster
     */
    get: operations["v1_interpretation_action_get_handler"];
  };
  "/interpretation_action/list": {
    /**
     * Returns a list of interpretation actions.
     * @description Returns a list of interpretation actions.
     */
    get: operations["v1_interpretation_action_list_handler"];
  };
  "/interpretation_action/list/count": {
    /**
     * Returns a count of list of interpretation actions.
     * @description Returns a count of list of interpretation actions.
     */
    get: operations["v1_interpretation_action_list_count_handler"];
  };
  "/invite_code/create": {
    /**
     * Create an invite code
     * @description Create an invite code
     */
    post: operations["v1_invite_code_create_handler"];
  };
  "/invite_code/get": {
    /**
     * Get a paymaster
     * @description Get a paymaster
     */
    get: operations["v1_invite_code_get_handler"];
  };
  "/invite_code/list": {
    /**
     * Returns a list of invite codes.
     * @description Returns a list of invite codes.
     */
    get: operations["v1_invite_code_list_handler"];
  };
  "/invite_code/list/count": {
    /**
     * Returns a count of list of invite codes.
     * @description Returns a count of list of invite codes.
     */
    get: operations["v1_invite_code_list_count_handler"];
  };
  "/notification/get": {
    /**
     * Get a notification
     * @description Get a notification
     */
    get: operations["v1_notification_get_handler"];
  };
  "/notification/list": {
    /**
     * Returns a list of notifications.
     * @description Returns a list of notifications.
     */
    get: operations["v1_notification_list_handler"];
  };
  "/notification/list/count": {
    /**
     * Returns a count of list of notifications.
     * @description Returns a count of list of notifications.
     */
    get: operations["v1_notification_list_count_handler"];
  };
  "/notification/read": {
    /**
     * Read a list of notifications
     * @description Read a list of notifications
     */
    post: operations["v1_notification_read_handler"];
  };
  "/owner/get": {
    /**
     * Get a owner
     * @description Get a owner
     */
    get: operations["v1_owner_get_handler"];
  };
  "/owner/list": {
    /**
     * Returns a list of owners.
     * @description Returns a list of owners.
     */
    get: operations["v1_owner_list_handler"];
  };
  "/paymaster/get": {
    /**
     * Get a paymaster
     * @description Get a paymaster
     */
    get: operations["v1_paymaster_get_handler"];
  };
  "/paymaster/list": {
    /**
     * Returns a list of paymasters.
     * @description Returns a list of paymasters.
     */
    get: operations["v1_paymaster_list_handler"];
  };
  "/paymaster_operation/get": {
    /**
     * Get a paymaster
     * @description Get a paymaster
     */
    get: operations["v1_paymaster_operation_get_handler"];
  };
  "/paymaster_operation/list": {
    /**
     * Returns a list of paymasters.
     * @description Returns a list of paymasters.
     */
    get: operations["v1_paymaster_operation_list_handler"];
  };
  "/portfolio/get": {
    /**
     * Get a portfolio
     * @description Get a portfolio
     */
    get: operations["v1_portfolio_get_handler"];
  };
  "/protocol/get": {
    /**
     * Get a protocol
     * @description Get a protocol
     */
    get: operations["v1_protocol_get_handler"];
  };
  "/protocol/group/create": {
    /**
     * Create a protocol group.
     * @description Create a protocol group.
     */
    post: operations["v1_protocol_group_create_handler"];
  };
  "/protocol/group/get": {
    /**
     * Get a protocol group
     * @description Get a protocol group
     */
    get: operations["v1_protocol_group_get_handler"];
  };
  "/protocol/group/list": {
    /**
     * Returns a list of protocol groups.
     * @description Returns a list of protocol groups.
     */
    get: operations["v1_protocol_group_list_handler"];
  };
  "/protocol/list": {
    /**
     * Returns a list of protocols.
     * @description Returns a list of protocols.
     */
    get: operations["v1_protocol_list_handler"];
  };
  "/queue/interpretation": {
    /**
     * Queue interpretation handler.
     * @description Queue interpretation handler.
     */
    post: operations["v1_queue_interpretation_handler"];
  };
  "/queue/portfolio": {
    /**
     * Queue portfolio handler.
     * @description Queue portfolio handler.
     */
    post: operations["v1_queue_portfolio_handler"];
  };
  "/queue/token": {
    /**
     * Queue token handler.
     * @description Queue token handler.
     */
    post: operations["v1_queue_token_handler"];
  };
  "/signature/create": {
    /**
     * Create a signature
     * @description Create a signature
     */
    post: operations["v1_signature_create_handler"];
  };
  "/signature/get": {
    /**
     * Get a signature
     * @description Get a signature
     */
    get: operations["v1_signature_get_handler"];
  };
  "/signature/list": {
    /**
     * Returns a list of signatures.
     * @description Returns a list of signatures.
     */
    get: operations["v1_signature_list_handler"];
  };
  "/simulation/create": {
    /**
     * Create a simulation.
     * @description Create a simulation.
     */
    post: operations["v1_simulation_create_handler"];
  };
  "/simulation/get": {
    /**
     * Get a simulation
     * @description Get a simulation
     */
    get: operations["v1_simulation_get_handler"];
  };
  "/simulation/list": {
    /**
     * Returns a list of simulations.
     * @description Returns a list of simulations.
     */
    get: operations["v1_simulation_list_handler"];
  };
  "/simulation/list/count": {
    /**
     * Returns a count of list of simulations.
     * @description Returns a count of list of simulations.
     */
    get: operations["v1_simulation_list_count_handler"];
  };
  "/support_request/create": {
    /**
     * Create a support_request
     * @description Create a support_request
     */
    post: operations["v1_support_request_create_handler"];
  };
  "/token/get": {
    /**
     * Get a token
     * @description Get a token
     */
    get: operations["v1_token_get_handler"];
  };
  "/token/group/create": {
    /**
     * Create a token group.
     * @description Create a token group.
     */
    post: operations["v1_token_group_create_handler"];
  };
  "/token/group/get": {
    /**
     * Get a token group
     * @description Get a token group
     */
    get: operations["v1_token_group_get_handler"];
  };
  "/token/group/list": {
    /**
     * Returns a list of token groups.
     * @description Returns a list of token groups.
     */
    get: operations["v1_token_group_list_handler"];
  };
  "/token/list": {
    /**
     * Returns a list of tokens.
     * @description Returns a list of tokens.
     */
    get: operations["v1_token_list_handler"];
  };
  "/token/list/count": {
    /**
     * Returns a count of list of tokens.
     * @description Returns a count of list of tokens.
     */
    get: operations["v1_token_list_count_handler"];
  };
  "/token/update": {
    /**
     * Update a token.
     * @description Update a token.
     */
    put: operations["v1_token_update_handler"];
  };
  "/token_price/get": {
    /**
     * Get a token_price
     * @description Get a token_price
     */
    get: operations["v1_token_price_get_handler"];
  };
  "/transaction/get": {
    /**
     * Get a transaction
     * @description Get a transaction
     */
    get: operations["v1_transaction_get_handler"];
  };
  "/transaction/list": {
    /**
     * Returns a list of transactions.
     * @description Returns a list of transactions.
     */
    get: operations["v1_transaction_list_handler"];
  };
  "/transaction/list/count": {
    /**
     * Returns a count of list of transactions.
     * @description Returns a count of list of transactions.
     */
    get: operations["v1_transaction_list_count_handler"];
  };
  "/user/get": {
    /**
     * Get a user
     * @description Get a user
     */
    get: operations["v1_user_get_handler"];
  };
  "/user_operation/create": {
    /**
     * Create a user operation
     * @description Create a user operation
     */
    post: operations["v1_user_operation_create_handler"];
  };
  "/user_operation/get": {
    /**
     * Get a user operation
     * @description Get a user operation
     */
    get: operations["v1_user_operation_get_handler"];
  };
  "/user_operation/list": {
    /**
     * Returns a list of user operations.
     * @description Returns a list of user operations.
     */
    get: operations["v1_user_operation_list_handler"];
  };
  "/user_operation/list/count": {
    /**
     * Returns a count of user operations.
     * @description Returns a count of user operations.
     */
    get: operations["v1_user_operation_list_count_handler"];
  };
  "/user_operation/nonce": {
    /**
     * Get a user operation nonce
     * @description Get a user operation nonce
     */
    get: operations["v1_user_operation_nonce_handler"];
  };
  "/user_operation/signature": {
    /**
     * Check a user operation for its validity and return the computed signature if valid.
     * @description Check a user operation for its validity and return the computed signature if valid.
     */
    get: operations["v1_user_operation_signature_handler"];
  };
  "/user_operation/update": {
    /**
     * Get a user operation
     * @description Get a user operation
     */
    post: operations["v1_user_operation_update_handler"];
  };
  "/wallet/billing/get": {
    /**
     * Get a wallet_billing
     * @description Get a wallet_billing
     */
    get: operations["v1_wallet_billing_get_handler"];
  };
  "/wallet/billing/update": {
    /**
     * Create a wallet_billing
     * @description Create a wallet_billing
     */
    post: operations["v1_wallet_billing_update_handler"];
  };
  "/wallet/create": {
    /**
     * Create a wallet
     * @description Create a wallet
     */
    post: operations["v1_wallet_create_handler"];
  };
  "/wallet/features/get": {
    /**
     * Get a wallet_features
     * @description Get a wallet_features
     */
    get: operations["v1_wallet_features_get_handler"];
  };
  "/wallet/features/update": {
    /**
     * Create a wallet_features
     * @description Create a wallet_features
     */
    post: operations["v1_wallet_features_update_handler"];
  };
  "/wallet/get": {
    /**
     * Get a wallet
     * @description Get a wallet
     */
    get: operations["v1_wallet_get_handler"];
  };
  "/wallet/list": {
    /**
     * Returns a list of wallets.
     * @description Returns a list of wallets.
     */
    get: operations["v1_wallet_list_handler"];
  };
  "/wallet/list/count": {
    /**
     * Returns a count of list of wallets.
     * @description Returns a count of list of wallets.
     */
    get: operations["v1_wallet_list_count_handler"];
  };
  "/wallet/settings/get": {
    /**
     * Get a wallet_settings
     * @description Get a wallet_settings
     */
    get: operations["v1_wallet_settings_get_handler"];
  };
  "/wallet/settings/update": {
    /**
     * Create a wallet_settings
     * @description Create a wallet_settings
     */
    post: operations["v1_wallet_settings_update_handler"];
  };
  "/wallet/update": {
    /**
     * Update a wallet
     * @description Update a wallet
     */
    put: operations["v1_wallet_update_handler"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Activity root type. */
    Activity: {
      /** @description The wallet address of the activity. */
      address?: string | null;
      /** @description The entity id of the activity. */
      entity: string;
      /** @description The id of the activity. */
      id: string;
      /** @description The operation type of the activity. */
      operation: string;
      /** @description The timestamp of the activity. */
      timestamp: string;
      user?: components["schemas"]["User"] | null;
    };
    /** @description Activity errors */
    ActivityError: OneOf<[{
      /** @description Activity query error. */
      BadRequest: string;
    }, {
      /** @description Activity not found by id. */
      NotFound: string;
    }]>;
    /** @description Count of list of user operations. */
    ActivityListCount: {
      /**
       * Format: int64
       * @description The count of the list of user operations..
       */
      count: number;
    };
    /** @description AssetChange root type. */
    AssetChange: {
      action?: components["schemas"]["InterpretationAction"] | null;
      /** @description The address of the asset change. */
      address: string;
      /**
       * Format: int64
       * @description The after amount of the asset change.
       */
      after_amount?: number | null;
      /**
       * Format: int64
       * @description The amount of the asset change.
       */
      amount: number;
      /**
       * Format: int64
       * @description The before amount of the asset change.
       */
      before_amount?: number | null;
      /** @description The id of the asset change. */
      id: string;
      token?: components["schemas"]["Token"] | null;
    };
    /** @description AssetChange errors */
    AssetChangeError: OneOf<[{
      /** @description AssetChange query error. */
      BadRequest: string;
    }, {
      /** @description AssetChange not found by id. */
      NotFound: string;
    }]>;
    /** @description Auth operation errors */
    AuthError: OneOf<[{
      BadRequest: string;
    }, {
      /** @description Auth not found by id. */
      NotFound: string;
    }, {
      /** @description Internal error. */
      InternalError: string;
    }, {
      /** @description Unauthorized error. */
      Unauthorized: string;
    }]>;
    /** @description Auth nonce. */
    AuthNonce: {
      nonce: string;
    };
    /** @description The session. */
    AuthSession: {
      /** @description The session expiration. */
      expiration: string;
      /** @description The session id. */
      id: string;
      /** @description The authenticated status. */
      is_authenticated: boolean;
    };
    AuthVerifyCreateRequestParams: {
      message: string;
      signature: string;
    };
    /** @description Chain root type. */
    Chain: {
      /**
       * Format: int64
       * @description The id of the protocol group.
       */
      id: number;
    };
    /** @description Chain errors */
    ChainError: OneOf<[{
      /** @description Chain query error. */
      BadRequest: string;
    }, {
      /** @description Chain not found by id. */
      NotFound: string;
    }, {
      /** @description Chain unauthorized. */
      Unauthorized: string;
    }]>;
    ChainUpdateRequestParams: {
      /**
       * @description The name of the chain.
       * @default Chain
       * @example My Chain
       */
      name?: string | null;
    };
    /** @description Configuration root type. */
    Configuration: {
      /** @description The address of the configuration. */
      address: string;
      /**
       * Format: int64
       * @description The checkpoint of the configuration.
       */
      checkpoint: number;
      /** @description The id of the configuration. */
      id: string;
      /** @description The image hash of the configuration. */
      image_hash: string;
      /** @description The owners of the configuration. */
      owners: components["schemas"]["ConfigurationOwner"][];
      /**
       * Format: int64
       * @description The threshold of the configuration.
       */
      threshold: number;
    };
    /** @description Configuration errors */
    ConfigurationError: OneOf<[{
      /** @description Configuration query error. */
      BadRequest: string;
    }, {
      /** @description Configuration not found by id. */
      NotFound: string;
    }]>;
    /** @description Configuration Owner. */
    ConfigurationOwner: {
      /** @description The address of the owner. */
      address: string;
      /** @description The id of the owner. */
      id: string;
      /**
       * Format: int32
       * @description The index of the owner.
       */
      index: number;
      user?: components["schemas"]["User"] | null;
      /**
       * Format: int64
       * @description The weight of the owner.
       */
      weight: number;
    };
    /** @description Feedback root type. */
    Feedback: {
      /** @description The emoji of the feedback. */
      emoji: string;
      /** @description The text of the feedback. */
      text: string;
    };
    FeedbackCreateRequestParams: {
      feedback: components["schemas"]["Feedback"];
    };
    /** @description Feedback error */
    FeedbackError: OneOf<[{
      /** @description Feedback bad request error. */
      BadRequest: string;
    }, {
      /** @description Feedback not found by id. */
      NotFound: string;
    }]>;
    /** @description Interpretation root type. */
    Interpretation: {
      /** @description The array of actions of the interpretation. */
      actions: components["schemas"]["InterpretationAction"][];
      /** @description The array of asset changes of the interpretation. */
      asset_changes: components["schemas"]["AssetChange"][];
      /** @description The id of the interpretation to read for. */
      id: string;
    };
    /** @description InterpretationAction root type. */
    InterpretationAction: {
      /** @description The action of the interpretation action. */
      action: string;
      /** @description The status of the interpretation action. */
      address: string;
      /** @description The id of the interpretation action. */
      id: string;
    };
    /** @description InterpretationAction errors */
    InterpretationActionError: OneOf<[{
      /** @description InterpretationAction query error. */
      BadRequest: string;
    }, {
      /** @description InterpretationAction not found by id. */
      NotFound: string;
    }]>;
    /** @description Count of list of interpretation actions. */
    InterpretationActionListCount: {
      /**
       * Format: int64
       * @description The count of the list of interpretation actions.
       */
      count: number;
    };
    /** @description Interpretation operation errors */
    InterpretationError: OneOf<[{
      /** @description Interpretation query error. */
      BadRequest: string;
    }, {
      /** @description Interpretation not found by id. */
      NotFound: string;
    }]>;
    /** @description InviteCode root type. */
    InviteCode: {
      /** @description The code of the invite code. */
      code: string;
      /** @description The id of the invite code. */
      id: string;
      /** @description The status of the invite code. */
      status: string;
    };
    /** @description InviteCode errors */
    InviteCodeError: OneOf<[{
      /** @description InviteCode query error. */
      BadRequest: string;
    }, {
      /** @description InviteCode not found by id. */
      NotFound: string;
    }, {
      /** @description Not Authorized. */
      Unauthorized: string;
    }]>;
    /** @description Count of list of user operations. */
    InviteCodeListCount: {
      /**
       * Format: int64
       * @description The count of the list of user operations..
       */
      count: number;
    };
    /** @description Notification root type. */
    Notification: {
      /** @description The id of the notification to read for. */
      id: string;
    };
    /** @description Notification operation errors */
    NotificationError: OneOf<[{
      /** @description Notification query error. */
      BadRequest: string;
    }, {
      /** @description Notification not found by id. */
      NotFound: string;
    }]>;
    /** @description Count of list of user operations. */
    NotificationListCount: {
      /**
       * Format: int64
       * @description The count of the list of user operations..
       */
      count: number;
    };
    /** @description Item to request. */
    NotificationReadParams: {
      /** @description The id of the notification to read for. */
      id: string;
    };
    NotificationReadRequestParams: {
      /** @description The array of the notifications to query. */
      notifications: components["schemas"]["NotificationReadParams"][];
    };
    /** @description Owner root type. */
    Owner: {
      /** @description The address of the owner. */
      address: string;
      /** @description The id of the owner. */
      id: string;
      /**
       * Format: int64
       * @description The weight of the owner.
       */
      weight: number;
    };
    /** @description Owner operation errors */
    OwnerError: OneOf<[{
      /** @description Owner query error. */
      BadRequest: string;
    }, {
      /** @description Owner not found by id. */
      NotFound: string;
    }]>;
    /** @description Paymaster root type. */
    Paymaster: {
      /** @description The address of the paymaster. */
      address: string;
    };
    /** @description Paymaster operation errors */
    PaymasterError: OneOf<[{
      /** @description Paymaster query error. */
      BadRequest: string;
    }, {
      /** @description Paymaster not found by id. */
      NotFound: string;
    }]>;
    /** @description PaymasterOperation root type. */
    PaymasterOperation: {
      /** @description The id of the paymaster operation. */
      id: string;
    };
    /** @description PaymasterOperation errors */
    PaymasterOperationError: OneOf<[{
      /** @description PaymasterOperation query error. */
      BadRequest: string;
    }, {
      /** @description PaymasterOperation not found by id. */
      NotFound: string;
    }]>;
    /** @description Portfolio root type. */
    Portfolio: {
      /**
       * Format: double
       * @description The balance of the portfolio.
       */
      balance: number;
      /**
       * Format: double
       * @description The change of the balance in the last 24 hours.
       */
      balance_change_24h: number;
      /**
       * Format: double
       * @description The percentage change of the balance in the last 24 hours.
       */
      balance_change_24h_percentage: number;
      /** @description The historical balances of the portfolio. */
      balances: components["schemas"]["PortfolioBalanceDate"][];
    };
    /** @description Portfolio to do. */
    PortfolioBalanceDate: {
      /**
       * Format: double
       * @description The balance of the portfolio.
       */
      balance: number;
      /** @description The date of the balance. */
      date: string;
    };
    /** @description Portfolio operation errors */
    PortfolioError: OneOf<[{
      /** @description Portfolio query error. */
      BadRequest: string;
    }, {
      /** @description Portfolio already exists conflict. */
      Conflict: string;
    }]>;
    /** @description Protocol root type. */
    Protocol: {
      /** @description The address of the protocol. */
      address: string;
    };
    /** @description Protocol errors */
    ProtocolError: OneOf<[{
      /** @description Protocol query error. */
      BadRequest: string;
    }, {
      /** @description Protocol not found by id. */
      NotFound: string;
    }]>;
    /** @description ProtocolGroup root type. */
    ProtocolGroup: {
      /** @description The id of the protocol group. */
      id: string;
    };
    /** @description ProtocolGroup errors */
    ProtocolGroupError: OneOf<[{
      /** @description ProtocolGroup query error. */
      BadRequest: string;
    }, {
      /** @description ProtocolGroup not found by id. */
      NotFound: string;
    }, {
      /** @description ProtocolGroup unauthorized. */
      Unauthorized: string;
    }]>;
    /** @description Queue operation errors */
    QueueError: OneOf<[{
      /** @description Queue query error. */
      BadRequest: string;
    }, {
      /** @description Queue not found by id. */
      NotFound: string;
    }, {
      /** @description Queue rate limit exceeded. */
      RateLimitExceeded: string;
    }]>;
    /** @description Queue success response. */
    QueueSuccess: {
      /** @description User operation queued successfully. */
      Queued: string;
    };
    /** @description Signature root type. */
    Signature: {
      /** @description The created time of the signature. */
      created_at: string;
      /** @description The id of the owner of the signature. */
      owner_id: string;
      /** @description The signature of the user operation in hex. */
      signature: string;
      /**
       * Format: int32
       * @description The type of the signature.
       */
      signature_type: number;
    };
    /** @description Signature operation */
    SignatureCreateParams: {
      /** @description The id of the owner of the signature. */
      owner_id: string;
      /** @description The signature of the user operation in hex. */
      signature: string;
      /**
       * Format: int32
       * @description The type of the signature.
       */
      signature_type: number;
    };
    /** @description Signature operation post request params */
    SignatureCreateRequestParams: {
      signature: components["schemas"]["SignatureCreateParams"];
    };
    /** @description Signature operation errors */
    SignatureError: OneOf<[{
      /** @description Signature query error. */
      BadRequest: string;
    }, {
      /** @description Signature not found by id. */
      NotFound: string;
    }]>;
    /** @description Simulation root type. */
    Simulation: {
      /**
       * Format: int32
       * @description The block number of the simulation.
       */
      block_number: number;
      /**
       * Format: int64
       * @description The amount of gas used in the simulation.
       */
      gas_used: number;
      /** @description The id of the simulation to read for. */
      id: string;
      interpretation?: components["schemas"]["Interpretation"] | null;
      /** @description The state of the simulation. */
      status: string;
      /** @description Flag of whether the simulation is successful. */
      success: boolean;
    };
    SimulationCreateRequestParams: {
      /** @description The call data of the simulation to update for. */
      call_data: string;
      /**
       * Format: int64
       * @description The chain id of the simulation to update for.
       */
      chain_id: number;
      /** @description The init code of the simulation to update for. */
      init_code: string;
      /**
       * Format: int64
       * @description The nonce of the simulation to update for.
       */
      nonce: number;
      /** @description The from address of the simulation to update for. */
      sender: string;
    };
    /** @description Simulation operation errors */
    SimulationError: OneOf<[{
      /** @description Simulation query error. */
      BadRequest: string;
    }, {
      /** @description Simulation not found by id. */
      NotFound: string;
    }]>;
    /** @description Count of list of simulations. */
    SimulationListCount: {
      /**
       * Format: int64
       * @description The count of the list of simulations..
       */
      count: number;
    };
    /** @description Support Request root type. */
    SupportRequest: {
      /** @description The area of the support_request. */
      area: string;
      /** @description The description of the support_request. */
      description: string;
      /**
       * Format: int32
       * @description The severity of the support_request.
       */
      severity: number;
      /** @description The title of the support_request. */
      title: string;
    };
    SupportRequestCreateRequestParams: {
      support_request: components["schemas"]["SupportRequest"];
    };
    /** @description Support_request operation errors */
    SupportRequestError: OneOf<[{
      /** @description Support_request query error. */
      BadRequest: string;
    }, {
      /** @description Support_request not found by id. */
      NotFound: string;
    }]>;
    /** @description Token root type. */
    Token: {
      /** @description The address of the token. */
      address: string;
      /**
       * Format: int64
       * @description The amount of the token.
       */
      amount: number;
      /**
       * Format: double
       * @description The balance of the token in USD.
       */
      balance_usd: number;
      /**
       * Format: int64
       * @description The chain id of the token.
       */
      chain_id: number;
      /**
       * Format: int32
       * @description The decimals of the token.
       */
      decimals: number;
      group?: components["schemas"]["TokenGroup"] | null;
      /** @description The id of the token. */
      id: string;
      /** @description The name of the token. */
      name?: string | null;
      /** @description The symbol of the token. */
      symbol: string;
      /** @description The type of the token. */
      token_type?: string | null;
    };
    /** @description Token error. */
    TokenError: OneOf<[{
      /** @description Token query error. */
      BadRequest: string;
    }, {
      /** @description Token not found by id. */
      NotFound: string;
    }, {
      /** @description Unauthorized token access. */
      Unauthorized: string;
    }]>;
    /** @description TokenGroup root type. */
    TokenGroup: {
      /** @description The id of the token group. */
      id: string;
    };
    /** @description TokenGroup errors */
    TokenGroupError: OneOf<[{
      /** @description TokenGroup query error. */
      BadRequest: string;
    }, {
      /** @description TokenGroup not found by id. */
      NotFound: string;
    }, {
      /** @description TokenGroup unauthorized. */
      Unauthorized: string;
    }]>;
    /** @description Count of list of tokens. */
    TokenListCount: {
      /**
       * Format: int64
       * @description The count of the list of tokens.
       */
      count: number;
    };
    /** @description TokenPrice root type. */
    TokenPrice: {
      /**
       * Format: double
       * @description The price of the token price.
       */
      price: number;
      /**
       * Format: double
       * @description The change of the token price in the last 24 hours.
       */
      price_change_24h: number;
      /**
       * Format: double
       * @description The percentage change of the token price in the last 24 hours.
       */
      price_change_24h_percentage: number;
      /** @description The historical prices of the token price. */
      prices: components["schemas"]["TokenPriceDate"][];
    };
    TokenPriceDate: {
      /** @description The date of the token price. */
      date: string;
      /**
       * Format: double
       * @description The price of the token price.
       */
      price: number;
    };
    /** @description TokenPrice error. */
    TokenPriceError: OneOf<[{
      /** @description TokenPrice query error. */
      BadRequest: string;
    }, {
      /** @description TokenPrice not found by id. */
      NotFound: string;
    }]>;
    TokenUpdateRequestParams: {
      /**
       * @description The name of the wallet.
       * @default My Token
       * @example My Token
       */
      name?: string | null;
    };
    /** @description Transaction root type. */
    Transaction: {
      /**
       * Format: int64
       * @description The chain id of the transaction.
       */
      chain_id: number;
      /** @description The hash of the transaction. */
      hash: string;
      interpretation?: components["schemas"]["Interpretation"] | null;
      /** @description The timestamp of the transaction. */
      timestamp: string;
    };
    /** @description Transaction operation errors */
    TransactionError: OneOf<[{
      /** @description Transaction query error. */
      BadRequest: string;
    }, {
      /** @description Transaction not found by id. */
      NotFound: string;
    }]>;
    /** @description Count of list of user operations. */
    TransactionListCount: {
      /**
       * Format: int64
       * @description The count of the list of user operations..
       */
      count: number;
    };
    /** @description User root type. */
    User: {
      /** @description The wallet address of the user. */
      address: string;
      /** @description The id of the user. */
      id: string;
    };
    /** @description User operation errors */
    UserError: OneOf<[{
      /** @description User query error. */
      BadRequest: string;
    }, {
      /** @description User not found by id. */
      NotFound: string;
    }]>;
    /** @description User operation root type. */
    UserOperation: {
      /** @description The call data of the user operation. */
      call_data: string;
      /**
       * Format: int64
       * @description The call gas of the user operation.
       */
      call_gas_limit: number;
      /**
       * Format: int64
       * @description The chain id of the user operation.
       */
      chain_id: number;
      /** @description The timestamp of the user operation. */
      created_at: string;
      /** @description The hash of the user operation. */
      hash: string;
      /** @description The init code of the user operation. */
      init_code: string;
      interpretation?: components["schemas"]["Interpretation"] | null;
      /**
       * Format: int64
       * @description The maximum fee per gas of the user operation.
       */
      max_fee_per_gas: number;
      /**
       * Format: int64
       * @description The maximum priority fee per gas of the user operation.
       */
      max_priority_fee_per_gas: number;
      /**
       * Format: int64
       * @description The nonce of the user operation.
       */
      nonce: number;
      paymaster?: components["schemas"]["Paymaster"] | null;
      /** @description The paymaster and data of the user operation. */
      paymaster_and_data: string;
      /**
       * Format: int64
       * @description The pre verification gas of the user operation.
       */
      pre_verification_gas: number;
      /** @description The sender of the user operation. */
      sender: string;
      /** @description The signatures of the user operation. */
      signatures: components["schemas"]["Signature"][];
      /** @description The status of the user operation. */
      status: string;
      transaction?: components["schemas"]["Transaction"] | null;
      /** @description The timestamp updated of the user operation. */
      updated_at: string;
      /**
       * Format: int64
       * @description The verification gas of the user operation.
       */
      verification_gas_limit: number;
    };
    /** @description Item to create. */
    UserOperationCreateParams: {
      call_data: string;
      /** Format: int64 */
      call_gas_limit: number;
      /** Format: int64 */
      chain_id: number;
      hash: string;
      init_code: string;
      /** Format: int64 */
      max_fee_per_gas: number;
      /** Format: int64 */
      max_priority_fee_per_gas: number;
      /** Format: int64 */
      nonce: number;
      paymaster_and_data: string;
      /** Format: int64 */
      pre_verification_gas: number;
      sender: string;
      /** Format: int64 */
      verification_gas_limit: number;
    };
    UserOperationCreateRequestParams: {
      signature: components["schemas"]["SignatureCreateParams"];
      user_operation: components["schemas"]["UserOperationCreateParams"];
    };
    /** @description User operation operation errors */
    UserOperationError: OneOf<[{
      BadRequest: string;
    }, {
      /** @description User operation not found by id. */
      NotFound: string;
    }]>;
    /** @description Count of list of user operations. */
    UserOperationListCount: {
      /**
       * Format: int64
       * @description The count of the list of user operations..
       */
      count: number;
    };
    /** @description Nonce */
    UserOperationNonce: {
      /**
       * Format: int64
       * @description The hash of the transaction.
       */
      nonce: number;
    };
    /** @description User operation operation errors */
    UserOperationSuccess: {
      /** @description User operation updated successfully. */
      Updated: string;
    };
    /** @description Wallet root type. */
    Wallet: {
      /** @description The address of the wallet. */
      address: string;
      /** @description The address of the factory. */
      factory_address: string;
      /** @description The name of the wallet. */
      name: string;
      /** @description The salt of the wallet. */
      salt: string;
    };
    /** @description WalletBilling root type. */
    WalletBilling: {
      /**
       * Format: double
       * @description The wallet billing of the balance in USD.
       */
      balance_usd: number;
    };
    /** @description WalletBilling operation errors */
    WalletBillingError: OneOf<[{
      BadRequest: string;
    }, {
      /** @description WalletBilling not found by id. */
      NotFound: string;
    }, {
      /** @description WalletBilling unauthorized. */
      Unauthorized: string;
    }]>;
    /** @description Optional WalletBilling root type. */
    WalletBillingOptional: {
      /**
       * Format: double
       * @description The update query of wallet_billing of whether the testnet is enabled.
       */
      balance_usd?: number | null;
    };
    WalletBillingUpdateRequestParams: {
      wallet_billing: components["schemas"]["WalletBillingOptional"];
    };
    /**
     * @description Wallet owner.
     * @example {
     *   "address": "0x4fd9D0eE6D6564E80A9Ee00c0163fC952d0A45Ed",
     *   "weight": 1
     * }
     */
    WalletCreateOwnerParams: {
      /** @description The address of the owner. */
      address: string;
      /**
       * Format: int32
       * @description The weight of the owner.
       */
      weight: number;
    };
    WalletCreateRequestParams: {
      /**
       * @description The invite code of the wallet.
       * @example BFD-23S
       */
      invite_code?: string | null;
      /**
       * @description The name of the wallet.
       * @default My Wallet
       * @example My Wallet
       */
      name: string;
      /**
       * @description The array of owners of the wallet.
       * @example [
       *   {
       *     "address": "0x4fd9D0eE6D6564E80A9Ee00c0163fC952d0A45Ed",
       *     "weight": 1
       *   }
       * ]
       */
      owners: components["schemas"]["WalletCreateOwnerParams"][];
      /**
       * @description The salt is used to calculate the new wallet address.
       * @default 0x0000000000000000000000000000000000000000000000000000000000000001
       * @example 0x0000000000000000000000000000000000000000000000000000000000000006
       */
      salt: string;
      /**
       * Format: int32
       * @description The threshold of the wallet.
       * @default 1
       * @example 3
       */
      threshold: number;
    };
    /** @description Wallet operation errors */
    WalletError: OneOf<[{
      /** @description Wallet query error. */
      BadRequest: string;
    }, {
      /** @description Wallet already exists conflict. */
      Conflict: string;
    }, {
      /** @description Wallet not found by id. */
      NotFound: string;
    }, {
      /**
       * @description Wallet configuration is invalid.
       * The threshold is greater than the number of owners.
       * The threshold is 0.
       */
      InvalidConfiguration: string;
    }]>;
    /** @description WalletFeatures root type. */
    WalletFeatures: {
      /** @description The wallet_features of whether the testnet is enabled. */
      is_enabled_ai: boolean;
    };
    /** @description WalletFeatures operation errors */
    WalletFeaturesError: OneOf<[{
      BadRequest: string;
    }, {
      /** @description WalletFeatures not found by id. */
      NotFound: string;
    }, {
      /** @description WalletFeatures unauthorized. */
      Unauthorized: string;
    }]>;
    /** @description Optional WalletFeatures root type. */
    WalletFeaturesOptional: {
      /** @description The update query of wallet_features of whether the testnet is enabled. */
      is_enabled_ai?: boolean | null;
    };
    WalletFeaturesUpdateRequestParams: {
      wallet_features: components["schemas"]["WalletFeaturesOptional"];
    };
    /** @description Count of list of wallets. */
    WalletListCount: {
      /**
       * Format: int64
       * @description The count of the list of wallets.
       */
      count: number;
    };
    /** @description WalletSettings root type. */
    WalletSettings: {
      /** @description The wallet_settings of whether the testnet is enabled. */
      is_enabled_testnet: boolean;
    };
    /** @description WalletSettings operation errors */
    WalletSettingsError: OneOf<[{
      BadRequest: string;
    }, {
      /** @description WalletSettings not found by id. */
      NotFound: string;
    }]>;
    /** @description Optional WalletSettings root type. */
    WalletSettingsOptional: {
      /** @description The update query of wallet_settings of whether the testnet is enabled. */
      is_enabled_testnet?: boolean | null;
    };
    WalletSettingsUpdateRequestParams: {
      wallet_settings: components["schemas"]["WalletSettingsOptional"];
    };
    WalletUpdateRequestParams: {
      /**
       * @description The name of the wallet.
       * @default My Wallet
       * @example My Wallet
       */
      name?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get a activity
   * @description Get a activity
   */
  v1_activity_get_handler: {
    parameters: {
      query: {
        /** @description The id of the activity. */
        id: string;
      };
    };
    responses: {
      /** @description Activity returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Activity not found */
      404: {
        content: {
          "application/json": components["schemas"]["ActivityError"];
        };
      };
    };
  };
  /**
   * Returns a list of activities.
   * @description Returns a list of activities.
   */
  v1_activity_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first activity to return. */
        offset?: number | null;
        /** @description The maximum number of activities to return. */
        limit?: number | null;
        /** @description The user id to filter by. */
        user_id?: string | null;
        /** @description Flag to query for only user initiated activities. */
        is_user_related?: boolean | null;
        /** @description The wallet address to filter by. */
        address?: string | null;
      };
    };
    responses: {
      /** @description Activities returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"][];
        };
      };
      /** @description Activity bad request */
      500: {
        content: {
          "application/json": components["schemas"]["ActivityError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of activities.
   * @description Returns a count of list of activities.
   */
  v1_activity_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first activity to return. */
        offset?: number | null;
        /** @description The maximum number of activities to return. */
        limit?: number | null;
        /** @description The user id to filter by. */
        user_id?: string | null;
        /** @description Flag to query for only user initiated activities. */
        is_user_related?: boolean | null;
        /** @description The wallet address to filter by. */
        address?: string | null;
      };
    };
    responses: {
      /** @description Activities returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityListCount"];
        };
      };
      /** @description Activity bad request */
      500: {
        content: {
          "application/json": components["schemas"]["ActivityError"];
        };
      };
    };
  };
  /**
   * Get a asset
   * @description Get a asset
   */
  v1_asset_change_get_handler: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Asset Change returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AssetChange"];
        };
      };
      /** @description Asset Change not found */
      404: {
        content: {
          "application/json": components["schemas"]["AssetChangeError"];
        };
      };
    };
  };
  /**
   * Returns a list of assets.
   * @description Returns a list of assets.
   */
  v1_asset_change_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first asset change to return. */
        offset?: number | null;
        /** @description The maximum number of asset changes to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Asset Changes returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AssetChange"][];
        };
      };
      /** @description Asset Change bad request */
      500: {
        content: {
          "application/json": components["schemas"]["AssetChangeError"];
        };
      };
    };
  };
  /**
   * Logout a session
   * @description Logout a session
   */
  v1_auth_logout_handler: {
    responses: {
      /** @description Auth logout returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AuthSuccess"];
        };
      };
      /** @description Auth logout not succeeded */
      404: {
        content: {
          "application/json": components["schemas"]["AuthError"];
        };
      };
    };
  };
  /**
   * Get a auth nonce
   * @description Get a auth nonce
   */
  v1_auth_nonce_handler: {
    responses: {
      /** @description Auth nonce returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AuthNonce"];
        };
      };
      /** @description Auth nonce not found */
      404: {
        content: {
          "application/json": components["schemas"]["AuthError"];
        };
      };
    };
  };
  /**
   * Get a session
   * @description Get a session
   */
  v1_auth_session_handler: {
    responses: {
      /** @description Auth session returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AuthSession"];
        };
      };
      /** @description Auth session not found */
      404: {
        content: {
          "application/json": components["schemas"]["AuthError"];
        };
      };
    };
  };
  /**
   * Verify a auth
   * @description Verify a auth
   */
  v1_auth_verify_handler: {
    parameters: {
      query: {
        user_address: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthVerifyCreateRequestParams"];
      };
    };
    responses: {
      /** @description Auth verified successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AuthNonce"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["AuthError"];
        };
      };
      /** @description Auth already exists */
      409: {
        content: {
          "application/json": components["schemas"]["AuthError"];
        };
      };
      /** @description Auth internal error */
      500: {
        content: {
          "application/json": components["schemas"]["AuthError"];
        };
      };
    };
  };
  /**
   * Create a chain.
   * @description Create a chain.
   */
  v1_chain_create_handler: {
    parameters: {
      query: {
        /** @description The id of the chain id to createfor. */
        id: number;
        /** @description The name of the chain. */
        name: string;
        /** @description A boolean value to indicate if the chain is testnet. */
        is_testnet: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChainCreateRequestParams"];
      };
    };
    responses: {
      /** @description Chain created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Chain"];
        };
      };
      /** @description Chain internal error */
      500: {
        content: {
          "application/json": components["schemas"]["ChainError"];
        };
      };
    };
  };
  /**
   * Get a protocol group
   * @description Get a protocol group
   */
  v1_chain_get_handler: {
    parameters: {
      query: {
        /** @description The chain id to query for. */
        id: number;
      };
    };
    responses: {
      /** @description Protocola group returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Chain"];
        };
      };
      /** @description Protocola group not found */
      404: {
        content: {
          "application/json": components["schemas"]["ChainError"];
        };
      };
    };
  };
  /**
   * Returns a list of protocol groups.
   * @description Returns a list of protocol groups.
   */
  v1_chain_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first protocol group to return. */
        offset?: number | null;
        /** @description The maximum number of protocol groups to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Protocol groups returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Chain"][];
        };
      };
      /** @description Protocol group bad request */
      500: {
        content: {
          "application/json": components["schemas"]["ChainError"];
        };
      };
    };
  };
  /**
   * Update a chain.
   * @description Update a chain.
   */
  v1_chain_update_handler: {
    parameters: {
      query: {
        /** @description The id of the chain id to updatefor. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChainUpdateRequestParams"];
      };
    };
    responses: {
      /** @description Chain updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Chain"];
        };
      };
      /** @description Chain internal error */
      500: {
        content: {
          "application/json": components["schemas"]["ChainError"];
        };
      };
    };
  };
  /**
   * Check the health of the server.
   * @description Check the health of the server.
   */
  handler: {
    responses: {
      /** @description Health returned successfully */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get a configuration
   * @description Get a configuration
   */
  v1_configuration_get_handler: {
    parameters: {
      query: {
        /** @description The address of the configuration to query. */
        address: string;
        /** @description The optional checkpoint to filter by. */
        checkpoint?: number | null;
      };
    };
    responses: {
      /** @description Configuration returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Configuration"];
        };
      };
      /** @description Configuration not found */
      404: {
        content: {
          "application/json": components["schemas"]["ConfigurationError"];
        };
      };
    };
  };
  /**
   * Returns a list of configurations.
   * @description Returns a list of configurations.
   */
  v1_configuration_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first configuration to return. */
        offset?: number | null;
        /** @description The maximum number of configurations to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Configurations returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Configuration"][];
        };
      };
      /** @description Configurations bad request */
      500: {
        content: {
          "application/json": components["schemas"]["ConfigurationError"];
        };
      };
    };
  };
  /**
   * Create a feedback
   * @description Create a feedback
   */
  v1_feedback_create_handler: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeedbackCreateRequestParams"];
      };
    };
    responses: {
      /** @description Feedback created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Feedback"];
        };
      };
      /** @description Feedback internal error */
      500: {
        content: {
          "application/json": components["schemas"]["FeedbackError"];
        };
      };
    };
  };
  /**
   * Get a interpretation
   * @description Get a interpretation
   */
  v1_interpretation_get_handler: {
    parameters: {
      query: {
        /** @description The id of the interpretation to get. */
        id: string;
      };
    };
    responses: {
      /** @description Interpretation returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Interpretation"];
        };
      };
      /** @description Interpretation not found */
      404: {
        content: {
          "application/json": components["schemas"]["InterpretationError"];
        };
      };
    };
  };
  /**
   * Returns a list of interpretations.
   * @description Returns a list of interpretations.
   */
  v1_interpretation_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first interpretation to return. */
        offset?: number | null;
        /** @description The maximum number of interpretations to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Interpretations returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Interpretation"][];
        };
      };
      /** @description Interpretations bad request */
      500: {
        content: {
          "application/json": components["schemas"]["InterpretationError"];
        };
      };
    };
  };
  /**
   * Get a paymaster
   * @description Get a paymaster
   */
  v1_interpretation_action_get_handler: {
    parameters: {
      query: {
        /** @description The id of the interpretation action. */
        id: string;
      };
    };
    responses: {
      /** @description Interpretation action returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InterpretationAction"];
        };
      };
      /** @description Interpretation action not found */
      404: {
        content: {
          "application/json": components["schemas"]["InterpretationActionError"];
        };
      };
    };
  };
  /**
   * Returns a list of interpretation actions.
   * @description Returns a list of interpretation actions.
   */
  v1_interpretation_action_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first interpretation action to return. */
        offset?: number | null;
        /** @description The maximum number of interpretation actions to return. */
        limit?: number | null;
        /** @description The action to filter by. */
        action?: string | null;
        /** @description The address to filter by. */
        address?: string | null;
      };
    };
    responses: {
      /** @description Interpretation Actions returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InterpretationAction"][];
        };
      };
      /** @description Interpretation Action bad request */
      500: {
        content: {
          "application/json": components["schemas"]["InterpretationActionError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of interpretation actions.
   * @description Returns a count of list of interpretation actions.
   */
  v1_interpretation_action_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first interpretation action to return. */
        offset?: number | null;
        /** @description The maximum number of interpretation actions to return. */
        limit?: number | null;
        /** @description The action to filter by. */
        action?: string | null;
        /** @description The address to filter by. */
        address?: string | null;
      };
    };
    responses: {
      /** @description Interpretation actions returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InterpretationActionListCount"];
        };
      };
      /** @description InterpretationAction bad request */
      500: {
        content: {
          "application/json": components["schemas"]["InterpretationActionError"];
        };
      };
    };
  };
  /**
   * Create an invite code
   * @description Create an invite code
   */
  v1_invite_code_create_handler: {
    responses: {
      /** @description Invite code created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InviteCode"];
        };
      };
      /** @description Invite code internal error */
      500: {
        content: {
          "application/json": components["schemas"]["InviteCodeError"];
        };
      };
    };
  };
  /**
   * Get a paymaster
   * @description Get a paymaster
   */
  v1_invite_code_get_handler: {
    parameters: {
      query: {
        /** @description The code of the invite code. */
        code: string;
      };
    };
    responses: {
      /** @description Invite code returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InviteCode"];
        };
      };
      /** @description Invite code not found */
      404: {
        content: {
          "application/json": components["schemas"]["InviteCodeError"];
        };
      };
    };
  };
  /**
   * Returns a list of invite codes.
   * @description Returns a list of invite codes.
   */
  v1_invite_code_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first invite code to return. */
        offset?: number | null;
        /** @description The maximum number of invite codes to return. */
        limit?: number | null;
        /** @description The id of the user to return invite codes for. */
        user_id?: string | null;
      };
    };
    responses: {
      /** @description Invite Codes returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InviteCode"][];
        };
      };
      /** @description InviteCode bad request */
      500: {
        content: {
          "application/json": components["schemas"]["InviteCodeError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of invite codes.
   * @description Returns a count of list of invite codes.
   */
  v1_invite_code_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first invite code to return. */
        offset?: number | null;
        /** @description The maximum number of invite codes to return. */
        limit?: number | null;
        /** @description The id of the user to return invite codes for. */
        user_id?: string | null;
      };
    };
    responses: {
      /** @description Invite Codes returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["InviteCodeListCount"];
        };
      };
      /** @description InviteCode bad request */
      500: {
        content: {
          "application/json": components["schemas"]["InviteCodeError"];
        };
      };
    };
  };
  /**
   * Get a notification
   * @description Get a notification
   */
  v1_notification_get_handler: {
    parameters: {
      query: {
        /** @description The id of the notification to get. */
        notification_id: string;
      };
    };
    responses: {
      /** @description Notification returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
      /** @description Notification not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotificationError"];
        };
      };
    };
  };
  /**
   * Returns a list of notifications.
   * @description Returns a list of notifications.
   */
  v1_notification_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first notification to return. */
        offset?: number | null;
        /** @description The maximum number of notifications to return. */
        limit?: number | null;
        /** @description The user id to filter by. */
        user_id?: string | null;
        /** @description The wallet address to filter by. */
        wallet_address?: string | null;
      };
    };
    responses: {
      /** @description Notifications returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"][];
        };
      };
      /** @description Notification bad request */
      500: {
        content: {
          "application/json": components["schemas"]["NotificationError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of notifications.
   * @description Returns a count of list of notifications.
   */
  v1_notification_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first notification to return. */
        offset?: number | null;
        /** @description The maximum number of notifications to return. */
        limit?: number | null;
        /** @description The user id to filter by. */
        user_id?: string | null;
        /** @description The wallet address to filter by. */
        wallet_address?: string | null;
      };
    };
    responses: {
      /** @description Notifications returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationListCount"];
        };
      };
      /** @description Notification bad request */
      500: {
        content: {
          "application/json": components["schemas"]["NotificationError"];
        };
      };
    };
  };
  /**
   * Read a list of notifications
   * @description Read a list of notifications
   */
  v1_notification_read_handler: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationReadRequestParams"];
      };
    };
    responses: {
      /** @description Notification created successfully */
      200: {
        content: {
          "text/plain": number;
        };
      };
      /** @description Notification internal error */
      500: {
        content: {
          "application/json": components["schemas"]["NotificationError"];
        };
      };
    };
  };
  /**
   * Get a owner
   * @description Get a owner
   */
  v1_owner_get_handler: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Owner returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Owner"];
        };
      };
      /** @description Owner not found */
      404: {
        content: {
          "application/json": components["schemas"]["OwnerError"];
        };
      };
    };
  };
  /**
   * Returns a list of owners.
   * @description Returns a list of owners.
   */
  v1_owner_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first owner to return. */
        offset?: number | null;
        /** @description The maximum number of owners to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Owners returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Owner"][];
        };
      };
      /** @description Owner bad request */
      500: {
        content: {
          "application/json": components["schemas"]["OwnerError"];
        };
      };
    };
  };
  /**
   * Get a paymaster
   * @description Get a paymaster
   */
  v1_paymaster_get_handler: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Paymaster returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Paymaster"];
        };
      };
      /** @description Paymaster not found */
      404: {
        content: {
          "application/json": components["schemas"]["PaymasterError"];
        };
      };
    };
  };
  /**
   * Returns a list of paymasters.
   * @description Returns a list of paymasters.
   */
  v1_paymaster_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first paymaster to return. */
        offset?: number | null;
        /** @description The maximum number of paymasters to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Paymasters returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Paymaster"][];
        };
      };
      /** @description Paymaster bad request */
      500: {
        content: {
          "application/json": components["schemas"]["PaymasterError"];
        };
      };
    };
  };
  /**
   * Get a paymaster
   * @description Get a paymaster
   */
  v1_paymaster_operation_get_handler: {
    parameters: {
      query: {
        /** @description The address of the paymaster. */
        address: string;
        /** @description The chain id of the paymaster. */
        chain_id: number;
        /** @description The timestamp of the paymaster. */
        valid_after: number;
      };
    };
    responses: {
      /** @description Paymaster Operation returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["PaymasterOperation"];
        };
      };
      /** @description Paymaster Operation not found */
      404: {
        content: {
          "application/json": components["schemas"]["PaymasterOperationError"];
        };
      };
    };
  };
  /**
   * Returns a list of paymasters.
   * @description Returns a list of paymasters.
   */
  v1_paymaster_operation_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first paymaster operation to return. */
        offset?: number | null;
        /** @description The maximum number of paymaster operations to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Paymaster Operations returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["PaymasterOperation"][];
        };
      };
      /** @description Paymaster Operation bad request */
      500: {
        content: {
          "application/json": components["schemas"]["PaymasterOperationError"];
        };
      };
    };
  };
  /**
   * Get a portfolio
   * @description Get a portfolio
   */
  v1_portfolio_get_handler: {
    parameters: {
      query: {
        /** @description The address of the portfolio. */
        address: string;
      };
    };
    responses: {
      /** @description Portfolio returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Portfolio"];
        };
      };
      /** @description Portfolio not found */
      404: {
        content: {
          "application/json": components["schemas"]["PortfolioError"];
        };
      };
    };
  };
  /**
   * Get a protocol
   * @description Get a protocol
   */
  v1_protocol_get_handler: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Protocol returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Protocol"];
        };
      };
      /** @description Protocol not found */
      404: {
        content: {
          "application/json": components["schemas"]["ProtocolError"];
        };
      };
    };
  };
  /**
   * Create a protocol group.
   * @description Create a protocol group.
   */
  v1_protocol_group_create_handler: {
    parameters: {
      query: {
        /** @description The id of the protocol id to post for. */
        protocol_id: string;
        /** @description The optional id of the protocol group. */
        group_id?: string | null;
      };
    };
    responses: {
      /** @description Protocol group created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ProtocolGroup"];
        };
      };
      /** @description Protocol group internal error */
      500: {
        content: {
          "application/json": components["schemas"]["ProtocolGroupError"];
        };
      };
    };
  };
  /**
   * Get a protocol group
   * @description Get a protocol group
   */
  v1_protocol_group_get_handler: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Protocola group returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ProtocolGroup"];
        };
      };
      /** @description Protocola group not found */
      404: {
        content: {
          "application/json": components["schemas"]["ProtocolGroupError"];
        };
      };
    };
  };
  /**
   * Returns a list of protocol groups.
   * @description Returns a list of protocol groups.
   */
  v1_protocol_group_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first protocol group to return. */
        offset?: number | null;
        /** @description The maximum number of protocol groups to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Protocol groups returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ProtocolGroup"][];
        };
      };
      /** @description Protocol group bad request */
      500: {
        content: {
          "application/json": components["schemas"]["ProtocolGroupError"];
        };
      };
    };
  };
  /**
   * Returns a list of protocols.
   * @description Returns a list of protocols.
   */
  v1_protocol_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first protocol to return. */
        offset?: number | null;
        /** @description The maximum number of protocols to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Protocols returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Protocol"][];
        };
      };
      /** @description Protocol bad request */
      500: {
        content: {
          "application/json": components["schemas"]["ProtocolError"];
        };
      };
    };
  };
  /**
   * Queue interpretation handler.
   * @description Queue interpretation handler.
   */
  v1_queue_interpretation_handler: {
    parameters: {
      query?: {
        /** @description The optional transaction hash to queue. */
        transaction_hash?: string | null;
        /** @description The optional user operation hash to queue. */
        user_operation_hash?: string | null;
      };
    };
    responses: {
      /** @description Queue created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["QueueSuccess"];
        };
      };
      /** @description Queue internal error */
      500: {
        content: {
          "application/json": components["schemas"]["QueueError"];
        };
      };
    };
  };
  /**
   * Queue portfolio handler.
   * @description Queue portfolio handler.
   */
  v1_queue_portfolio_handler: {
    parameters: {
      query: {
        /** @description The address of the target queue. */
        address: string;
      };
    };
    responses: {
      /** @description Queue created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["QueueSuccess"];
        };
      };
      /** @description Queue internal error */
      500: {
        content: {
          "application/json": components["schemas"]["QueueError"];
        };
      };
    };
  };
  /**
   * Queue token handler.
   * @description Queue token handler.
   */
  v1_queue_token_handler: {
    parameters: {
      query: {
        /** @description The address of the target queue. */
        address: string;
      };
    };
    responses: {
      /** @description Queue created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["QueueSuccess"];
        };
      };
      /** @description Queue internal error */
      500: {
        content: {
          "application/json": components["schemas"]["QueueError"];
        };
      };
    };
  };
  /**
   * Create a signature
   * @description Create a signature
   */
  v1_signature_create_handler: {
    parameters: {
      query: {
        /** @description The hash of the user operation. */
        user_operation_hash: string;
        /** @description The procedure to create(default: OnChain) */
        procedure?: ("Offchain" | "Onchain" | "Erc1271") | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignatureCreateRequestParams"];
      };
    };
    responses: {
      /** @description Signature created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Signature"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["SignatureError"];
        };
      };
      /** @description Signature already exists */
      409: {
        content: {
          "application/json": components["schemas"]["SignatureError"];
        };
      };
      /** @description Signature internal error */
      500: {
        content: {
          "application/json": components["schemas"]["SignatureError"];
        };
      };
    };
  };
  /**
   * Get a signature
   * @description Get a signature
   */
  v1_signature_get_handler: {
    parameters: {
      query: {
        /** @description The owner of the signature. */
        owner_id: string;
        /** @description The hash of the user operation. */
        user_operation_hash: string;
      };
    };
    responses: {
      /** @description Signature returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Signature"];
        };
      };
      /** @description Signature not found */
      404: {
        content: {
          "application/json": components["schemas"]["SignatureError"];
        };
      };
    };
  };
  /**
   * Returns a list of signatures.
   * @description Returns a list of signatures.
   */
  v1_signature_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first signature to return. */
        offset?: number | null;
        /** @description The maximum number of signatures to return. */
        limit?: number | null;
        /** @description The user operation hash to filter by. */
        user_operation_hash?: string | null;
      };
    };
    responses: {
      /** @description Signatures returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Signature"][];
        };
      };
      /** @description Signature bad request */
      500: {
        content: {
          "application/json": components["schemas"]["SignatureError"];
        };
      };
    };
  };
  /**
   * Create a simulation.
   * @description Create a simulation.
   */
  v1_simulation_create_handler: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimulationCreateRequestParams"];
      };
    };
    responses: {
      /** @description Simulation created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Simulation"];
        };
      };
      /** @description Simulation internal error */
      500: {
        content: {
          "application/json": components["schemas"]["SimulationError"];
        };
      };
    };
  };
  /**
   * Get a simulation
   * @description Get a simulation
   */
  v1_simulation_get_handler: {
    parameters: {
      query: {
        /** @description The id of the simulation to get. */
        simulation_id: string;
      };
    };
    responses: {
      /** @description Simulation returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Simulation"];
        };
      };
      /** @description Simulation not found */
      404: {
        content: {
          "application/json": components["schemas"]["SimulationError"];
        };
      };
    };
  };
  /**
   * Returns a list of simulations.
   * @description Returns a list of simulations.
   */
  v1_simulation_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first simulation to return. */
        offset?: number | null;
        /** @description The maximum number of simulations to return. */
        limit?: number | null;
        /** @description The user id to filter by. */
        id?: string | null;
      };
    };
    responses: {
      /** @description Simulations returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Simulation"][];
        };
      };
      /** @description Simulation bad request */
      500: {
        content: {
          "application/json": components["schemas"]["SimulationError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of simulations.
   * @description Returns a count of list of simulations.
   */
  v1_simulation_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first simulation to return. */
        offset?: number | null;
        /** @description The maximum number of simulations to return. */
        limit?: number | null;
        /** @description The user id to filter by. */
        id?: string | null;
      };
    };
    responses: {
      /** @description Simulations returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["SimulationListCount"];
        };
      };
      /** @description Simulation bad request */
      500: {
        content: {
          "application/json": components["schemas"]["SimulationError"];
        };
      };
    };
  };
  /**
   * Create a support_request
   * @description Create a support_request
   */
  v1_support_request_create_handler: {
    parameters: {
      query: {
        /** @description The wallet address of the user operation. */
        wallet_address: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SupportRequestCreateRequestParams"];
      };
    };
    responses: {
      /** @description SupportRequest created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["SupportRequest"];
        };
      };
      /** @description SupportRequest internal error */
      500: {
        content: {
          "application/json": components["schemas"]["SupportRequestError"];
        };
      };
    };
  };
  /**
   * Get a token
   * @description Get a token
   */
  v1_token_get_handler: {
    parameters: {
      query: {
        /** @description The address of the token. */
        address: string;
        /** @description The chain id of the token. */
        chain_id: number;
      };
    };
    responses: {
      /** @description Token returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** @description Token not found */
      404: {
        content: {
          "application/json": components["schemas"]["TokenError"];
        };
      };
    };
  };
  /**
   * Create a token group.
   * @description Create a token group.
   */
  v1_token_group_create_handler: {
    parameters: {
      query: {
        /** @description The id of the token id to post for. */
        token_id: string;
        /** @description The optional id of the token group. */
        group_id?: string | null;
      };
    };
    responses: {
      /** @description Token group created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TokenGroup"];
        };
      };
      /** @description Token group internal error */
      500: {
        content: {
          "application/json": components["schemas"]["TokenGroupError"];
        };
      };
    };
  };
  /**
   * Get a token group
   * @description Get a token group
   */
  v1_token_group_get_handler: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Tokena group returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TokenGroup"];
        };
      };
      /** @description Tokena group not found */
      404: {
        content: {
          "application/json": components["schemas"]["TokenGroupError"];
        };
      };
    };
  };
  /**
   * Returns a list of token groups.
   * @description Returns a list of token groups.
   */
  v1_token_group_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first token group to return. */
        offset?: number | null;
        /** @description The maximum number of token groups to return. */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Token groups returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TokenGroup"][];
        };
      };
      /** @description Token group bad request */
      500: {
        content: {
          "application/json": components["schemas"]["TokenGroupError"];
        };
      };
    };
  };
  /**
   * Returns a list of tokens.
   * @description Returns a list of tokens.
   */
  v1_token_list_handler: {
    parameters: {
      query: {
        /** @description The offset of the first token to return. */
        offset?: number | null;
        /** @description The maximum number of tokens to return. */
        limit?: number | null;
        /** @description The address of the wallet. */
        address: string;
        /** @description The flag to indicate if the token is a spam. */
        is_spam?: boolean | null;
        /** @description The flag to indicate if the token is a testnet token. */
        is_testnet?: boolean | null;
        /** @description The flag to group the tokens by the token group. */
        group?: boolean | null;
        /** @description The optional chain ids of the tokens to query for. */
        chain_ids?: string | null;
      };
    };
    responses: {
      /** @description Tokens returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Token"][];
        };
      };
      /** @description Token bad request */
      500: {
        content: {
          "application/json": components["schemas"]["TokenError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of tokens.
   * @description Returns a count of list of tokens.
   */
  v1_token_list_count_handler: {
    parameters: {
      query: {
        /** @description The offset of the first token to return. */
        offset?: number | null;
        /** @description The maximum number of tokens to return. */
        limit?: number | null;
        /** @description The address of the wallet. */
        address: string;
        /** @description The flag to indicate if the token is a spam. */
        is_spam?: boolean | null;
        /** @description The flag to indicate if the token is a testnet token. */
        is_testnet?: boolean | null;
        /** @description The flag to group the tokens by the token group. */
        group?: boolean | null;
        /** @description The optional chain ids of the tokens to query for. */
        chain_ids?: string | null;
      };
    };
    responses: {
      /** @description Tokens returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TokenListCount"];
        };
      };
      /** @description Token bad request */
      500: {
        content: {
          "application/json": components["schemas"]["TokenError"];
        };
      };
    };
  };
  /**
   * Update a token.
   * @description Update a token.
   */
  v1_token_update_handler: {
    parameters: {
      query: {
        /** @description The id of the token id to post for. */
        token_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenUpdateRequestParams"];
      };
    };
    responses: {
      /** @description Token updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
      /** @description Token internal error */
      500: {
        content: {
          "application/json": components["schemas"]["TokenError"];
        };
      };
    };
  };
  /**
   * Get a token_price
   * @description Get a token_price
   */
  v1_token_price_get_handler: {
    parameters: {
      query: {
        /** @description The address of the token_price. */
        address: string;
        /** @description The chain id of the token_price. */
        chain_id: number;
      };
    };
    responses: {
      /** @description Token returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TokenPrice"];
        };
      };
      /** @description Token not found */
      404: {
        content: {
          "application/json": components["schemas"]["TokenError"];
        };
      };
    };
  };
  /**
   * Get a transaction
   * @description Get a transaction
   */
  v1_transaction_get_handler: {
    parameters: {
      query: {
        /** @description The transaction hash. */
        transaction_hash: string;
      };
    };
    responses: {
      /** @description Transaction returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      /** @description Transaction not found */
      404: {
        content: {
          "application/json": components["schemas"]["TransactionError"];
        };
      };
    };
  };
  /**
   * Returns a list of transactions.
   * @description Returns a list of transactions.
   */
  v1_transaction_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first transaction to return. */
        offset?: number | null;
        /** @description The maximum number of transactions to return. */
        limit?: number | null;
        /** @description The sender address to filter by. */
        address?: string | null;
        /** @description The flag to indicate if the transaction is a testnet transaction. */
        is_testnet?: boolean | null;
      };
    };
    responses: {
      /** @description Transactions returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"][];
        };
      };
      /** @description Transaction bad request */
      500: {
        content: {
          "application/json": components["schemas"]["TransactionError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of transactions.
   * @description Returns a count of list of transactions.
   */
  v1_transaction_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first transaction to return. */
        offset?: number | null;
        /** @description The maximum number of transactions to return. */
        limit?: number | null;
        /** @description The sender address to filter by. */
        address?: string | null;
        /** @description The flag to indicate if the transaction is a testnet transaction. */
        is_testnet?: boolean | null;
      };
    };
    responses: {
      /** @description Transactions returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionListCount"];
        };
      };
      /** @description Transaction bad request */
      500: {
        content: {
          "application/json": components["schemas"]["TransactionError"];
        };
      };
    };
  };
  /**
   * Get a user
   * @description Get a user
   */
  v1_user_get_handler: {
    parameters: {
      query?: {
        /** @description The address of the user. */
        address?: string | null;
        /** @description The user id. */
        user_id?: string | null;
      };
    };
    responses: {
      /** @description User returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["UserError"];
        };
      };
    };
  };
  /**
   * Create a user operation
   * @description Create a user operation
   */
  v1_user_operation_create_handler: {
    parameters: {
      query: {
        chain_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserOperationCreateRequestParams"];
      };
    };
    responses: {
      /** @description User Operation created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserOperation"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
      /** @description User Operation already exists */
      409: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
      /** @description User Operation internal error */
      500: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Get a user operation
   * @description Get a user operation
   */
  v1_user_operation_get_handler: {
    parameters: {
      query: {
        /** @description The user operation hash to get. */
        user_operation_hash: string;
      };
    };
    responses: {
      /** @description User Operation returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserOperation"];
        };
      };
      /** @description User Operation not found */
      404: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Returns a list of user operations.
   * @description Returns a list of user operations.
   */
  v1_user_operation_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first user operation to return. */
        offset?: number | null;
        /** @description The maximum number of user operations to return. */
        limit?: number | null;
        /** @description The sender address to filter by. */
        address?: string | null;
        /** @description The chain id to filter by. */
        chain_id?: number | null;
        /** @description The status to filter by. */
        status?: ("proposed" | "pending" | "executed" | "reverted" | "history" | "invalid") | null;
        /**
         * @description The direction to order by.
         * Default is `asc`.
         */
        order?: ("asc" | "desc") | null;
        /** @description The flag to indicate if the operation is a testnet user operation. */
        is_testnet?: boolean | null;
      };
    };
    responses: {
      /** @description User Operations returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserOperation"][];
        };
      };
      /** @description User Operation bad request */
      500: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Returns a count of user operations.
   * @description Returns a count of user operations.
   */
  v1_user_operation_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first user operation to return. */
        offset?: number | null;
        /** @description The maximum number of user operations to return. */
        limit?: number | null;
        /** @description The sender address to filter by. */
        address?: string | null;
        /** @description The chain id to filter by. */
        chain_id?: number | null;
        /** @description The status to filter by. */
        status?: ("proposed" | "pending" | "executed" | "reverted" | "history" | "invalid") | null;
        /**
         * @description The direction to order by.
         * Default is `asc`.
         */
        order?: ("asc" | "desc") | null;
        /** @description The flag to indicate if the operation is a testnet user operation. */
        is_testnet?: boolean | null;
      };
    };
    responses: {
      /** @description User Operation count returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserOperationListCount"];
        };
      };
      /** @description User Operation count bad request */
      500: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Get a user operation nonce
   * @description Get a user operation nonce
   */
  v1_user_operation_nonce_handler: {
    parameters: {
      query: {
        /** @description The chain id to get the user operation nonce for. */
        chain_id: number;
        /** @description The sender address to filter by. */
        address: string;
      };
    };
    responses: {
      /** @description User Operation nonce returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserOperationNonce"];
        };
      };
      /** @description User Operation nonce not found */
      404: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Check a user operation for its validity and return the computed signature if valid.
   * @description Check a user operation for its validity and return the computed signature if valid.
   */
  v1_user_operation_signature_handler: {
    parameters: {
      query: {
        /** @description The user operation hash to get. */
        user_operation_hash: string;
        /** @description The type of signature to get for. */
        signature_type?: number | null;
      };
    };
    responses: {
      /** @description User Operation signature returned successfully */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description User Operation not found */
      404: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Get a user operation
   * @description Get a user operation
   */
  v1_user_operation_update_handler: {
    parameters: {
      query: {
        /** @description The sender address to filter by. */
        address: string;
      };
    };
    responses: {
      /** @description User Operation updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserOperationSuccess"];
        };
      };
      /** @description User Operation not found */
      404: {
        content: {
          "application/json": components["schemas"]["UserOperationError"];
        };
      };
    };
  };
  /**
   * Get a wallet_billing
   * @description Get a wallet_billing
   */
  v1_wallet_billing_get_handler: {
    parameters: {
      query: {
        /** @description The address of the wallet billing. */
        address: string;
      };
    };
    responses: {
      /** @description Wallet billing returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletBilling"];
        };
      };
      /** @description Wallet billing not found */
      404: {
        content: {
          "application/json": components["schemas"]["WalletBillingError"];
        };
      };
    };
  };
  /**
   * Create a wallet_billing
   * @description Create a wallet_billing
   */
  v1_wallet_billing_update_handler: {
    parameters: {
      query: {
        /** @description The hash of the wallet billing. */
        address: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletBillingUpdateRequestParams"];
      };
    };
    responses: {
      /** @description Wallet billing updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletBilling"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["WalletBillingError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["WalletBillingError"];
        };
      };
      /** @description Wallet billing internal error */
      500: {
        content: {
          "application/json": components["schemas"]["WalletBillingError"];
        };
      };
    };
  };
  /**
   * Create a wallet
   * @description Create a wallet
   */
  v1_wallet_create_handler: {
    parameters: {
      query?: {
        /** @description Whether to simulate the wallet creation. */
        simulate?: boolean | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletCreateRequestParams"];
      };
    };
    responses: {
      /** @description Wallet created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
      /** @description Wallet already exists */
      409: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
      /** @description Wallet internal error */
      500: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
    };
  };
  /**
   * Get a wallet_features
   * @description Get a wallet_features
   */
  v1_wallet_features_get_handler: {
    parameters: {
      query: {
        /** @description The address of the wallet features. */
        address: string;
      };
    };
    responses: {
      /** @description Wallet Features returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletFeatures"];
        };
      };
      /** @description Wallet Features not found */
      404: {
        content: {
          "application/json": components["schemas"]["WalletFeaturesError"];
        };
      };
    };
  };
  /**
   * Create a wallet_features
   * @description Create a wallet_features
   */
  v1_wallet_features_update_handler: {
    parameters: {
      query: {
        /** @description The hash of the wallet features. */
        address: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletFeaturesUpdateRequestParams"];
      };
    };
    responses: {
      /** @description Wallet Features updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletFeatures"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["WalletFeaturesError"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["WalletFeaturesError"];
        };
      };
      /** @description Wallet Features internal error */
      500: {
        content: {
          "application/json": components["schemas"]["WalletFeaturesError"];
        };
      };
    };
  };
  /**
   * Get a wallet
   * @description Get a wallet
   */
  v1_wallet_get_handler: {
    parameters: {
      query: {
        /** @description The address of the wallet. */
        address: string;
        /** @description The chain id of the wallet. */
        chain_id?: number | null;
      };
    };
    responses: {
      /** @description Wallet returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      /** @description Wallet not found */
      404: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
    };
  };
  /**
   * Returns a list of wallets.
   * @description Returns a list of wallets.
   */
  v1_wallet_list_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first wallet to return. */
        offset?: number | null;
        /** @description The maximum number of wallets to return. */
        limit?: number | null;
        /** @description A filter to return wallets w/ a given owner. */
        owner?: string | null;
        /** @description The user id to filter by. */
        user_id?: string | null;
      };
    };
    responses: {
      /** @description Wallets returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"][];
        };
      };
      /** @description Wallet bad request */
      500: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
    };
  };
  /**
   * Returns a count of list of wallets.
   * @description Returns a count of list of wallets.
   */
  v1_wallet_list_count_handler: {
    parameters: {
      query?: {
        /** @description The offset of the first wallet to return. */
        offset?: number | null;
        /** @description The maximum number of wallets to return. */
        limit?: number | null;
        /** @description A filter to return wallets w/ a given owner. */
        owner?: string | null;
        /** @description The user id to filter by. */
        user_id?: string | null;
      };
    };
    responses: {
      /** @description Wallets returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletListCount"];
        };
      };
      /** @description Wallet bad request */
      500: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
    };
  };
  /**
   * Get a wallet_settings
   * @description Get a wallet_settings
   */
  v1_wallet_settings_get_handler: {
    parameters: {
      query: {
        /** @description The address of the wallet settings. */
        address: string;
      };
    };
    responses: {
      /** @description Wallet Settings returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletSettings"];
        };
      };
      /** @description Wallet Settings not found */
      404: {
        content: {
          "application/json": components["schemas"]["WalletSettingsError"];
        };
      };
    };
  };
  /**
   * Create a wallet_settings
   * @description Create a wallet_settings
   */
  v1_wallet_settings_update_handler: {
    parameters: {
      query: {
        /** @description The hash of the wallet settings. */
        address: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletSettingsUpdateRequestParams"];
      };
    };
    responses: {
      /** @description Wallet Settings updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["WalletSettings"];
        };
      };
      /** @description Invalid Configuration */
      400: {
        content: {
          "application/json": components["schemas"]["WalletSettingsError"];
        };
      };
      /** @description Wallet Settings already exists */
      409: {
        content: {
          "application/json": components["schemas"]["WalletSettingsError"];
        };
      };
      /** @description Wallet Settings internal error */
      500: {
        content: {
          "application/json": components["schemas"]["WalletSettingsError"];
        };
      };
    };
  };
  /**
   * Update a wallet
   * @description Update a wallet
   */
  v1_wallet_update_handler: {
    parameters: {
      query: {
        /** @description The address of the wallet. */
        address: string;
        /** @description The chain id of the wallet. */
        chain_id?: number | null;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletUpdateRequestParams"];
      };
    };
    responses: {
      /** @description Wallet returned successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      /** @description Wallet bad request */
      500: {
        content: {
          "application/json": components["schemas"]["WalletError"];
        };
      };
    };
  };
}
