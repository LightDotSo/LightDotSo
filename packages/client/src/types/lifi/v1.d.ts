/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/tokens": {
    /**
     * Fetch all known tokens
     * @description This endpoint can be used to fetch all tokens known to the LI.FI services.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Restrict the resulting tokens to the given chains
           * @example POL,DAI
           */
          chains?: string;
          /**
           * @description Restrict the resulting tokens to the given chainTypes.
           * @example EVM,SVM
           */
          chainTypes?: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["TokensResponse"];
      };
    };
  };
  "/token": {
    /**
     * Fetch information about a Token
     * @description This endpoint can be used to get more information about a token by its address or symbol and its chain.
     * If you want to learn more about how to use this endpoint please have a look at our [guide](https://docs.li.fi/more-integration-options/li.fi-api/getting-token-information).
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Id or key of the chain that contains the token
           * @example POL
           */
          chain: string;
          /**
           * @description Address or symbol of the token on the requested chain
           * @example DAI
           */
          token: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["TokenResponse"];
        400: components["responses"]["InvalidChainResponse"];
        404: components["responses"]["NoTokenFound"];
      };
    };
  };
  "/quote": {
    /**
     * Get a quote for a token transfer
     * @description This endpoint can be used to request a quote for a transfer of one token to another, cross chain or not.
     * The endpoint returns a `Step` object which contains information about the estimated result as well as a `transactionRequest` which can directly be sent to your wallet.
     * The estimated result can be found inside the `estimate`, containing the estimated `toAmount` of the requested `Token` and the `toAmountMin`, which is the guaranteed minimum value that the transfer will yield including slippage.
     * If you want to learn more about how to use this endpoint please have a look at our [guide](https://docs.li.fi/more-integration-options/li.fi-api/requesting-a-quote).
     */
    get: {
      parameters: {
        query: {
          /**
           * @description The sending chain. Can be the chain id or chain key
           * @example DAI
           */
          fromChain: string;
          /**
           * @description The receiving chain. Can be the chain id or chain key
           * @example POL
           */
          toChain: string;
          /**
           * @description The token that should be transferred. Can be the address or the symbol
           * @example 0x4ecaba5870353805a9f068101a40e0f32ed605c6
           */
          fromToken: string;
          /**
           * @description The token that should be transferred to. Can be the address or the symbol
           * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
           */
          toToken: string;
          /**
           * @description The sending wallet address
           * @example 0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0
           */
          fromAddress: string;
          /**
           * @description The receiving wallet address. If none is provided, the fromAddress will be used
           * @example 0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0
           */
          toAddress?: string;
          /**
           * @description The amount that should be sent including all decimals (e.g. 1000000 for 1 USDC (6 decimals))
           * @example 1000000
           */
          fromAmount: string;
          /**
           * @description Which kind of route should be preferred
           * **RECOMMENDED**: This sorting criterion aims to find a balance between cost and complexity, prioritizing affordable and less complex routes. It first sorts routes based on their cost and then focuses on the top 5% of the routes. These top routes are ranked by considering both their cheapness and ease of use. **FASTEST**: This sorting criterion prioritizes routes with the shortest estimated execution time. Users who value speed and want their transactions to be completed as quickly as possible should choose the fastest routes. **CHEAPEST**: This criterion focuses on minimizing the cost of the transaction, whether in token amount or USD amount (USD amount minus gas cost). Users looking for the most economical option should choose the cheapest routes. **SAFEST**: Sorting by this criterion emphasizes the safety and reliability of the routes. Routes are ranked based on the safety level of the tools (bridges) used in their steps. Users who prioritize security and want to minimize risks associated with their transactions should choose the safest routes. If two routes have the same safety level, they are further ranked based on their speed.
           */
          order?: "RECOMMENDED" | "FASTEST" | "CHEAPEST" | "SAFEST";
          /**
           * @description The maximum allowed slippage for the transaction as a decimal value. 0.005 represents 0.5%.
           * @example 0.005
           */
          slippage?: number;
          /**
           * @description A string containing tracking information about the integrator of the API
           * @example your.site
           */
          integrator?: string;
          /**
           * @description The percent of the integrator's fee that is taken from every transaction. 0.02 represents 2%. The maximum fee amount is 10%.
           * @example 0.02
           */
          fee?: number;
          /** @description A string containing tracking information about the referrer of the integrator */
          referrer?: string;
          /**
           * @description List of bridges that are allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. Also values `all`, `none`, `default` and `[]` are acceptable and mean all tools of the current type (`all`), no tools (for `none` and `[]` cases) and default tool's settings on the current stage.
           * @example hop,cbridge
           */
          allowBridges?: components["schemas"]["QuoteBridgesEnum"][];
          /** @description List of exchanges that are allowed for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. All supported exchanges can be loaded from the /tools endpoint. Also values `all`, `none`, `default` and `[]` are acceptable and mean all tools of the current type (`all`), no tools (for `none` and `[]` cases) and default tool's settings on the current stage. */
          allowExchanges?: components["schemas"]["QuoteExchangesEnum"][];
          /**
           * @description List of bridges that are not allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. Also values `all`, `none`, `default` and `[]` are acceptable and mean all tools of the current type (`all`), no tools (for `none` and `[]` cases) and default tool's settings on the current stage.
           * @example connext
           */
          denyBridges?: components["schemas"]["QuoteBridgesEnum"][];
          /** @description List of exchanges that are not allowed for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. All supported exchanges can be loaded from the /tools endpoint. Also values `all`, `none`, `default` and `[]` are acceptable and mean all tools of the current type (`all`), no tools (for `none` and `[]` cases) and default tool's settings on the current stage. */
          denyExchanges?: components["schemas"]["QuoteExchangesEnum"][];
          /** @description List of bridges that should be preferred for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. Also values `all`, `none`, `default` and `[]` are acceptable and mean all tools of the current type (`all`), no tools (for `none` and `[]` cases) and default tool's settings on the current stage. */
          preferBridges?: components["schemas"]["QuoteBridgesEnum"][];
          /** @description List of exchanges that should be preferred for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. All supported exchanges can be loaded from the /tools endpoint. Also values `all`, `none`, `default` and `[]` are acceptable and mean all tools of the current type (`all`), no tools (for `none` and `[]` cases) and default tool's settings on the current stage. */
          preferExchanges?: components["schemas"]["QuoteExchangesEnum"][];
          /** @description Whether swaps or other contract calls should be allowed as part of the destination transaction of a bridge transfer. Separate swap transactions on the destination chain are not affected by this flag. By default, parameter is `true`. */
          allowDestinationCall?: boolean;
          /** @description The price impact threshold above which routes are hidden. As an example, one should specify 0.15 (15%) to hide routes with more than 15% price impact. The default is 10%. */
          maxPriceImpact?: number;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["StepResponse"];
        400: components["responses"]["InvalidQuoteRequest"];
        404: components["responses"]["QuoteNotFound"];
      };
    };
  };
  "/quote/contractCall": {
    /**
     * Perform a contract call across blockchains (BETA)
     * @deprecated
     * @description This endpoint has been deprecated in favour of /quote/contractCalls.
     */
    post: {
      parameters: {
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      /** @description Object describing what tokens to transfer and how to interact with the destination contract. */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ContractCallRequest"];
        };
      };
      responses: {
        200: components["responses"]["ToolsResponse"];
      };
    };
  };
  "/quote/contractCalls": {
    /**
     * Perform multiple contract calls across blockchains (BETA)
     * @description This endpoint can be used to bridge tokens, swap them and perform a number or arbitrary contract calls on the destination chain. You can find an example of it [here](https://github.com/lifinance/sdk/tree/main/examples).
     * This functionality is currently in beta. While we've worked hard to ensure its stability and functionality, there might still be some rough edges.
     */
    post: {
      parameters: {
        header?: {
          /** @description The apiKey allows you to authenticate on the API. */
          "x-lifi-api-key"?: string;
        };
      };
      /** @description Object describing what tokens to transfer and how to interact with the destination contracts. */
      requestBody?: {
        content: {
          /**
           * @example {
           *   "fromChain": 10,
           *   "fromToken": "0x4200000000000000000000000000000000000042",
           *   "fromAddress": "0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0",
           *   "toChain": 1,
           *   "toToken": "ETH",
           *   "toAmount": "100000000000001",
           *   "contractCalls": [
           *     {
           *       "fromAmount": "100000000000001",
           *       "fromTokenAddress": "0x0000000000000000000000000000000000000000",
           *       "toTokenAddress": "0xae7ab96520de3a18e5e111b5eaab095312d7fe84",
           *       "toContractAddress": "0xae7ab96520de3a18e5e111b5eaab095312d7fe84",
           *       "toContractCallData": "0x",
           *       "toContractGasLimit": "110000"
           *     },
           *     {
           *       "fromAmount": "100000000000000",
           *       "fromTokenAddress": "0xae7ab96520de3a18e5e111b5eaab095312d7fe84",
           *       "toTokenAddress": "0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0",
           *       "toContractAddress": "0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0",
           *       "toContractCallData": "0xea598cb000000000000000000000000000000000000000000000000000005af3107a4000",
           *       "toContractGasLimit": "100000"
           *     }
           *   ],
           *   "integrator": "muc-hackaton-postman"
           * }
           */
          "application/json": components["schemas"]["ContractCallsRequest"];
        };
      };
      responses: {
        200: components["responses"]["ToolsResponse"];
      };
    };
  };
  "/status": {
    /**
     * Check the status of a cross chain transfer
     * @description Cross chain transfers might take a while to complete. Waiting on the transaction on the sending chain doesn't help here. For this reason we build a simple endpoint that let's you check the status of your transfer.
     * Important: The endpoint returns a `200` successful response even if the transaction can not be found. This behavior accounts for the case that the transaction hash is valid but the transaction has not been mined yet.
     * While non of the parameters `fromChain`, `toChain` and `bridge` are required, passing the `fromChain` parameter will speed up the request and is therefore encouraged.
     * If you want to learn more about how to use this endpoint please have a look at our [guide](https://docs.li.fi/more-integration-options/li.fi-api/checking-the-status-of-a-transaction).
     */
    get: {
      parameters: {
        query: {
          /**
           * @description The transaction hash on the sending chain
           * @example 0x807e84fcea166e316742f811a47c464c02cc1f2cd176f514308244831cc67182
           */
          txHash: string;
          /**
           * @description The bridging tool used for the transfer
           * @example hop
           */
          bridge?: components["schemas"]["BridgesEnum"];
          /**
           * @description The sending chain. Can be the chain id or chain key
           * @example ETH
           */
          fromChain?: string;
          /**
           * @description The receiving chain. Can be the chain id or chain key
           * @example ARB
           */
          toChain?: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["StatusResponse"];
        400: components["responses"]["InvalidStatusRequest"];
      };
    };
  };
  "/integrators/{integratorId}": {
    /**
     * Get integrator's collected fees data for all supported chains
     * @description This endpoint can be used to request all integrator's collected fees data by tokens for all supported chains.
     * The endpoint returns an `Integrator` object which contains the integrator name (or the address if the name wasn't found in configurations) and an array of fee balances for all supported chains.
     */
    get: {
      parameters: {
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
        path: {
          /**
           * @description Address or the name of the integrator that requests fee balances
           * @example 0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0
           */
          integratorId: string;
        };
      };
      responses: {
        200: components["responses"]["IntegratorResponse"];
        404: components["responses"]["InvalidIntegratorRequest"];
      };
    };
  };
  "/integrators/{integratorId}/withdraw/{chainId}": {
    /**
     * Get transaction request for withdrawing collected integrator's fees by chain
     * @description This endpoint can be used to get transaction request for withdrawing integrator's collected fees the specified chain. If a list of token addresses is provided, the generated transaction will only withdraw the specified funds.
     * If there is no collected fees for the provided token's addresses, the `400` error will be thrown.
     * The endpoint returns a `IntegratorWithdrawalTransactionResponse` object which contains the transaction request.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Specify tokens from which funds should be withdraw
           * @example [
           *   "0x0000000000000000000000000000000000000000"
           * ]
           */
          tokenAddresses?: string[];
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
        path: {
          /**
           * @description Address or the name of the integrator that requests fee withdrawal
           * @example 0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0
           */
          integratorId: string;
          /**
           * @description Specify chainId from which funds should be withdrawn
           * @example 137
           */
          chainId: string;
        };
      };
      responses: {
        200: components["responses"]["IntegratorWithdrawalTransactionResponse"];
        400: components["responses"]["InvalidIntegratorWithdrawalRequest"];
        404: components["responses"]["InvalidIntegratorRequest"];
      };
    };
  };
  "/advanced/possibilities": {
    /**
     * Get information about available services, chains and tokens
     * @description Get a set of current possibilities based on a request that specifies which chains, exchanges and bridges are preferred or unwanted.
     * **Attention**: This request is more complex and intended to be used via our [JavaScript SDK](https://docs.li.fi/integrate-li.fi-js-sdk/install-li.fi-sdk).
     */
    post: {
      parameters: {
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      /**
       * @description Object defining preferences regarding chain, exchanges and bridges.
       * Currently available exchanges are: `1inch`, `paraswap`, `openocean`, `0x`.
       * Currently available bridges are `hop`, `multichain`, `cbridge`, `celercircle`, `connext`, `amarok`, `celerim`, `hyphen`, `optimism`, `polygon`, `arbitrum`, `avalanche`, `across`, `stargate`, `gnosis` and `omni`.
       */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PossiblitiesRequest"];
        };
      };
      responses: {
        200: components["responses"]["PossibilitiesResponse"];
      };
    };
  };
  "/advanced/routes": {
    /**
     * Get a set of routes for a request that describes a transfer of tokens
     * @description In order to execute any transfer, you must first request possible `Routes`. From the result set a `Route` can be selected and executed by retrieving the transaction for every included `Step` using the `/steps/transaction` endpoint.
     * **Attention**: This request is more complex and intended to be used via our [JavaScript SDK](https://docs.li.fi/integrate-li.fi-js-sdk/install-li.fi-sdk).
     */
    post: {
      parameters: {
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      /** @description The request object describes a desired any-to-any transfer and contains all information necessary to calculate the most efficient routes. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoutesRequest"];
        };
      };
      responses: {
        200: components["responses"]["RoutesResponse"];
        400: components["responses"]["InvalidRoutesRequest"];
        404: components["responses"]["InvalidRoutesNotFoundRequest"];
      };
    };
  };
  "/advanced/stepTransaction": {
    /**
     * Populate a step with transaction data
     * @description This endpoint expects a full `Step` object which usually is retrieved by calling the `/routes` endpoint and selecting the most suitable `Route`. Afterwards the transaction for every required `Step` can be retrieved using this endpoint.
     * **Attention**: This request is more complex and intended to be used via our [JavaScript SDK](https://docs.li.fi/integrate-li.fi-js-sdk/install-li.fi-sdk).
     */
    post: {
      parameters: {
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      /** @description The step object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["Step"];
        };
      };
      responses: {
        200: components["responses"]["StepResponse"];
        400: components["responses"]["InvalidStepRequest"];
      };
    };
  };
  "/chains": {
    /**
     * Get information about all currently supported chains
     * @description If you want to learn more about how to use this endpoint please have a look at our [guide](https://docs.li.fi/more-integration-options/li.fi-api/requesting-supported-chains).
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Restrict the resulting tokens to the given chainTypes.
           * @example EVM,SVM
           */
          chainTypes?: string;
        };
        header?: {
          /** @description The apiKey allows you to authenticate on the API. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["ChainsResponse"];
      };
    };
  };
  "/connections": {
    /**
     * Returns all possible connections based on a from- or toChain.
     * @description This endpoint gives information about all possible tranfers between chains.
     * Since the result can be very large it is required to filter by at least a chain, a token, a bridge, or an exchange.
     * Information about which chains and tokens are supported can be taken from the response of the /chains endpoint.
     * Information about which bridges and exchanges are supported can be taken from the response of the /tools endpoint.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description The chain that should be the start of the possible connections.
           * @example POL
           */
          fromChain?: string;
          /** @description The chain that should be the end of the possible connections. */
          toChain?: string;
          /**
           * @description Only return connections starting with this token.
           * @example DAI
           */
          fromToken?: string;
          /** @description Only return connections ending with this token. */
          toToken?: string;
          /**
           * @description Restrict the resulting tokens to the given chainTypes.
           * @example EVM,SVM
           */
          chainTypes?: string;
          /** @description List of bridges that are allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All bridges can be loaded from the /tools endpoint. */
          allowBridges?: string[];
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["ConnectionsResponse"];
      };
    };
  };
  "/tools": {
    /**
     * Get available bridges and exchanges
     * @description This endpoint can be used to get information about the bridges and exchanges available trough our service
     */
    get: {
      parameters: {
        query?: {
          /** @description The ids of the chains that should be taken into consideration. */
          chains?: (string | number)[];
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["ToolsResponse"];
      };
    };
  };
  "/gas/prices": {
    /**
     * Get gas prices for enabled chains
     * @description This endpoint can be used to get the most recent gas prices for the enabled chains in the server.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description If true it wil get the freshest gas prices available.
           * @example true
           */
          refresh?: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["GasPricesResponse"];
      };
    };
  };
  "/gas/prices/{chainId}": {
    /**
     * Get gas price for the specified chainId
     * @description This endpoint can be used to get the most recent gas prices for the supplied chainId.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description If true it wil get the freshest gas prices available.
           * @example true
           */
          refresh?: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
        path: {
          /**
           * @description ChaindId from which gas prices should be shown
           * @example 137
           */
          chainId: string;
        };
      };
      responses: {
        200: components["responses"]["GasPricesResponse"];
        400: components["responses"]["InvalidRoutesRequest"];
      };
    };
  };
  "/gas/status": {
    /** Get status information about a lifuel transaction */
    get: {
      parameters: {
        query: {
          /**
           * @description The transaction hash that started the gas refilling process
           * @example 0x74546ce8aac58d33c212474293dcfeeadecef115847da75131a2ff6692e03b96
           */
          txHash: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["LIFuelStatusResponse"];
      };
    };
  };
  "/gas/refetch": {
    /** In case a transaction was missed by a relayer, this endpoint can be used to force a the tx to be refetched */
    get: {
      parameters: {
        query: {
          /**
           * @description The transaction hash that started the gas refilling process
           * @example 0x74546ce8aac58d33c212474293dcfeeadecef115847da75131a2ff6692e03b96
           */
          txHash: string;
          /**
           * @description The chain where the deposit was originally made
           * @example POL
           */
          chainId: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["LIFuelStatusResponse"];
      };
    };
  };
  "/analytics/wallets/{wallet_address}": {
    /**
     * Get all transactions for a wallet
     * @deprecated
     * @description This endpoint can be used to get all transactions for a wallet.
     */
    get: {
      parameters: {
        query: {
          /** @description Filter the transactions by integrator */
          integrator: string;
          /** @description A unix timestamp in seconds. No transaction older than this timestamp will be returned. If no value is passed, then the default value will be 30 days prior the current date. */
          fromTimestamp?: number;
          /** @description A unix timestamp in seconds. No transaction newer than this timestamp will be returned. */
          toTimestamp?: number;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
        path: {
          /** @description The address of the wallet */
          wallet_address: string;
        };
      };
      responses: {
        200: components["responses"]["WalletAnalyticsResponse"];
      };
    };
  };
  "/gas/suggestion/{chain}": {
    /**
     * Get a gas suggestion for the specified chain
     * @description Endpoint to retrieve a suggestion on how much gas is needed on the requested chain. The suggestion is based on the average price of 10 approvals and 10 uniswap based swaps via LI.FI on the specified chain.
     * If `fromChain` and `fromToken` are specified, the result will contain information about how much `fromToken` amount the user has to send to receive the suggested gas amount on the requested chain.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description If `fromChain` and `fromToken` are specified, the result will contain information about how much `fromToken` amount the user has to send to receive the suggested gas amount on the requested chain.
           * @example 100
           */
          fromChain?: string;
          /**
           * @description If `fromChain` and `fromToken` are specified, the result will contain information about how much `fromToken` amount the user has to send to receive the suggested gas amount on the requested chain.
           * @example xDai
           */
          fromToken?: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
        path: {
          /**
           * @description Chain from which gas prices should be shown (can be a chain id or a chain key)
           * @example 137
           */
          chain: string;
        };
      };
      responses: {
        200: components["responses"]["GasSuggestionResponse"];
      };
    };
  };
  "/calldata/parse": {
    /**
     * Parse transaction call data (BETA)
     * @description This endpoint allows to pass transaction call data. It will then parse the call data based on known and on-chain ABIs to provide a JSON overview of the internal transaction information.
     */
    get: {
      parameters: {
        query: {
          /** @description The chainId that the transaction is built for (or has been sent on) */
          chainId?: string;
          /** @description The call data to parse */
          callData: string;
        };
        header?: {
          /** @description Authentication header, contact support if you want to get registered. */
          "x-lifi-api-key"?: string;
        };
      };
      responses: {
        200: components["responses"]["ParsedCallDataResponse"];
      };
    };
    parameters: {
      query: {
        /** @description The chainId that the transaction is built for (or has been sent on) */
        chainId?: string;
        /** @description The call data to parse */
        callData: string;
      };
    };
  };
  "/analytics/transfers": {
    /**
     * Get a list of filtered transfers
     * @description This endpoint can be used to retrieve a list of transfers filtered by certain properties. Returns a maximum of 1000 transfers.
     */
    get: {
      parameters: {
        query: {
          /** @description The integrator string to filter by */
          integrator: string;
          /** @description The sending OR receiving wallet address */
          wallet?: string;
          /** @description The status of the transfers. Possible values are `ALL`, `DONE`, `PENDING`, and `FAILED`. The default is `DONE` */
          status?: string;
          /** @description The oldest timestamp that should be taken into consideration. Defaults to 30 days ago */
          fromTimestamp?: number;
          /** @description The newest timestamp that should be taken into consideration. Defaults to now */
          toTimestamp?: number;
        };
      };
      responses: {
        200: components["responses"]["TransfersResponse"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UnavailableRoutes: {
      /** @description An object containing information about routes that were intentionally filtered out. */
      filteredOut?: {
          /**
           * @description The complete representation of the attempted route.
           * @example 100:USDC-hop-137:USDC-137:USDC~137:SUSHI
           */
          overallPath?: string;
          /** @description Out best attempt at describing the failure. */
          reason?: string;
        }[];
      /** @description An object containing information about failed routes. */
      failed?: {
          /**
           * @description The complete representation of the attempted route.
           * @example 100:USDC-hop-137:USDC-137:USDC~137:SUSHI
           */
          overallPath?: string;
          /** @description An object with all subpaths that generated one or more errors */
          subpaths?: {
            [key: string]: components["schemas"]["ToolError"];
          };
        }[];
    };
    /** @enum {unknown} */
    LIFuelStatusStateEnum: "NOT_FOUND" | "PENDING" | "DONE";
    TxInfo: {
      /** @example 0x74546ce8aac58d33c212474293dcfeeadecef115847da75131a2ff6692e03b96 */
      txHash?: string;
      /** @example https://polygonscan.com/tx/0x74546ce8aac58d33c212474293dcfeeadecef115847da75131a2ff6692e03b96 */
      txLink?: string;
      /**
       * @description The amount of token that will be / has been relayed
       * @example 10000
       */
      amount?: string;
      token?: components["schemas"]["Token"];
      /** @example 137 */
      chainId?: number;
      /** @example 39397739 */
      block?: number;
    };
    LIFuelStatus: {
      status?: components["schemas"]["LIFuelStatusStateEnum"];
      sending?: components["schemas"]["TxInfo"];
      receiving?: components["schemas"]["TxInfo"];
    };
    GasPrice: {
      standard?: number;
      fast?: number;
      fastest?: number;
      lastUpdated?: number;
    };
    Tools: {
      exchanges?: components["schemas"]["Exchange"][];
      bridges?: components["schemas"]["Bridge"][];
    };
    Exchange: {
      key?: components["schemas"]["ExchangesEnum"];
      /**
       * @description The common name of the tool
       * @example 0x
       */
      name?: string;
      /**
       * @description The logo of the tool
       * @example https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/exchanges/zerox.png
       */
      logoURI?: string;
      /**
       * @description The chains which are supported on this exchange
       * @example [
       *   "1",
       *   "137",
       *   "56"
       * ]
       */
      supportedChains?: string;
    };
    Bridge: {
      key?: components["schemas"]["BridgesEnum"];
      /**
       * @description The common name of the tool
       * @example Connext
       */
      name?: string;
      /**
       * @description The logo of the tool
       * @example https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/bridges/connext.png
       */
      logoURI?: string;
      supportedChains?: components["schemas"]["SupportedChains"][];
    };
    SupportedChains: {
      /**
       * @description Supported `from` chain
       * @example 137
       */
      fromChainId?: string;
      /**
       * @description Supported `to` chain
       * @example 1
       */
      toChainId?: string;
    };
    /** @enum {string} */
    BridgesEnum: "hop" | "multichain" | "cbridge" | "celercircle" | "connext" | "hyphen" | "optimism" | "polygon" | "arbitrum" | "avalanche" | "across" | "stargate" | "gnosis" | "omni" | "amarok" | "lifuel" | "celerim";
    /** @enum {string} */
    ExchangesEnum: "1inch" | "paraswap" | "openocean" | "0x" | "dodo" | "uniswap" | "sushiswap" | "quickswap" | "honeyswap" | "pancakeswap" | "spookyswap" | "viperswap" | "solarbeam" | "spiritswap";
    /** @enum {string} */
    QuoteBridgesEnum: "hop" | "multichain" | "cbridge" | "celercircle" | "connext" | "hyphen" | "optimism" | "polygon" | "arbitrum" | "avalanche" | "across" | "stargate" | "gnosis" | "omni" | "amarok" | "none" | "all" | "lifuel" | "celerim" | "default" | "[]";
    /** @enum {string} */
    QuoteExchangesEnum: "1inch" | "paraswap" | "openocean" | "0x" | "dodo" | "uniswap" | "sushiswap" | "quickswap" | "honeyswap" | "pancakeswap" | "spookyswap" | "viperswap" | "solarbeam" | "spiritswap" | "none" | "all" | "default" | "[]";
    /**
     * Root type for ContractCallsRequest
     * @description Object defining instructions on how to perform multiple cross-chain/same-chain calls
     */
    ContractCallsRequest: {
      /** @description The sending chain. Can be the chain id or chain key */
      fromChain: number;
      /** @description The token that should be transferred. Can be the address or the symbol */
      fromToken: string;
      /** @description The wallet that will send the transaction and contains the starting token */
      fromAddress: string;
      /** @description The receiving chain. Can be the chain id or chain key */
      toChain: number;
      /** @description The token required to perform the contract interation (can be something to stake, donate or to be used as payment) */
      toToken: string;
      /** @description The amount of token required by the contract interaction. The LI.FI API will try and generate a quote that guarantees at least that amount on the destination chain. */
      toAmount: string;
      contractCalls: components["schemas"]["ContractCall"][];
      /** @description If the call fails, use this address to send the bridged tokens to. If none is specified, the sending address will be used. */
      toFallbackAddress?: string;
      /**
       * Format: double
       * @description The maximum allowed slippage for the transaction as a decimal value. 0.005 represents 0.5%.
       */
      slippage?: number;
      /** @description A string containing tracking information about the integrator of the API */
      integrator?: string;
      /** @description A string containing tracking information about the referrer of the integrator */
      referrer?: string;
      /** @description List of bridges that are allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. */
      allowBridges?: string[];
      /** @description List of bridges that are not allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. */
      denyBridges?: string[];
      /** @description List of bridges that should be preferred for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. */
      preferBridges?: string[];
      /** @description List of exchanges that are allowed for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. */
      allowExchanges?: string[];
      /** @description List of exchanges that are not allowed for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. */
      denyExchanges?: string[];
      /** @description List of exchanges that should be preferred for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. */
      preferExchanges?: string[];
      /**
       * Format: double
       * @description The price impact threshold above which routes are hidden. As an example, one should specify 0.15 (15%) to hide routes with more than 15% price impact. The default is 10%.
       */
      maxPriceImpact?: number;
      /** @description Whether swaps or other contract calls should be allowed as part of the destination transaction of a bridge transfer. Separate swap transactions on the destination chain are not affected by this flag. By default, parameter is `true`. */
      allowDestinationCall?: boolean;
      /**
       * Format: double
       * @description The percent of the integrator's fee that is taken from every transaction
       */
      fee?: number;
    };
    /**
     * Root type for ContractCallRequest
     * @deprecated
     * @description Object defining instructions on how to perform a cross chain call
     */
    ContractCallRequest: {
      /** @description The sending chain. Can be the chain id or chain key */
      fromChain: number;
      /** @description The token that should be transferred. Can be the address or the symbol */
      fromToken: string;
      /** @description The wallet that will send the transaction and contains the starting token */
      fromAddress: string;
      /** @description The receiving chain. Can be the chain id or chain key */
      toChain: number;
      /** @description The token required to perform the contract interation (can be something to stake, donate or to be used as payment) */
      toToken: string;
      /** @description The amount of token required by the contract interaction. The LI.FI API will try and generate a quote that guarantees at least that amount on the destination chain. */
      toAmount: string;
      /** @description The address of the contract to interact with */
      toContractAddress: string;
      /** @description Some contract interactions will output a token. This is the case in things like staking. Omit this parameter if no token should be returned to the user. */
      contractOutputsToken?: string;
      /** @description The calldata to be sent to the contract for the interaction on the destination chain. */
      toContractCallData: string;
      /** @description The estimated gas used by the destination call. If this value is incorrect, the interaction may fail -- choose this carefully! */
      toContractGasLimit: string;
      /** @description If the approval address is different thant the contract to call, specify that address here */
      toApprovalAddress?: string;
      /** @description If the call fails, use this address to send the bridged tokens to. If none is specified, the sending address will be used. */
      toFallbackAddress?: string;
      /**
       * Format: double
       * @description The maximum allowed slippage for the transaction as a decimal value. 0.005 represents 0.5%.
       */
      slippage?: number;
      /** @description A string containing tracking information about the integrator of the API */
      integrator?: string;
      /** @description A string containing tracking information about the referrer of the integrator */
      referrer?: string;
      /** @description List of bridges that are allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. */
      allowBridges?: string[];
      /** @description List of bridges that are not allowed for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. */
      denyBridges?: string[];
      /** @description List of bridges that should be preferred for this transaction. Currently available bridges are for example `hop`, `multichain` or `connext`. All supported bridges can be loaded from the /tools endpoint. */
      preferBridges?: string[];
      /** @description List of exchanges that are allowed for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. */
      allowExchanges?: string[];
      /** @description List of exchanges that are not allowed for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. */
      denyExchanges?: string[];
      /** @description List of exchanges that should be preferred for this transaction. Currently available exchanges are aggregators such as `1inch`, `paraswap`, `openocean` and `0x` and a lot of dexes. */
      preferExchanges?: string[];
      /**
       * Format: double
       * @description The price impact threshold above which routes are hidden. As an example, one should specify 0.15 (15%) to hide routes with more than 15% price impact. The default is 10%.
       */
      maxPriceImpact?: number;
      /** @description Whether swaps or other contract calls should be allowed as part of the destination transaction of a bridge transfer. Separate swap transactions on the destination chain are not affected by this flag. By default, parameter is `true`. */
      allowDestinationCall?: boolean;
    };
    /**
     * Root Type for PossiblitiesRequest
     * @description Object defining preferences regarding chain, exchanges and bridges
     * @example {
     *   "chains": [
     *     100,
     *     137
     *   ],
     *   "bridges": {
     *     "allow": [
     *       "connext",
     *       "hop"
     *     ],
     *     "deny": [
     *       "cbridge"
     *     ],
     *     "prefer": [
     *       "connext"
     *     ]
     *   },
     *   "exchanges": {
     *     "allow": [
     *       "1inch",
     *       "paraswap",
     *       "openocean"
     *     ],
     *     "deny": [
     *       "0x"
     *     ],
     *     "prefer": [
     *       "1inch"
     *     ]
     *   }
     * }
     */
    PossiblitiesRequest: {
      /** @description The ids of the chains that should be taken into consideration for the possibilities */
      chains?: number[];
      /** @description Object configuring the bridges that should or should not be taken into consideration for the possibilities */
      bridges?: components["schemas"]["AllowDenyPrefer"];
      /** @description Object configuring the exchanges that should or should not be taken into consideration for the possibilities */
      exchanges?: components["schemas"]["AllowDenyPrefer"];
      /**
       * @description To reduce the size of the returned possibilities, you can select which kind of information you like to see.
       * Possible values are `chains`, `tokens`, `bridges`, and `exchanges`.
       */
      include?: components["schemas"]["PossibilitiesTopicEnum"][];
    };
    /**
     * Root Type for Chain
     * @description Representation of a chain
     * @example {
     *   "key": "pol",
     *   "name": "Polygon",
     *   "coin": "MATIC",
     *   "id": 137,
     *   "mainnet": true,
     *   "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/polygon.png",
     *   "tokenlistUrl": "https://unpkg.com/quickswap-default-token-list@1.0.71/build/quickswap-default.tokenlist.json",
     *   "faucetUrls": [
     *     "https://stakely.io/faucet/polygon-matic"
     *   ],
     *   "metamask": {
     *     "chainId": "0x89",
     *     "blockExplorerUrls": [
     *       "https://polygonscan.com/",
     *       "https://explorer-mainnet.maticvigil.com/"
     *     ],
     *     "chainName": "Matic(Polygon) Mainnet",
     *     "nativeCurrency": {
     *       "name": "MATIC",
     *       "symbol": "MATIC",
     *       "decimals": 18
     *     },
     *     "rpcUrls": [
     *       "https://polygon-rpc.com/",
     *       "https://rpc-mainnet.maticvigil.com/"
     *     ]
     *   }
     * }
     */
    Chain: {
      /** @description Short string represenation of the chain */
      key: string;
      /** @description Type of the chain */
      chainType?: string;
      /** @description Name of the chain */
      name: string;
      /** @description The native coin of the chain */
      coin: string;
      /**
       * Format: number
       * @description Unique id of the chain
       */
      id: number;
      /** @description Whether the chain is mainnet or not */
      mainnet: boolean;
      /** @description Logo of the chain */
      logoURI?: string;
      /** @description Url to the list of available tokens */
      tokenlistUrl?: string;
      /** @description List of available faucets */
      faucetUrls?: string[];
      /** @description The multicall contract address */
      multicallAddress?: string;
      /** @description Information about the chain from metamask. Contains data about RPCs and block explorers */
      metamask?: {
        chainId?: string;
        blockExplorerUrls?: string[];
        chainName?: string;
        nativeCurrency?: {
          name?: string;
          symbol?: string;
          /** Format: number */
          decimals?: number;
        };
        rpcUrls?: string[];
      };
      /** @description The native token info for the chain */
      nativeToken?: components["schemas"]["Token"];
    };
    /**
     * Root Type for Token
     * @description Representation of a Token
     * @example {
     *   "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *   "symbol": "DAI",
     *   "decimals": 18,
     *   "chainId": 137,
     *   "name": "(PoS) Dai Stablecoin",
     *   "coinKey": "DAI",
     *   "priceUSD": "1",
     *   "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png"
     * }
     */
    Token: {
      /** @description Address of the token */
      address: string;
      /**
       * Format: number
       * @description Number of decimals the token uses
       */
      decimals: number;
      /** @description Symbol of the token */
      symbol: string;
      /**
       * Format: number
       * @description Id of the token's chain
       */
      chainId: number;
      /** @description Identifier for the token */
      coinKey?: string;
      /** @description Name of the token */
      name: string;
      /** @description Logo of the token */
      logoURI?: string;
      /** @description Token price in USD */
      priceUSD?: string;
    };
    /**
     * Root Type for PossibilitiesResponse
     * @description Object listing current possibilities for any-to-any cross-chain-swaps based on the provided preferences
     * @example {
     *   "chains": [
     *     {
     *       "key": "pol",
     *       "name": "Polygon",
     *       "coin": "MATIC",
     *       "id": 137,
     *       "mainnet": true,
     *       "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/polygon.png",
     *       "tokenlistUrl": "https://unpkg.com/quickswap-default-token-list@1.0.71/build/quickswap-default.tokenlist.json",
     *       "faucetUrls": [
     *         "https://stakely.io/faucet/polygon-matic"
     *       ],
     *       "metamask": {
     *         "chainId": "0x89",
     *         "blockExplorerUrls": [
     *           "https://polygonscan.com/",
     *           "https://explorer-mainnet.maticvigil.com/"
     *         ],
     *         "chainName": "Matic(Polygon) Mainnet",
     *         "nativeCurrency": {
     *           "name": "MATIC",
     *           "symbol": "MATIC",
     *           "decimals": 18
     *         },
     *         "rpcUrls": [
     *           "https://polygon-rpc.com/",
     *           "https://rpc-mainnet.maticvigil.com/"
     *         ]
     *       }
     *     },
     *     {
     *       "key": "dai",
     *       "name": "xDai",
     *       "coin": "DAI",
     *       "id": 100,
     *       "mainnet": true,
     *       "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/xdai.png",
     *       "tokenlistUrl": "https://tokens.honeyswap.org/",
     *       "faucetUrls": [
     *         "https://stakely.io/faucet/xdai-chain"
     *       ],
     *       "metamask": {
     *         "chainId": "0x64",
     *         "blockExplorerUrls": [
     *           "https://blockscout.com/xdai/mainnet/"
     *         ],
     *         "chainName": "xDAI Chain",
     *         "nativeCurrency": {
     *           "name": "xDai",
     *           "symbol": "xDai",
     *           "decimals": 18
     *         },
     *         "rpcUrls": [
     *           "https://xdai.poanetwork.dev/",
     *           "https://rpc.xdaichain.com/",
     *           "https://dai.poa.network/",
     *           "https://xdai.1hive.org/"
     *         ]
     *       }
     *     }
     *   ],
     *   "tokens": [
     *     {
     *       "address": "0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1",
     *       "decimals": 18,
     *       "symbol": "ETH",
     *       "chainId": 100,
     *       "coinKey": "ETH",
     *       "name": "ETH",
     *       "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1/61844453e63cf81301f845d7864236f6.png",
     *       "priceUSD": "2254.1"
     *     },
     *     {
     *       "address": "0x7122d7661c4564b7c6cd4878b06766489a6028a2",
     *       "decimals": 18,
     *       "symbol": "MATIC",
     *       "chainId": 100,
     *       "coinKey": "MATIC",
     *       "name": "MATIC",
     *       "logoURI": "https://etherscan.io/token/images/matictoken_28.png",
     *       "priceUSD": "0"
     *     },
     *     {
     *       "address": "0xca8d20f3e0144a72c6b5d576e9bd3fd8557e2b04",
     *       "decimals": 18,
     *       "symbol": "BNB",
     *       "chainId": 100,
     *       "coinKey": "BNB",
     *       "name": "BNB",
     *       "logoURI": "https://assets.coingecko.com/coins/images/825/small/binance-coin-logo.png?1547034615",
     *       "priceUSD": "0"
     *     }
     *   ],
     *   "exchanges": [
     *     {
     *       "tool": "paraswap",
     *       "chains": [
     *         1,
     *         56,
     *         137,
     *         43114,
     *         3,
     *         4,
     *         42
     *       ]
     *     },
     *     {
     *       "tool": "1inch",
     *       "chains": [
     *         1,
     *         56,
     *         137,
     *         10,
     *         43114,
     *         100
     *       ]
     *     }
     *   ],
     *   "bridges": [
     *     {
     *       "tool": "connext",
     *       "fromChainId": 100,
     *       "fromToken": {
     *         "address": "0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1",
     *         "decimals": 18,
     *         "symbol": "ETH",
     *         "chainId": 100,
     *         "coinKey": "ETH",
     *         "name": "ETH",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1/61844453e63cf81301f845d7864236f6.png",
     *         "priceUSD": "2254.1"
     *       },
     *       "toChainId": 137,
     *       "toToken": {
     *         "address": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
     *         "decimals": 18,
     *         "symbol": "ETH",
     *         "chainId": 137,
     *         "coinKey": "ETH",
     *         "name": "ETH",
     *         "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619/61844453e63cf81301f845d7864236f6.png",
     *         "priceUSD": "2254.1"
     *       },
     *       "maximumTransfer": "Infinity",
     *       "minimumTransfer": "1",
     *       "swapFeeRate": "0.005",
     *       "swapFeeMinimum": "0",
     *       "swapFeeMaximum": "Infinity"
     *     },
     *     {
     *       "tool": "connext",
     *       "fromChainId": 100,
     *       "fromToken": {
     *         "address": "0xddafbb505ad214d7b80b1f830fccc89b60fb7a83",
     *         "decimals": 6,
     *         "symbol": "USDC",
     *         "chainId": 100,
     *         "coinKey": "USDC",
     *         "name": "USDC",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0xddafbb505ad214d7b80b1f830fccc89b60fb7a83/adee072b10b0db7c5bd7a28dd4fbe96f.png",
     *         "priceUSD": "1"
     *       },
     *       "toChainId": 137,
     *       "toToken": {
     *         "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
     *         "decimals": 6,
     *         "symbol": "USDC",
     *         "chainId": 137,
     *         "coinKey": "USDC",
     *         "name": "USDC",
     *         "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x2791bca1f2de4661ed88a30c99a7a9449aa84174/adee072b10b0db7c5bd7a28dd4fbe96f.png",
     *         "priceUSD": "1"
     *       },
     *       "maximumTransfer": "Infinity",
     *       "minimumTransfer": "1",
     *       "swapFeeRate": "0.005",
     *       "swapFeeMinimum": "0",
     *       "swapFeeMaximum": "Infinity"
     *     },
     *     {
     *       "tool": "connext",
     *       "fromChainId": 100,
     *       "fromToken": {
     *         "address": "0x4ecaba5870353805a9f068101a40e0f32ed605c6",
     *         "decimals": 6,
     *         "symbol": "USDT",
     *         "chainId": 100,
     *         "coinKey": "USDT",
     *         "name": "USDT",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0x4ecaba5870353805a9f068101a40e0f32ed605c6/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *         "priceUSD": "1"
     *       },
     *       "toChainId": 137,
     *       "toToken": {
     *         "address": "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
     *         "decimals": 6,
     *         "symbol": "USDT",
     *         "chainId": 137,
     *         "coinKey": "USDT",
     *         "name": "USDT",
     *         "logoURI": "https://static.debank.com/image/matic_token/logo_url/0xc2132d05d31c914a87c6611c10748aeb04b58e8f/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *         "priceUSD": "1"
     *       },
     *       "maximumTransfer": "Infinity",
     *       "minimumTransfer": "1",
     *       "swapFeeRate": "0.005",
     *       "swapFeeMinimum": "0",
     *       "swapFeeMaximum": "Infinity"
     *     },
     *     {
     *       "tool": "hop",
     *       "fromChainId": 137,
     *       "fromToken": {
     *         "address": "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
     *         "decimals": 6,
     *         "symbol": "USDT",
     *         "chainId": 137,
     *         "coinKey": "USDT",
     *         "name": "USDT",
     *         "logoURI": "https://static.debank.com/image/matic_token/logo_url/0xc2132d05d31c914a87c6611c10748aeb04b58e8f/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *         "priceUSD": "1"
     *       },
     *       "toChainId": 100,
     *       "toToken": {
     *         "address": "0x4ecaba5870353805a9f068101a40e0f32ed605c6",
     *         "decimals": 6,
     *         "symbol": "USDT",
     *         "chainId": 100,
     *         "coinKey": "USDT",
     *         "name": "USDT",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0x4ecaba5870353805a9f068101a40e0f32ed605c6/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *         "priceUSD": "1"
     *       },
     *       "maximumTransfer": "Infinity",
     *       "minimumTransfer": "1",
     *       "swapFeeRate": "0.005",
     *       "swapFeeMinimum": "0",
     *       "swapFeeMaximum": "Infinity"
     *     },
     *     {
     *       "tool": "hop",
     *       "fromChainId": 137,
     *       "fromToken": {
     *         "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
     *         "decimals": 6,
     *         "symbol": "USDC",
     *         "chainId": 137,
     *         "coinKey": "USDC",
     *         "name": "USDC",
     *         "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x2791bca1f2de4661ed88a30c99a7a9449aa84174/adee072b10b0db7c5bd7a28dd4fbe96f.png",
     *         "priceUSD": "1"
     *       },
     *       "toChainId": 100,
     *       "toToken": {
     *         "address": "0xddafbb505ad214d7b80b1f830fccc89b60fb7a83",
     *         "decimals": 6,
     *         "symbol": "USDC",
     *         "chainId": 100,
     *         "coinKey": "USDC",
     *         "name": "USDC",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0xddafbb505ad214d7b80b1f830fccc89b60fb7a83/adee072b10b0db7c5bd7a28dd4fbe96f.png",
     *         "priceUSD": "1"
     *       },
     *       "maximumTransfer": "Infinity",
     *       "minimumTransfer": "1",
     *       "swapFeeRate": "0.005",
     *       "swapFeeMinimum": "0",
     *       "swapFeeMaximum": "Infinity"
     *     },
     *     {
     *       "tool": "hop",
     *       "fromChainId": 137,
     *       "fromToken": {
     *         "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *         "decimals": 18,
     *         "symbol": "DAI",
     *         "chainId": 137,
     *         "coinKey": "DAI",
     *         "name": "DAI",
     *         "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *         "priceUSD": "1"
     *       },
     *       "toChainId": 100,
     *       "toToken": {
     *         "address": "0x0000000000000000000000000000000000000000",
     *         "decimals": 18,
     *         "symbol": "DAI",
     *         "chainId": 100,
     *         "coinKey": "DAI",
     *         "name": "DAI",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png",
     *         "priceUSD": "1"
     *       },
     *       "maximumTransfer": "Infinity",
     *       "minimumTransfer": "1",
     *       "swapFeeRate": "0.005",
     *       "swapFeeMinimum": "0",
     *       "swapFeeMaximum": "Infinity"
     *     }
     *   ]
     * }
     */
    PossibilitiesResponse: {
      /** @description Possible chains that can be sent from or to */
      chains: components["schemas"]["Chain"][];
      /** @description Possible `Tokens` that can be transferred */
      tokens: components["schemas"]["Token"][];
      /** @description Possible exchanges that can be used for transfers */
      exchanges: components["schemas"]["ExchangeDefinition"][];
      /** @description Possible bridges that can be used for transfers */
      bridges: components["schemas"]["BridgeDefinition"][];
    };
    /**
     * An error returned by a tool (Exchange or Bridge)
     * @description Describes why a certain operation (like a quote request) failed.
     */
    ToolError: {
      /**
       * @description The type of error that occurred.
       * @enum {string}
       */
      errorType?: "NO_QUOTE";
      /**
       * @description The error code.
       * @enum {string}
       */
      code?: "NO_POSSIBLE_ROUTE" | "INSUFFICIENT_LIQUIDITY" | "TOOL_TIMEOUT" | "UNKNOWN_ERROR" | "RPC_ERROR" | "AMOUNT_TOO_LOW" | "AMOUNT_TOO_HIGH" | "FEES_HIGHER_THAN_AMOUNT" | "DIFFERENT_RECIPIENT_NOT_SUPPORTED" | "TOOL_SPECIFIC_ERROR" | "CANNOT_GUARANTEE_MIN_AMOUNT" | "RATE_LIMIT_EXCEEDED";
      action?: components["schemas"]["Action"];
      /** @description The tool that emitted the error. */
      tool?: string;
      /** @description A human-readable message describing the error. */
      message?: string;
    };
    /**
     * Root Type for RoutesResponse
     * @description A list of routes that can be used to realize the described transfer of tokens
     * @example {
     *   "routes": [
     *     {
     *       "id": "0x1e21fad9c26fff48b67ae2925f878e43bf81211da8b1cd9b7faa8bfd8d7ea9d9",
     *       "fromChainId": 100,
     *       "fromAmountUSD": "0.05",
     *       "fromAmount": "1000000000000000000",
     *       "fromToken": {
     *         "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 100,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0.04547537276751318",
     *         "logoURI": ""
     *       },
     *       "toChainId": 137,
     *       "toAmountUSD": "0.00",
     *       "toAmount": "999500000000000000",
     *       "toAmountMin": "999500000000000000",
     *       "toToken": {
     *         "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 137,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0",
     *         "logoURI": ""
     *       },
     *       "gasCostUSD": "0.00",
     *       "steps": [
     *         {
     *           "id": "0x48f0a2f93b0d0a9dab992d07c46bca38516c945101e8f8e08ca42af05b9e6aa9",
     *           "type": "cross",
     *           "tool": "connext",
     *           "action": {
     *             "fromChainId": 100,
     *             "toChainId": 137,
     *             "fromToken": {
     *               "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0.04547537276751318",
     *               "logoURI": ""
     *             },
     *             "toToken": {
     *               "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 137,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0",
     *               "logoURI": ""
     *             },
     *             "fromAmount": "1000000000000000000",
     *             "slippage": 0.003
     *           },
     *           "estimate": {
     *             "fromAmount": "1000000000000000000",
     *             "toAmount": "999500000000000000",
     *             "toAmountMin": "999500000000000000",
     *             "approvalAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *             "feeCosts": [
     *               {
     *                 "name": "Gas Fee",
     *                 "description": "Covers gas expense for sending funds to user on receiving chain.",
     *                 "percentage": "0",
     *                 "token": {
     *                   "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *                   "symbol": "MIVA",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "name": "Minerva Wallet SuperToken",
     *                   "coinKey": "MIVA",
     *                   "priceUSD": "0.04547537276751318",
     *                   "logoURI": ""
     *                 },
     *                 "amount": "0",
     *                 "amountUSD": "0.00",
     *                 "included": true
     *               },
     *               {
     *                 "name": "Relay Fee",
     *                 "description": "Covers gas expense for claiming user funds on receiving chain.",
     *                 "percentage": "0",
     *                 "token": {
     *                   "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *                   "symbol": "MIVA",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "name": "Minerva Wallet SuperToken",
     *                   "coinKey": "MIVA",
     *                   "priceUSD": "0.04547537276751318",
     *                   "logoURI": ""
     *                 },
     *                 "amount": "0",
     *                 "amountUSD": "0.00"
     *               },
     *               {
     *                 "name": "Router Fee",
     *                 "description": "Router service fee.",
     *                 "percentage": "0.0005",
     *                 "token": {
     *                   "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *                   "symbol": "MIVA",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "name": "Minerva Wallet SuperToken",
     *                   "coinKey": "MIVA",
     *                   "priceUSD": "0.04547537276751318",
     *                   "logoURI": ""
     *                 },
     *                 "amount": "500000000000000",
     *                 "amountUSD": "22737686383756.59"
     *               }
     *             ],
     *             "gasCosts": [
     *               {
     *                 "type": "SEND",
     *                 "price": "1.26",
     *                 "estimate": "140000",
     *                 "limit": "175000",
     *                 "amount": "176400",
     *                 "amountUSD": "0.00",
     *                 "token": {
     *                   "address": "0x0000000000000000000000000000000000000000",
     *                   "symbol": "xDai",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "name": "xDai",
     *                   "coinKey": "xDai",
     *                   "priceUSD": "1",
     *                   "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *                 }
     *               }
     *             ],
     *             "data": {
     *               "bid": {
     *                 "user": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *                 "router": "0xeE2Ef40F688607CB23618d9312d62392786d13EB",
     *                 "initiator": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *                 "sendingChainId": 100,
     *                 "sendingAssetId": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *                 "amount": "1000000000000000000",
     *                 "receivingChainId": 137,
     *                 "receivingAssetId": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *                 "amountReceived": "999500000000000000",
     *                 "receivingAddress": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *                 "transactionId": "0x48f0a2f93b0d0a9dab992d07c46bca38516c945101e8f8e08ca42af05b9e6aa9",
     *                 "expiry": 1643364189,
     *                 "callDataHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *                 "callTo": "0x0000000000000000000000000000000000000000",
     *                 "encryptedCallData": "0x",
     *                 "sendingChainTxManagerAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *                 "receivingChainTxManagerAddress": "0x6090De2EC76eb1Dc3B5d632734415c93c44Fd113",
     *                 "bidExpiry": 1643105290
     *               },
     *               "gasFeeInReceivingToken": "0",
     *               "totalFee": "500000000000000",
     *               "metaTxRelayerFee": "0",
     *               "routerFee": "500000000000000"
     *             }
     *           },
     *           "integrator": "your.site"
     *         }
     *       ]
     *     },
     *     {
     *       "id": "0xb785f52e68f8a6fb147d5e392e06f122c1a418be84bdc28de0f311b91fa5e57e",
     *       "fromChainId": 100,
     *       "fromAmountUSD": "0.05",
     *       "fromAmount": "1000000000000000000",
     *       "fromToken": {
     *         "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 100,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0.04547537276751318",
     *         "logoURI": ""
     *       },
     *       "toChainId": 137,
     *       "toAmountUSD": "0.00",
     *       "toAmount": "941511949935063841",
     *       "toAmountMin": "913266591437011926",
     *       "toToken": {
     *         "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 137,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0",
     *         "logoURI": ""
     *       },
     *       "gasCostUSD": "0.10",
     *       "steps": [
     *         {
     *           "id": "ea5abad4-2e2a-476f-981d-797816e5cc77",
     *           "type": "swap",
     *           "tool": "1inch",
     *           "action": {
     *             "fromChainId": 100,
     *             "toChainId": 100,
     *             "fromToken": {
     *               "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0.04547537276751318",
     *               "logoURI": ""
     *             },
     *             "toToken": {
     *               "name": "Own a fraction",
     *               "symbol": "FRACTION",
     *               "coinKey": "FRACTION",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *               "address": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61"
     *             },
     *             "fromAmount": "1000000000000000000",
     *             "slippage": 0.003
     *           },
     *           "estimate": {
     *             "fromAmount": "1000000000000000000",
     *             "toAmount": "809146346742",
     *             "toAmountMin": "784871956340",
     *             "approvalAddress": "0x1111111254fb6c44bac0bed2854e76f90643097d",
     *             "feeCosts": [],
     *             "gasCosts": [
     *               {
     *                 "type": "SEND",
     *                 "price": "1.26",
     *                 "estimate": "252364",
     *                 "limit": "315455",
     *                 "amount": "317979",
     *                 "amountUSD": "0.00",
     *                 "token": {
     *                   "address": "0x0000000000000000000000000000000000000000",
     *                   "symbol": "xDai",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "name": "xDai",
     *                   "coinKey": "xDai",
     *                   "priceUSD": "1",
     *                   "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *                 }
     *               }
     *             ],
     *             "data": {
     *               "fromToken": {
     *                 "name": "Minerva Wallet SuperToken",
     *                 "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *                 "symbol": "MIVA",
     *                 "decimals": 18,
     *                 "logoURI": "https://minerva.digital/i/MIVA-Token_200x200.png"
     *               },
     *               "toToken": {
     *                 "address": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61",
     *                 "decimals": 18,
     *                 "symbol": "FRACTION",
     *                 "name": "Own a fraction",
     *                 "logoURI": "https://etherscan.io/images/main/empty-token.png",
     *                 "isCustom": true
     *               },
     *               "toTokenAmount": "809146346742",
     *               "fromTokenAmount": "1000000000000000000",
     *               "protocols": [
     *                 [
     *                   [
     *                     {
     *                       "name": "GNOSIS_HONEYSWAP",
     *                       "part": 100,
     *                       "fromTokenAddress": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *                       "toTokenAddress": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61"
     *                     }
     *                   ]
     *                 ]
     *               ],
     *               "estimatedGas": 252364
     *             }
     *           },
     *           "integrator": "your.site"
     *         },
     *         {
     *           "id": "0x85e93238e8f2f83dd5840eb748c7b9099d69e1ea227a13e7a2e949cf6a32ab7d",
     *           "type": "cross",
     *           "tool": "connext",
     *           "action": {
     *             "fromChainId": 100,
     *             "toChainId": 137,
     *             "fromToken": {
     *               "name": "Own a fraction",
     *               "symbol": "FRACTION",
     *               "coinKey": "FRACTION",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *               "address": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61"
     *             },
     *             "toToken": {
     *               "name": "Own a fraction",
     *               "symbol": "FRACTION",
     *               "coinKey": "FRACTION",
     *               "decimals": 18,
     *               "chainId": 137,
     *               "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *               "address": "0xbd80cfa9d93a87d1bb895f810ea348e496611cd4"
     *             },
     *             "fromAmount": "784871956340",
     *             "slippage": 0.003
     *           },
     *           "estimate": {
     *             "fromAmount": "784871956340",
     *             "toAmount": "784479520361",
     *             "toAmountMin": "784479520361",
     *             "approvalAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *             "feeCosts": [
     *               {
     *                 "name": "Gas Fee",
     *                 "description": "Covers gas expense for sending funds to user on receiving chain.",
     *                 "percentage": "0",
     *                 "token": {
     *                   "name": "Own a fraction",
     *                   "symbol": "FRACTION",
     *                   "coinKey": "FRACTION",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *                   "address": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61"
     *                 },
     *                 "amount": "0",
     *                 "amountUSD": "0.00",
     *                 "included": true
     *               },
     *               {
     *                 "name": "Relay Fee",
     *                 "description": "Covers gas expense for claiming user funds on receiving chain.",
     *                 "percentage": "0",
     *                 "token": {
     *                   "name": "Own a fraction",
     *                   "symbol": "FRACTION",
     *                   "coinKey": "FRACTION",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *                   "address": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61"
     *                 },
     *                 "amount": "0",
     *                 "amountUSD": "0.00",
     *                 "included": true
     *               },
     *               {
     *                 "name": "Router Fee",
     *                 "description": "Router service fee.",
     *                 "percentage": "0.00050000000105749733",
     *                 "token": {
     *                   "name": "Own a fraction",
     *                   "symbol": "FRACTION",
     *                   "coinKey": "FRACTION",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *                   "address": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61"
     *                 },
     *                 "amount": "392435979",
     *                 "amountUSD": "0.00",
     *                 "included": true
     *               }
     *             ],
     *             "gasCosts": [
     *               {
     *                 "type": "SEND",
     *                 "price": "1.26",
     *                 "estimate": "140000",
     *                 "limit": "175000",
     *                 "amount": "176400",
     *                 "amountUSD": "0.00",
     *                 "token": {
     *                   "address": "0x0000000000000000000000000000000000000000",
     *                   "symbol": "xDai",
     *                   "decimals": 18,
     *                   "chainId": 100,
     *                   "name": "xDai",
     *                   "coinKey": "xDai",
     *                   "priceUSD": "1",
     *                   "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *                 }
     *               }
     *             ],
     *             "data": {
     *               "bid": {
     *                 "user": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *                 "router": "0xeE2Ef40F688607CB23618d9312d62392786d13EB",
     *                 "initiator": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *                 "sendingChainId": 100,
     *                 "sendingAssetId": "0x2bf2ba13735160624a0feae98f6ac8f70885ea61",
     *                 "amount": "784871956340",
     *                 "receivingChainId": 137,
     *                 "receivingAssetId": "0xbd80cfa9d93a87d1bb895f810ea348e496611cd4",
     *                 "amountReceived": "784479520361",
     *                 "receivingAddress": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *                 "transactionId": "0x85e93238e8f2f83dd5840eb748c7b9099d69e1ea227a13e7a2e949cf6a32ab7d",
     *                 "expiry": 1643364189,
     *                 "callDataHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *                 "callTo": "0x0000000000000000000000000000000000000000",
     *                 "encryptedCallData": "0x",
     *                 "sendingChainTxManagerAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *                 "receivingChainTxManagerAddress": "0x6090De2EC76eb1Dc3B5d632734415c93c44Fd113",
     *                 "bidExpiry": 1643105290
     *               },
     *               "gasFeeInReceivingToken": "0",
     *               "totalFee": "392435979",
     *               "metaTxRelayerFee": "0",
     *               "routerFee": "392435979"
     *             }
     *           },
     *           "integrator": "your.site"
     *         },
     *         {
     *           "id": "d8686af1-c131-4566-bf4a-ef8226f9879b",
     *           "type": "swap",
     *           "tool": "1inch",
     *           "action": {
     *             "fromChainId": 137,
     *             "toChainId": 137,
     *             "fromToken": {
     *               "name": "Own a fraction",
     *               "symbol": "FRACTION",
     *               "coinKey": "FRACTION",
     *               "decimals": 18,
     *               "chainId": 137,
     *               "logoURI": "https://assets.coingecko.com/coins/images/15099/large/fraction.png?1619691519",
     *               "address": "0xbd80cfa9d93a87d1bb895f810ea348e496611cd4"
     *             },
     *             "toToken": {
     *               "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 137,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0",
     *               "logoURI": ""
     *             },
     *             "fromAmount": "784479520361",
     *             "slippage": 0.003
     *           },
     *           "estimate": {
     *             "fromAmount": "784479520361",
     *             "toAmount": "941511949935063841",
     *             "toAmountMin": "913266591437011926",
     *             "approvalAddress": "0x1111111254fb6c44bac0bed2854e76f90643097d",
     *             "feeCosts": [],
     *             "gasCosts": [
     *               {
     *                 "type": "SEND",
     *                 "price": "129",
     *                 "estimate": "549386",
     *                 "limit": "686733",
     *                 "amount": "70870794",
     *                 "amountUSD": "0.10",
     *                 "token": {
     *                   "address": "0x0000000000000000000000000000000000000000",
     *                   "symbol": "MATIC",
     *                   "decimals": 18,
     *                   "chainId": 137,
     *                   "name": "MATIC",
     *                   "coinKey": "MATIC",
     *                   "priceUSD": "1.469213",
     *                   "logoURI": "https://static.debank.com/image/matic_token/logo_url/matic/e5a8a2860ba5cf740a474dcab796dc63.png"
     *                 }
     *               }
     *             ],
     *             "data": {
     *               "fromToken": {
     *                 "address": "0xbd80cfa9d93a87d1bb895f810ea348e496611cd4",
     *                 "decimals": 18,
     *                 "symbol": "FRACTION",
     *                 "name": "Own a fraction",
     *                 "logoURI": "https://etherscan.io/images/main/empty-token.png",
     *                 "isCustom": true
     *               },
     *               "toToken": {
     *                 "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *                 "decimals": 18,
     *                 "symbol": "MIVA",
     *                 "name": "Minerva Wallet SuperToken",
     *                 "logoURI": "https://etherscan.io/images/main/empty-token.png",
     *                 "isCustom": true
     *               },
     *               "toTokenAmount": "941511949935063841",
     *               "fromTokenAmount": "784479520361",
     *               "protocols": [
     *                 [
     *                   [
     *                     {
     *                       "name": "POLYGON_QUICKSWAP",
     *                       "part": 100,
     *                       "fromTokenAddress": "0xbd80cfa9d93a87d1bb895f810ea348e496611cd4",
     *                       "toTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619"
     *                     }
     *                   ],
     *                   [
     *                     {
     *                       "name": "POLYDEX_FINANCE",
     *                       "part": 100,
     *                       "fromTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
     *                       "toTokenAddress": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
     *                     }
     *                   ],
     *                   [
     *                     {
     *                       "name": "POLYGON_QUICKSWAP",
     *                       "part": 100,
     *                       "fromTokenAddress": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
     *                       "toTokenAddress": "0xc0b2983a17573660053beeed6fdb1053107cf387"
     *                     }
     *                   ]
     *                 ]
     *               ],
     *               "estimatedGas": 549386
     *             }
     *           },
     *           "integrator": "your.site"
     *         }
     *       ]
     *     }
     *   ],
     *   "errors": [
     *     {
     *       "errorType": "NO_QUOTE",
     *       "code": "NO_POSSIBLE_ROUTE",
     *       "action": {
     *         "fromChainId": 42161,
     *         "toChainId": 42161,
     *         "fromToken": {
     *           "address": "0xff970a61a04b1ca14834a43f5de4533ebddb5cc8",
     *           "decimals": 6,
     *           "symbol": "USDC",
     *           "coinKey": "USDC",
     *           "chainId": 42161,
     *           "name": "USDC",
     *           "logoURI": "http://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png\",",
     *           "priceUSD": "1.001"
     *         },
     *         "toToken": {
     *           "address": "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
     *           "decimals": 6,
     *           "symbol": "USDT",
     *           "coinKey": "USDT",
     *           "chainId": 42161,
     *           "name": "Tether USD",
     *           "logoURI": "http://get.celer.app/cbridge-icons/USDT.png\""
     *         },
     *         "fromAmount": "100000",
     *         "slippage": 0.003
     *       }
     *     }
     *   ]
     * }
     */
    RoutesResponse: {
      /** @description List of possible `Routes` for the given transfer */
      routes: components["schemas"]["Route"][];
      /** @description An object representing the routes that are unavailable for the given transfer */
      unavailableRoutes?: components["schemas"]["UnavailableRoutes"][];
    };
    /**
     * Root Type for Route
     * @description A route describing a transfer form a token to another
     * @example {
     *   "id": "0x1e21fad9c26fff48b67ae2925f878e43bf81211da8b1cd9b7faa8bfd8d7ea9d9",
     *   "fromChainId": 100,
     *   "fromAmountUSD": "0.05",
     *   "fromAmount": "1000000000000000000",
     *   "fromToken": {
     *     "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *     "symbol": "MIVA",
     *     "decimals": 18,
     *     "chainId": 100,
     *     "name": "Minerva Wallet SuperToken",
     *     "coinKey": "MIVA",
     *     "priceUSD": "0.04547537276751318",
     *     "logoURI": ""
     *   },
     *   "toChainId": 137,
     *   "toAmountUSD": "0.00",
     *   "toAmount": "999500000000000000",
     *   "toAmountMin": "999500000000000000",
     *   "toToken": {
     *     "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *     "symbol": "MIVA",
     *     "decimals": 18,
     *     "chainId": 137,
     *     "name": "Minerva Wallet SuperToken",
     *     "coinKey": "MIVA",
     *     "priceUSD": "0",
     *     "logoURI": ""
     *   },
     *   "gasCostUSD": "0.00",
     *   "steps": [
     *     {
     *       "id": "0x48f0a2f93b0d0a9dab992d07c46bca38516c945101e8f8e08ca42af05b9e6aa9",
     *       "type": "cross",
     *       "tool": "connext",
     *       "action": {
     *         "fromChainId": 100,
     *         "toChainId": 137,
     *         "fromToken": {
     *           "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *           "symbol": "MIVA",
     *           "decimals": 18,
     *           "chainId": 100,
     *           "name": "Minerva Wallet SuperToken",
     *           "coinKey": "MIVA",
     *           "priceUSD": "0.04547537276751318",
     *           "logoURI": ""
     *         },
     *         "toToken": {
     *           "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *           "symbol": "MIVA",
     *           "decimals": 18,
     *           "chainId": 137,
     *           "name": "Minerva Wallet SuperToken",
     *           "coinKey": "MIVA",
     *           "priceUSD": "0",
     *           "logoURI": ""
     *         },
     *         "fromAmount": "1000000000000000000",
     *         "slippage": 0.003
     *       },
     *       "estimate": {
     *         "fromAmount": "1000000000000000000",
     *         "toAmount": "999500000000000000",
     *         "toAmountMin": "999500000000000000",
     *         "approvalAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *         "feeCosts": [
     *           {
     *             "name": "Gas Fee",
     *             "description": "Covers gas expense for sending funds to user on receiving chain.",
     *             "percentage": "0",
     *             "token": {
     *               "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0.04547537276751318",
     *               "logoURI": ""
     *             },
     *             "amount": "0",
     *             "amountUSD": "0.00",
     *             "included": true
     *           },
     *           {
     *             "name": "Relay Fee",
     *             "description": "Covers gas expense for claiming user funds on receiving chain.",
     *             "percentage": "0",
     *             "token": {
     *               "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0.04547537276751318",
     *               "logoURI": ""
     *             },
     *             "amount": "0",
     *             "amountUSD": "0.00",
     *             "included": true
     *           },
     *           {
     *             "name": "Router Fee",
     *             "description": "Router service fee.",
     *             "percentage": "0.0005",
     *             "token": {
     *               "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *               "symbol": "MIVA",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "name": "Minerva Wallet SuperToken",
     *               "coinKey": "MIVA",
     *               "priceUSD": "0.04547537276751318",
     *               "logoURI": ""
     *             },
     *             "amount": "500000000000000",
     *             "amountUSD": "22737686383756.59",
     *             "included": true
     *           }
     *         ],
     *         "gasCosts": [
     *           {
     *             "type": "SEND",
     *             "price": "1.26",
     *             "estimate": "140000",
     *             "limit": "175000",
     *             "amount": "176400",
     *             "amountUSD": "0.00",
     *             "token": {
     *               "address": "0x0000000000000000000000000000000000000000",
     *               "symbol": "xDai",
     *               "decimals": 18,
     *               "chainId": 100,
     *               "name": "xDai",
     *               "coinKey": "xDai",
     *               "priceUSD": "1",
     *               "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *             }
     *           }
     *         ],
     *         "data": {
     *           "bid": {
     *             "user": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *             "router": "0xeE2Ef40F688607CB23618d9312d62392786d13EB",
     *             "initiator": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *             "sendingChainId": 100,
     *             "sendingAssetId": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *             "amount": "1000000000000000000",
     *             "receivingChainId": 137,
     *             "receivingAssetId": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *             "amountReceived": "999500000000000000",
     *             "receivingAddress": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *             "transactionId": "0x48f0a2f93b0d0a9dab992d07c46bca38516c945101e8f8e08ca42af05b9e6aa9",
     *             "expiry": 1643364189,
     *             "callDataHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *             "callTo": "0x0000000000000000000000000000000000000000",
     *             "encryptedCallData": "0x",
     *             "sendingChainTxManagerAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *             "receivingChainTxManagerAddress": "0x6090De2EC76eb1Dc3B5d632734415c93c44Fd113",
     *             "bidExpiry": 1643105290
     *           },
     *           "gasFeeInReceivingToken": "0",
     *           "totalFee": "500000000000000",
     *           "metaTxRelayerFee": "0",
     *           "routerFee": "500000000000000"
     *         }
     *       },
     *       "integrator": "your.site"
     *     }
     *   ]
     * }
     */
    Route: {
      /** @description Unique identifier of the route */
      id: string;
      /**
       * Format: number
       * @description The id of the sending chain
       */
      fromChainId: number;
      /** @description The amount that should be transferred in USD */
      fromAmountUSD: string;
      /** @description The amount that should be transferred */
      fromAmount: string;
      /** @description The sending `Token` */
      fromToken: components["schemas"]["Token"];
      /**
       * Format: number
       * @description The id of the receiving chain
       */
      toChainId: number;
      /** @description The estimated resulting amount of the `toToken` in USD as float with two decimals */
      toAmountUSD: string;
      /** @description The estimated resulting amount of the `toToken` including all decimals */
      toAmount: string;
      /** @description The minimal resultung amount of the `toToken` including all decimals */
      toAmountMin: string;
      /** @description The `Token` that should be transferred to */
      toToken: components["schemas"]["Token"];
      /** @description Aggregation of th eunderlying gas costs in USD */
      gasCostUSD?: string;
      /** @description The steps required to fulfill the transfer */
      steps: components["schemas"]["Step"][];
      /** @description The sending wallet address */
      fromAddress?: string;
      /** @description The receiving wallet address */
      toAddress?: string;
      /** @description Whether a chain switch is part of the route */
      containsSwitchChain?: boolean;
    };
    /**
     * Root Type for RoutesRequest
     * @description A description of a token transfer
     * @example {
     *   "fromAddress": "0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0",
     *   "fromChainId": 100,
     *   "fromAmount": "1000000000000000000",
     *   "fromTokenAddress": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *   "toChainId": 137,
     *   "toTokenAddress": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *   "options": {
     *     "integrator": "your.site",
     *     "slippage": 0.003,
     *     "fee": 0.02,
     *     "bridges": {
     *       "allow": [
     *         "connext"
     *       ]
     *     },
     *     "exchanges": {
     *       "allow": [
     *         "1inch",
     *         "openocean"
     *       ]
     *     }
     *   }
     * }
     */
    RoutesRequest: {
      /**
       * Format: number
       * @description The sending chain id
       */
      fromChainId: number;
      /** @description The amount that should be transferred including all decimals (e.g. 1000000 for 1 USDC (6 decimals)) */
      fromAmount: string;
      /** @description The address of the sending `Token` */
      fromTokenAddress: string;
      /**
       * Format: number
       * @description The id of the receiving chain
       */
      toChainId: number;
      /** @description The address of the receiving `Token` */
      toTokenAddress: string;
      /** @description Optional configuration for the routes */
      options?: components["schemas"]["RouteOptions"];
      /** @description The sending wallet address */
      fromAddress: string;
      /** @description The receiving wallet address */
      toAddress?: string;
      /**
       * @description Defines if we should return routes with a cross-chain bridge protocol (Connext, Stargate, etc.) destination calls or not.
       * @default true
       */
      allowDestinationCall?: boolean;
    };
    /**
     * Root Type for StepRequest
     * @description A step object
     * @example {
     *   "id": "a8dc011a-f52d-4492-9e99-21de64b5453a",
     *   "type": "swap",
     *   "tool": "1inch",
     *   "action": {
     *     "fromChainId": 100,
     *     "toChainId": 100,
     *     "fromToken": {
     *       "address": "0x0000000000000000000000000000000000000000",
     *       "symbol": "xDai",
     *       "decimals": 18,
     *       "chainId": 100,
     *       "name": "xDai",
     *       "coinKey": "xDai",
     *       "priceUSD": "1",
     *       "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *     },
     *     "toToken": {
     *       "name": "Minerva Wallet SuperToken",
     *       "symbol": "MIVA",
     *       "coinKey": "MIVA",
     *       "decimals": 18,
     *       "chainId": 100,
     *       "logoURI": "https://minerva.digital/i/MIVA-Token_200x200.png",
     *       "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51"
     *     },
     *     "fromAmount": "1000000000000000000",
     *     "slippage": 0.003,
     *     "fromAddress": "0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0",
     *     "toAddress": "0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0"
     *   },
     *   "estimate": {
     *     "fromAmount": "1000000000000000000",
     *     "toAmount": "21922914496086353975",
     *     "toAmountMin": "21265227061203763356",
     *     "approvalAddress": "0x1111111254fb6c44bac0bed2854e76f90643097d",
     *     "feeCosts": [],
     *     "gasCosts": [
     *       {
     *         "type": "SEND",
     *         "price": "1",
     *         "estimate": "252364",
     *         "limit": "315455",
     *         "amount": "252364",
     *         "amountUSD": "0.00",
     *         "token": {
     *           "address": "0x0000000000000000000000000000000000000000",
     *           "symbol": "xDai",
     *           "decimals": 18,
     *           "chainId": 100,
     *           "name": "xDai",
     *           "coinKey": "xDai",
     *           "priceUSD": "1",
     *           "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *         }
     *       }
     *     ],
     *     "data": {
     *       "fromToken": {
     *         "name": "xDAI",
     *         "address": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
     *         "symbol": "xDAI",
     *         "decimals": 18,
     *         "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png"
     *       },
     *       "toToken": {
     *         "name": "Minerva Wallet SuperToken",
     *         "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "logoURI": "https://minerva.digital/i/MIVA-Token_200x200.png"
     *       },
     *       "toTokenAmount": "21922914496086353975",
     *       "fromTokenAmount": "1000000000000000000",
     *       "protocols": [
     *         [
     *           [
     *             {
     *               "name": "GNOSIS_HONEYSWAP",
     *               "part": 100,
     *               "fromTokenAddress": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
     *               "toTokenAddress": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51"
     *             }
     *           ]
     *         ]
     *       ],
     *       "estimatedGas": 252364
     *     }
     *   },
     *   "integrator": "your.site"
     * }
     */
    StepRequest: {
      id?: string;
      type?: string;
      tool?: string;
      action?: {
        /** Format: number */
        fromChainId?: number;
        /** Format: number */
        toChainId?: number;
        fromToken?: {
          address?: string;
          /** Format: number */
          decimals?: number;
          symbol?: string;
          /** Format: number */
          chainId?: number;
          coinKey?: string;
          name?: string;
          logoURI?: string;
        };
        toToken?: {
          address?: string;
          /** Format: number */
          decimals?: number;
          symbol?: string;
          /** Format: number */
          chainId?: number;
          coinKey?: string;
          name?: string;
          logoURI?: string;
        };
        fromAmount?: string;
        fromAddress?: string;
        toAddress?: string;
        /** Format: number */
        slippage?: number;
      };
      estimate?: {
        fromAmount?: string;
        toAmount?: string;
        toAmountMin?: string;
        approvalAddress?: string;
        feeCosts?: {
            name?: string;
            description?: string;
            percentage?: string;
            token?: {
              address?: string;
              /** Format: number */
              decimals?: number;
              symbol?: string;
              /** Format: number */
              chainId?: number;
              coinKey?: string;
              name?: string;
              logoURI?: string;
            };
            amount?: string;
            amountUSD?: string;
            included?: boolean;
          }[];
        gasCosts?: {
            type?: string;
            price?: string;
            estimate?: string;
            limit?: string;
            amount?: string;
            amountUSD?: string;
            token?: {
              address?: string;
              symbol?: string;
              /** Format: number */
              decimals?: number;
              /** Format: number */
              chainId?: number;
              name?: string;
              coinKey?: string;
              priceUSD?: string;
              logoURI?: string;
            };
          }[];
        data?: {
          bid?: {
            user?: string;
            router?: string;
            initiator?: string;
            /** Format: number */
            sendingChainId?: number;
            sendingAssetId?: string;
            amount?: string;
            /** Format: number */
            receivingChainId?: number;
            receivingAssetId?: string;
            amountReceived?: string;
            receivingAddress?: string;
            transactionId?: string;
            /** Format: number */
            expiry?: number;
            callDataHash?: string;
            callTo?: string;
            encryptedCallData?: string;
            sendingChainTxManagerAddress?: string;
            receivingChainTxManagerAddress?: string;
            /** Format: number */
            bidExpiry?: number;
          };
          bidSignature?: string;
          gasFeeInReceivingToken?: string;
          metaTxRelayerFee?: string;
        };
      };
      integrator?: string;
      execution?: {
        status?: string;
        process?: {
            id?: string;
            /** Format: number */
            startedAt?: number;
            message?: string;
            status?: string;
            txHash?: string;
            txLink?: string;
            /** Format: number */
            doneAt?: number;
          }[];
      };
    };
    /**
     * Root Type for TokenRequest
     * @description The address and chain id of the requested token
     * @example {
     *   "chainId": 137,
     *   "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063"
     * }
     */
    TokenRequest: {
      /**
       * Format: number
       * @description Id of the chain that contains the token
       */
      chainId: number;
      /** @description Address of the token on the requested chain */
      address: string;
    };
    /**
     * Root Type for ContractCall
     * @description Object defining a single arbitrary contract call
     */
    ContractCall: {
      /** @description The amount that will feed into this contract call. This is not dependent on how much was bridged or deposited before - it's the *expected* amount of token available on order to execute the call. */
      fromAmount: string;
      /** @description The token that will feed into this contract call. E.g. a ETH staking transaction would expect to have ETH available. */
      fromTokenAddress: string;
      /** @description The address of the contract to interact with. */
      toContractAddress: string;
      /** @description The calldata to be sent to the contract for the interaction on the destination chain. */
      toContractCallData: string;
      /** @description The estimated gas used by the destination call. If this value is incorrect, the interaction may fail -- choose this carefully! */
      toContractGasLimit: string;
      /** @description If the approval address is different thant the contract to call, specify that address here */
      toApprovalAddress?: string;
      /** @description If the contract outputs a token, specify its address here. (E.g. staking ETH produces stETH) */
      toTokenAddress?: string;
    };
    /**
     * Root Type for AllowDenyPrefer
     * @description Object defining which tools should be allowed, denied and preferred
     */
    AllowDenyPrefer: {
      /** @description Allowed tools */
      allow?: string[];
      /** @description Forbidden tools */
      deny?: string[];
      /** @description Preferred tools */
      prefer?: string[];
    };
    /**
     * Root Type for Step
     * @description Object that represents one step of a `Route`
     * @example {
     *   "id": "0x48f0a2f93b0d0a9dab992d07c46bca38516c945101e8f8e08ca42af05b9e6aa9",
     *   "type": "cross",
     *   "tool": "connext",
     *   "action": {
     *     "fromChainId": 100,
     *     "toChainId": 137,
     *     "fromToken": {
     *       "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *       "symbol": "MIVA",
     *       "decimals": 18,
     *       "chainId": 100,
     *       "name": "Minerva Wallet SuperToken",
     *       "coinKey": "MIVA",
     *       "priceUSD": "0.04547537276751318",
     *       "logoURI": ""
     *     },
     *     "toToken": {
     *       "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *       "symbol": "MIVA",
     *       "decimals": 18,
     *       "chainId": 137,
     *       "name": "Minerva Wallet SuperToken",
     *       "coinKey": "MIVA",
     *       "priceUSD": "0",
     *       "logoURI": ""
     *     },
     *     "fromAmount": "1000000000000000000",
     *     "slippage": 0.003
     *   },
     *   "estimate": {
     *     "fromAmount": "1000000000000000000",
     *     "toAmount": "999500000000000000",
     *     "toAmountMin": "999500000000000000",
     *     "approvalAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *     "feeCosts": [
     *       {
     *         "name": "Gas Fee",
     *         "description": "Covers gas expense for sending funds to user on receiving chain.",
     *         "percentage": "0",
     *         "token": {
     *           "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *           "symbol": "MIVA",
     *           "decimals": 18,
     *           "chainId": 100,
     *           "name": "Minerva Wallet SuperToken",
     *           "coinKey": "MIVA",
     *           "priceUSD": "0.04547537276751318",
     *           "logoURI": ""
     *         },
     *         "amount": "0",
     *         "amountUSD": "0.00",
     *         "included": true
     *       },
     *       {
     *         "name": "Relay Fee",
     *         "description": "Covers gas expense for claiming user funds on receiving chain.",
     *         "percentage": "0",
     *         "token": {
     *           "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *           "symbol": "MIVA",
     *           "decimals": 18,
     *           "chainId": 100,
     *           "name": "Minerva Wallet SuperToken",
     *           "coinKey": "MIVA",
     *           "priceUSD": "0.04547537276751318",
     *           "logoURI": ""
     *         },
     *         "amount": "0",
     *         "amountUSD": "0.00",
     *         "included": true
     *       },
     *       {
     *         "name": "Router Fee",
     *         "description": "Router service fee.",
     *         "percentage": "0.0005",
     *         "token": {
     *           "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *           "symbol": "MIVA",
     *           "decimals": 18,
     *           "chainId": 100,
     *           "name": "Minerva Wallet SuperToken",
     *           "coinKey": "MIVA",
     *           "priceUSD": "0.04547537276751318",
     *           "logoURI": ""
     *         },
     *         "amount": "500000000000000",
     *         "amountUSD": "22737686383756.59",
     *         "included": true
     *       }
     *     ],
     *     "gasCosts": [
     *       {
     *         "type": "SEND",
     *         "price": "1.26",
     *         "estimate": "140000",
     *         "limit": "175000",
     *         "amount": "176400",
     *         "amountUSD": "0.00",
     *         "token": {
     *           "address": "0x0000000000000000000000000000000000000000",
     *           "symbol": "xDai",
     *           "decimals": 18,
     *           "chainId": 100,
     *           "name": "xDai",
     *           "coinKey": "xDai",
     *           "priceUSD": "1",
     *           "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *         }
     *       }
     *     ],
     *     "data": {
     *       "bid": {
     *         "user": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *         "router": "0xeE2Ef40F688607CB23618d9312d62392786d13EB",
     *         "initiator": "0x53F68B2186E4a4aB4dD976eD32de68db45BA360b",
     *         "sendingChainId": 100,
     *         "sendingAssetId": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "amount": "1000000000000000000",
     *         "receivingChainId": 137,
     *         "receivingAssetId": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *         "amountReceived": "999500000000000000",
     *         "receivingAddress": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *         "transactionId": "0x48f0a2f93b0d0a9dab992d07c46bca38516c945101e8f8e08ca42af05b9e6aa9",
     *         "expiry": 1643364189,
     *         "callDataHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *         "callTo": "0x0000000000000000000000000000000000000000",
     *         "encryptedCallData": "0x",
     *         "sendingChainTxManagerAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *         "receivingChainTxManagerAddress": "0x6090De2EC76eb1Dc3B5d632734415c93c44Fd113",
     *         "bidExpiry": 1643105290
     *       },
     *       "gasFeeInReceivingToken": "0",
     *       "totalFee": "500000000000000",
     *       "metaTxRelayerFee": "0",
     *       "routerFee": "500000000000000"
     *     }
     *   },
     *   "integrator": "your.site"
     * }
     */
    Step: {
      /** @description Unique identifier of the step */
      id: string;
      /**
       * @description The type of the step
       * @enum {string}
       */
      type: "swap" | "cross" | "lifi";
      /** @description The tool used for this step. E.g. `connext` */
      tool: string;
      /** @description The action of the step */
      action: components["schemas"]["Action"];
      /** @description The estimation for the step */
      estimate?: components["schemas"]["Estimate"];
      /** @description A string containing tracking information about the integrator of the API */
      integrator?: string;
      /** @description A string containing tracking information about the referrer of the integrator */
      referrer?: string;
      /** @description An objection containing status information about the execution */
      execution?: unknown;
      /** @description An ether.js TransactionRequest that can be triggered using a wallet provider. (https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) */
      transactionRequest?: unknown;
    };
    /**
     * Root Type for Action
     * @description Object describing what happens in a `Step`
     * @example {
     *   "fromChainId": 100,
     *   "fromAmount": "1000000000000000000",
     *   "fromToken": {
     *     "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *     "symbol": "MIVA",
     *     "decimals": 18,
     *     "chainId": 100,
     *     "name": "Minerva Wallet SuperToken",
     *     "coinKey": "MIVA",
     *     "priceUSD": "0.0455272371751059",
     *     "logoURI": ""
     *   },
     *   "toChainId": 137,
     *   "toToken": {
     *     "address": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *     "symbol": "MIVA",
     *     "decimals": 18,
     *     "chainId": 137,
     *     "name": "Minerva Wallet SuperToken",
     *     "coinKey": "MIVA",
     *     "priceUSD": "0",
     *     "logoURI": ""
     *   },
     *   "slippage": 0.003
     * }
     */
    Action: {
      /**
       * Format: number
       * @description The id of the chain where the transfer should start
       */
      fromChainId: number;
      /** @description The amount that should be transferred including all decimals */
      fromAmount: string;
      /** @description The sending token */
      fromToken: components["schemas"]["Token"];
      /**
       * Format: number
       * @description The id of the chain where the transfer should end
       */
      toChainId: number;
      /** @description The token that should be transferred to */
      toToken: components["schemas"]["Token"];
      /**
       * Format: double
       * @description The maximum allowed slippage
       */
      slippage?: number;
      /** @description The sending wallet address */
      fromAddress?: string;
      /** @description The receiving wallet address */
      toAddress?: string;
    };
    /**
     * Root Type for FeeCost
     * @description Fees included in the transfer
     * @example {
     *   "name": "Gas Fee",
     *   "description": "Covers gas expense for sending funds to user on receiving chain.",
     *   "percentage": "0",
     *   "token": {
     *     "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *     "symbol": "MIVA",
     *     "decimals": 18,
     *     "chainId": 100,
     *     "name": "Minerva Wallet SuperToken",
     *     "coinKey": "MIVA",
     *     "priceUSD": "0.0455272371751059",
     *     "logoURI": ""
     *   },
     *   "amount": "0",
     *   "amountUSD": "0.00"
     * }
     */
    FeeCost: {
      /** @description Name of the fee */
      name: string;
      /** @description Description of the fee costs */
      description?: string;
      /** @description Percentage of how much fees are taken */
      percentage: string;
      /** @description The `Token` in which the fees are taken */
      token: components["schemas"]["Token"];
      /** @description The amount of fees */
      amount?: string;
      /** @description The amount of fees in USD */
      amountUSD: string;
      /** @description Whether fee is included into transfer's `fromAmount` */
      included: boolean;
    };
    /**
     * Root Type for GasCost
     * @description Gas costs included in the transfer
     * @example {
     *   "type": "SEND",
     *   "price": "1.22",
     *   "estimate": "140000",
     *   "limit": "175000",
     *   "amount": "170800",
     *   "amountUSD": "0.00",
     *   "token": {
     *     "address": "0x0000000000000000000000000000000000000000",
     *     "symbol": "xDai",
     *     "decimals": 18,
     *     "chainId": 100,
     *     "name": "xDai",
     *     "coinKey": "xDai",
     *     "priceUSD": "1",
     *     "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *   }
     * }
     */
    GasCost: {
      /** @description Can be one of `SUM`, `APPROVE` or `SEND` */
      type: string;
      /** @description Suggested current standard price for the chain */
      price?: string;
      /** @description Estimation how much gas will be needed */
      estimate?: string;
      /** @description Suggested gas limit */
      limit?: string;
      /** @description Amount of the gas cost */
      amount: string;
      /** @description Amount of the gas cost in USD */
      amountUSD?: string;
      /** @description The used gas token */
      token: components["schemas"]["Token"];
    };
    /**
     * Root Type for Estimate
     * @description An estimate for the current transfer
     * @example {
     *   "fromAmount": "1000000000000000000",
     *   "toAmount": "999500000000000000",
     *   "toAmountMin": "999500000000000000",
     *   "approvalAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *   "feeCosts": [
     *     {
     *       "name": "Gas Fee",
     *       "description": "Covers gas expense for sending funds to user on receiving chain.",
     *       "percentage": "0",
     *       "token": {
     *         "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 100,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0.0455272371751059",
     *         "logoURI": ""
     *       },
     *       "amount": "0",
     *       "amountUSD": "0.00",
     *       "included": true
     *     },
     *     {
     *       "name": "Relay Fee",
     *       "description": "Covers gas expense for claiming user funds on receiving chain.",
     *       "percentage": "0",
     *       "token": {
     *         "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 100,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0.0455272371751059",
     *         "logoURI": ""
     *       },
     *       "amount": "0",
     *       "amountUSD": "0.00",
     *       "included": true
     *     },
     *     {
     *       "name": "Router Fee",
     *       "description": "Router service fee.",
     *       "percentage": "0.0005",
     *       "token": {
     *         "address": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *         "symbol": "MIVA",
     *         "decimals": 18,
     *         "chainId": 100,
     *         "name": "Minerva Wallet SuperToken",
     *         "coinKey": "MIVA",
     *         "priceUSD": "0.0455272371751059",
     *         "logoURI": ""
     *       },
     *       "amount": "500000000000000",
     *       "amountUSD": "22763618587552.95",
     *       "included": true
     *     }
     *   ],
     *   "gasCosts": [
     *     {
     *       "type": "SEND",
     *       "price": "1.22",
     *       "estimate": "140000",
     *       "limit": "175000",
     *       "amount": "170800",
     *       "amountUSD": "0.00",
     *       "token": {
     *         "address": "0x0000000000000000000000000000000000000000",
     *         "symbol": "xDai",
     *         "decimals": 18,
     *         "chainId": 100,
     *         "name": "xDai",
     *         "coinKey": "xDai",
     *         "priceUSD": "1",
     *         "logoURI": "https://static.debank.com/image/xdai_token/logo_url/xdai/1207e67652b691ef3bfe04f89f4b5362.png"
     *       }
     *     }
     *   ],
     *   "data": {
     *     "bid": {
     *       "user": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *       "router": "0xeE2Ef40F688607CB23618d9312d62392786d13EB",
     *       "initiator": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *       "sendingChainId": 100,
     *       "sendingAssetId": "0x63e62989d9eb2d37dfdb1f93a22f063635b07d51",
     *       "amount": "1000000000000000000",
     *       "receivingChainId": 137,
     *       "receivingAssetId": "0xc0b2983a17573660053beeed6fdb1053107cf387",
     *       "amountReceived": "999500000000000000",
     *       "receivingAddress": "0x10fBFF9b9450D3A2d9d1612d6dE3726fACD8809E",
     *       "transactionId": "0x9f54c1764e19367c44706f4a6253941b81e9ec524af5590091aa8ae67e7644ed",
     *       "expiry": 1643369368,
     *       "callDataHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *       "callTo": "0x0000000000000000000000000000000000000000",
     *       "encryptedCallData": "0x",
     *       "sendingChainTxManagerAddress": "0x115909BDcbaB21954bEb4ab65FC2aBEE9866fa93",
     *       "receivingChainTxManagerAddress": "0x6090De2EC76eb1Dc3B5d632734415c93c44Fd113",
     *       "bidExpiry": 1643110469
     *     },
     *     "gasFeeInReceivingToken": "0",
     *     "totalFee": "500000000000000",
     *     "metaTxRelayerFee": "0",
     *     "routerFee": "500000000000000"
     *   }
     * }
     */
    Estimate: {
      /** @description The amount that should be transferred */
      fromAmount: string;
      /** @description The estimated resulting amount of the `toToken` */
      toAmount: string;
      /** @description The minimal outcome of the transfer */
      toAmountMin: string;
      /** @description The contract address for the approval */
      approvalAddress: string;
      /** @description Fees included in the transfer */
      feeCosts?: components["schemas"]["FeeCost"][];
      /** @description Gas costs included in the transfer */
      gasCosts?: components["schemas"]["GasCost"][];
      /** @description Arbitrary data that depends on the the used tool */
      data?: {
        bid?: {
          user?: string;
          router?: string;
          initiator?: string;
          /** Format: number */
          sendingChainId?: number;
          sendingAssetId?: string;
          amount?: string;
          /** Format: number */
          receivingChainId?: number;
          receivingAssetId?: string;
          amountReceived?: string;
          receivingAddress?: string;
          transactionId?: string;
          /** Format: number */
          expiry?: number;
          callDataHash?: string;
          callTo?: string;
          encryptedCallData?: string;
          sendingChainTxManagerAddress?: string;
          receivingChainTxManagerAddress?: string;
          /** Format: number */
          bidExpiry?: number;
        };
        bidSignature?: string;
        gasFeeInReceivingToken?: string;
        totalFee?: string;
        metaTxRelayerFee?: string;
        routerFee?: string;
      };
    };
    /**
     * Root Type for RouteOptions
     * @description Optional settings for the route
     * @example {
     *   "integrator": "your.site",
     *   "slippage": 0.003,
     *   "fee": 0.02,
     *   "bridges": {
     *     "allow": [
     *       "connext"
     *     ]
     *   },
     *   "exchanges": {
     *     "allow": [
     *       "1inch",
     *       "openocean"
     *     ]
     *   }
     * }
     */
    RouteOptions: {
      /** @description Facilitates transfer insurance via insurace.io, ensuring secure and insured transfer of assets. */
      insurance?: boolean;
      /** @description Custom string the developer who integrates LiFi can set */
      integrator?: string;
      /**
       * Format: double
       * @description The maximum allowed slippage
       */
      slippage?: number;
      /** @description Object configuring the bridges that should or should not be taken into consideration for the possibilities */
      bridges?: components["schemas"]["AllowDenyPrefer"];
      /** @description Object configuring the exchanges that should or should not be taken into consideration for the possibilities */
      exchanges?: components["schemas"]["AllowDenyPrefer"];
      /**
       * @description The way the resulting routes should be ordered
       * @enum {string}
       */
      order?: "RECOMMENDED" | "FASTEST" | "CHEAPEST" | "SAFEST";
      /** @description Whether chain switches should be allowed in the routes */
      allowSwitchChain?: boolean;
      /** @description Integrators can set a wallet address as referrer to track them */
      referrer?: string;
      /**
       * Format: double
       * @description The percent of the integrator's fee that is taken from every transaction
       */
      fee?: number;
      /**
       * Format: double
       * @description The price impact threshold above which routes are hidden. As an example, one should specify 0.15 (15%) to hide routes with more than 15% price impact. The default is 10%.
       */
      maxPriceImpact?: number;
    };
    /**
     * Root Type for BridgeDefinition
     * @description The defintion of a bridge with the transferrable token pair
     * @example {
     *   "tool": "connext",
     *   "fromChainId": 100,
     *   "fromToken": {
     *     "address": "0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1",
     *     "decimals": 18,
     *     "symbol": "ETH",
     *     "chainId": 100,
     *     "coinKey": "ETH",
     *     "name": "ETH",
     *     "logoURI": "https://static.debank.com/image/xdai_token/logo_url/0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1/61844453e63cf81301f845d7864236f6.png",
     *     "priceUSD": "2426.47"
     *   },
     *   "toChainId": 137,
     *   "toToken": {
     *     "address": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
     *     "decimals": 18,
     *     "symbol": "ETH",
     *     "chainId": 137,
     *     "coinKey": "ETH",
     *     "name": "ETH",
     *     "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619/61844453e63cf81301f845d7864236f6.png",
     *     "priceUSD": "2426.47"
     *   },
     *   "maximumTransfer": "Infinity",
     *   "minimumTransfer": "1",
     *   "swapFeeRate": "0.005",
     *   "swapFeeMinimum": "0",
     *   "swapFeeMaximum": "Infinity"
     * }
     */
    BridgeDefinition: {
      tool: components["schemas"]["BridgesEnum"];
      /**
       * Format: number
       * @description From which chain transfers can happen
       */
      fromChainId: number;
      /** @description Which `Token` can be sent */
      fromToken: components["schemas"]["Token"];
      /**
       * Format: number
       * @description To which chain transfers can happen
       */
      toChainId: number;
      /** @description The `Token` that can be transferred to */
      toToken: components["schemas"]["Token"];
      /** @description The maximum amount that can be sent in one transfer */
      maximumTransfer: string;
      /** @description The minimum amount that can be sent in one transfer */
      minimumTransfer: string;
      /** @description The rate taken for swap fees */
      swapFeeRate: string;
      /** @description The minimum swap fees that will be taken */
      swapFeeMinimum: string;
      /** @description The maximum swap fees that might occur */
      swapFeeMaximum: string;
    };
    /**
     * Root Type for BridgeDefinition
     * @description The defintion of an exchange with the avaiable chains
     * @example {
     *   "tool": "1inch",
     *   "chains": [
     *     1,
     *     56,
     *     137,
     *     10,
     *     43114,
     *     100
     *   ]
     * }
     */
    ExchangeDefinition: {
      /**
       * @description The exchange tool
       * @enum {string}
       */
      tool: "1inch" | "paraswap" | "openocean" | "0x";
      /** @description The available chains for this tool */
      chains: number[];
    };
    /**
     * Root Type for BasicTransaction
     * @description A basic transaction object
     * @example {
     *   "txHash": "0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a",
     *   "txLink": "https://polygonscan.com/tx/0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a",
     *   "amount": "13000000",
     *   "token": {
     *     "address": "0xd69b31c3225728cc57ddaf9be532a4ee1620be51",
     *     "symbol": "anyUSDC",
     *     "decimals": 6,
     *     "chainId": 137,
     *     "name": "USDC",
     *     "coinKey": "anyUSDC",
     *     "priceUSD": "0",
     *     "logoURI": ""
     *   },
     *   "chainId": 137
     * }
     */
    BasicTransaction: {
      /** @description The hash of the transaction */
      txHash: string;
      /** @description Link to a block explorer showing the transaction */
      txLink: string;
      /** @description The amount of the transaction */
      amount: string;
      /** @description Information about the token */
      token: components["schemas"]["Token"];
      /** @description The id of the chain */
      chainId: number;
    };
    /**
     * Root Type for TransactionInfo
     * @description A transaction info object
     * @example {
     *   "txHash": "0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a",
     *   "txLink": "https://polygonscan.com/tx/0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a",
     *   "amount": "13000000",
     *   "token": {
     *     "address": "0xd69b31c3225728cc57ddaf9be532a4ee1620be51",
     *     "symbol": "anyUSDC",
     *     "decimals": 6,
     *     "chainId": 137,
     *     "name": "USDC",
     *     "coinKey": "anyUSDC",
     *     "priceUSD": "0",
     *     "logoURI": ""
     *   },
     *   "gasToken": {
     *     "address": "0x0000000000000000000000000000000000001010",
     *     "symbol": "MATIC",
     *     "decimals": 18,
     *     "chainId": 137,
     *     "name": "MATIC",
     *     "coinKey": "MATIC",
     *     "priceUSD": "0",
     *     "logoURI": ""
     *   },
     *   "chainId": 137,
     *   "gasAmount": "10000",
     *   "gasAmountUSD": "0.0",
     *   "gasPrice": "1000",
     *   "gasUsed": "1000"
     * }
     */
    TransactionInfo: {
      /** @description The hash of the transaction */
      txHash: string;
      /** @description Link to a block explorer showing the transaction */
      txLink: string;
      /** @description The amount of the transaction */
      amount: string;
      /** @description Information about the token */
      token: components["schemas"]["Token"];
      /** @description The id of the chain */
      chainId: number;
      /** @description The token in which gas was paid */
      gasToken?: components["schemas"]["Token"];
      /** @description The amount of the gas that was paid */
      gasAmount?: string;
      /** @description The amount of the gas that was paid in USD */
      gasAmountUSD?: string;
      /** @description The price of the gas */
      gasPrice?: string;
      /** @description The amount of the gas that was used */
      gasUsed?: string;
    };
    /**
     * Root Type for StatusResponse
     * @description The current status of a transfer
     * @example {
     *   "sending": {
     *     "txHash": "0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a",
     *     "txLink": "https://polygonscan.com/tx/0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a",
     *     "amount": "13000000",
     *     "token": {
     *       "address": "0xd69b31c3225728cc57ddaf9be532a4ee1620be51",
     *       "symbol": "anyUSDC",
     *       "decimals": 6,
     *       "chainId": 137,
     *       "name": "USDC",
     *       "coinKey": "anyUSDC",
     *       "priceUSD": "0",
     *       "logoURI": ""
     *     },
     *     "chainId": 137,
     *     "gasToken": {
     *       "address": "0x0000000000000000000000000000000000001010",
     *       "symbol": "MATIC",
     *       "decimals": 18,
     *       "chainId": 137,
     *       "name": "MATIC",
     *       "coinKey": "MATIC",
     *       "priceUSD": "0",
     *       "logoURI": ""
     *     },
     *     "gasAmount": "10000",
     *     "gasAmountUSD": "0.0",
     *     "gasPrice": "1000",
     *     "gasUsed": "1000"
     *   },
     *   "receiving": {
     *     "txHash": "0xba2793065e20835ef60993144d92e6bc1a86529a70e16c357f66ad13774868ad",
     *     "txLink": "https://bscscan.com/tx/0xba2793065e20835ef60993144d92e6bc1a86529a70e16c357f66ad13774868ad",
     *     "amount": "12100000000000000000",
     *     "token": {
     *       "address": "0x8965349fb649a33a30cbfda057d8ec2c48abe2a2",
     *       "symbol": "anyUSDC",
     *       "decimals": 18,
     *       "chainId": 56,
     *       "name": "USDC",
     *       "coinKey": "anyUSDC",
     *       "priceUSD": "0",
     *       "logoURI": ""
     *     },
     *     "chainId": 56,
     *     "gasToken": {
     *       "address": "0x0000000000000000000000000000000000001010",
     *       "symbol": "BNB",
     *       "decimals": 18,
     *       "chainId": 56,
     *       "name": "BNB",
     *       "coinKey": "BNB",
     *       "priceUSD": "0",
     *       "logoURI": ""
     *     },
     *     "gasAmount": "10000",
     *     "gasAmountUSD": "0.0",
     *     "gasPrice": "1000",
     *     "gasUsed": "1000"
     *   },
     *   "tool": "anyswap",
     *   "status": "DONE",
     *   "substatus": "COMPLETED",
     *   "transactionId": "0x0000000000000000000000000000000000001010",
     *   "fromAddress": "0x0000000000000000000000000000000000001010",
     *   "toAddress": "0x0000000000000000000000000000000000001010",
     *   "lifiExplorerLink": "https://explorer.li.fi/tx/0xd3ad8fb8798d8440f3a1ec7fd51e102a88e4690f9365fad4eff1a17020376b4a"
     * }
     */
    StatusResponse: {
      /** @description The transaction on the sending chain */
      sending: components["schemas"]["TransactionInfo"];
      /** @description The transaction on the receiving chain */
      receiving?: components["schemas"]["TransactionInfo"];
      /**
       * @description The current status of the transfer. Can be `PENDING`, `DONE`, `NOT_FOUND` or `FAILED`
       * @enum {string}
       */
      status: "NOT_FOUND" | "INVALID" | "PENDING" | "DONE" | "FAILED";
      /**
       * @description A more specific substatus. This is available for PENDING and DONE statuses. More information can be found here: https://docs.li.fi/more-integration-options/li.fi-api/checking-the-status-of-a-transaction
       * @enum {unknown}
       */
      substatus?: "WAIT_SOURCE_CONFIRMATIONS" | "WAIT_DESTINATION_TRANSACTION" | "BRIDGE_NOT_AVAILABLE" | "CHAIN_NOT_AVAILABLE" | "NOT_PROCESSABLE_REFUND_NEEDED" | "REFUND_IN_PROGRESS" | "UNKNOWN_ERROR" | "COMPLETED" | "PARTIAL" | "REFUNDED";
      /** @description The tool used for this transfer */
      tool: string;
    };
    /**
     * Root Type for IntegratorResponse
     * @description Integrator's fee balance by chain
     * @example {
     *   "integratorId": "fee-demo",
     *   "feeBalances": [
     *     {
     *       "chainId": 137,
     *       "tokenBalances": [
     *         {
     *           "token": {
     *             "address": "0x0000000000000000000000000000000000000000",
     *             "symbol": "MATIC",
     *             "decimals": 18,
     *             "chainId": 137,
     *             "name": "MATIC",
     *             "coinKey": "MATIC",
     *             "priceUSD": "0.742896",
     *             "logoURI": "https://static.debank.com/image/matic_token/logo_url/matic/6f5a6b6f0732a7a235131bd7804d357c.png"
     *           },
     *           "amount": 0,
     *           "amountUsd": 0
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    IntegratorResponse: {
      /** @description The integrator's name or wallet address */
      integratorId: string;
      /** @description The fee balances of the integrator */
      feeBalances?: components["schemas"]["FeeBalances"][];
    };
    FeeBalances: {
      /**
       * @description The id of the chain
       * @example 137
       */
      chainId?: number;
      tokenBalances?: components["schemas"]["TokenBalances"][];
    };
    TokenBalances: {
      token?: components["schemas"]["Token"];
      /**
       * @description Fee amount in tokens
       * @example 0
       */
      amount?: string;
      /**
       * @description Fee amount in USD
       * @example 0
       */
      amountUsd?: string;
    };
    /**
     * Root Type for IntegratorWithdrawalResponse
     * @description Transaction request for withdrawing integrator's collected fees for the specified chain
     */
    IntegratorWithdrawalResponse: {
      /** @description The transaction request */
      transactionRequest: {
        /** @description The transaction's data */
        data?: string;
        /** @description The FeeCollector's contract address for the specified chain */
        to?: string;
      };
    };
    /**
     * Root Type for ChainsResponse
     * @example {
     *   "chains": [
     *     {
     *       "key": "eth",
     *       "name": "Ethereum",
     *       "coin": "ETH",
     *       "id": 1,
     *       "mainnet": true,
     *       "chainType": "EVM",
     *       "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/ethereum.png",
     *       "tokenlistUrl": "https://gateway.ipfs.io/ipns/tokens.uniswap.org",
     *       "multicallAddress": "0xcA11bde05977b3631167028862bE2a173976CA11",
     *       "metamask": {
     *         "chainId": "0x1",
     *         "blockExplorerUrls": [
     *           "https://etherscan.io/"
     *         ],
     *         "chainName": "Ethereum Mainnet",
     *         "nativeCurrency": {
     *           "name": "ETH",
     *           "symbol": "ETH",
     *           "decimals": 18
     *         },
     *         "rpcUrls": [
     *           "https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"
     *         ]
     *       },
     *       "nativeToken": {
     *         "address": "0x0000000000000000000000000000000000000000",
     *         "decimals": 18,
     *         "symbol": "ETH",
     *         "chainId": 1,
     *         "coinKey": "ETH",
     *         "name": "ETH",
     *         "logoURI": "https://static.debank.com/image/token/logo_url/eth/935ae4e4d1d12d59a99717a24f2540b5.png",
     *         "priceUSD": "2582.35"
     *       }
     *     },
     *     {
     *       "key": "pol",
     *       "name": "Polygon",
     *       "coin": "MATIC",
     *       "id": 137,
     *       "mainnet": true,
     *       "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/polygon.png",
     *       "tokenlistUrl": "https://unpkg.com/quickswap-default-token-list@1.0.71/build/quickswap-default.tokenlist.json",
     *       "faucetUrls": [
     *         "https://stakely.io/faucet/polygon-matic"
     *       ],
     *       "metamask": {
     *         "chainId": "0x89",
     *         "blockExplorerUrls": [
     *           "https://polygonscan.com/",
     *           "https://explorer-mainnet.maticvigil.com/"
     *         ],
     *         "chainName": "Matic(Polygon) Mainnet",
     *         "nativeCurrency": {
     *           "name": "MATIC",
     *           "symbol": "MATIC",
     *           "decimals": 18
     *         },
     *         "rpcUrls": [
     *           "https://polygon-rpc.com/",
     *           "https://rpc-mainnet.maticvigil.com/"
     *         ]
     *       }
     *     },
     *     {
     *       "key": "bsc",
     *       "name": "BSC",
     *       "coin": "BNB",
     *       "id": 56,
     *       "mainnet": true,
     *       "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/bsc.png",
     *       "tokenlistUrl": "https://tokens.pancakeswap.finance/pancakeswap-extended.json",
     *       "faucetUrls": [
     *         "https://stakely.io/faucet/bsc-chain-bnb"
     *       ],
     *       "metamask": {
     *         "chainId": "0x38",
     *         "blockExplorerUrls": [
     *           "https://bscscan.com/"
     *         ],
     *         "chainName": "Binance Smart Chain Mainnet",
     *         "nativeCurrency": {
     *           "name": "BNB",
     *           "symbol": "BNB",
     *           "decimals": 18
     *         },
     *         "rpcUrls": [
     *           "https://bsc-dataseed.binance.org/",
     *           "https://bsc-dataseed1.defibit.io/",
     *           "https://bsc-dataseed1.ninicoin.io/"
     *         ]
     *       }
     *     },
     *     {
     *       "key": "dai",
     *       "name": "Gnosis",
     *       "coin": "DAI",
     *       "id": 100,
     *       "mainnet": true,
     *       "logoURI": "https://raw.githubusercontent.com/lifinance/types/main/src/assets/icons/chains/gnosis.png",
     *       "tokenlistUrl": "https://tokens.honeyswap.org/",
     *       "faucetUrls": [
     *         "https://stakely.io/faucet/xdai-chain"
     *       ],
     *       "metamask": {
     *         "chainId": "0x64",
     *         "blockExplorerUrls": [
     *           "https://blockscout.com/xdai/mainnet/"
     *         ],
     *         "chainName": "Gnosis Chain",
     *         "nativeCurrency": {
     *           "name": "xDai",
     *           "symbol": "xDai",
     *           "decimals": 18
     *         },
     *         "rpcUrls": [
     *           "https://rpc.gnosischain.com/",
     *           "https://rpc.xdaichain.com/",
     *           "https://dai.poa.network/"
     *         ]
     *       }
     *     }
     *   ]
     * }
     */
    ChainsResponse: {
      chains?: components["schemas"]["Chain"][];
    };
    /**
     * Root Type for ConnectionsResponse
     * @example {
     *   "connections": [
     *     {
     *       "fromChainId": 137,
     *       "toChainId": 1,
     *       "fromTokens": [
     *         {
     *           "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 137,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         }
     *       ],
     *       "toTokens": [
     *         {
     *           "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 1,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/eth_token/logo_url/0x6b175474e89094c44da98b954eedeac495271d0f/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x0000000000000000000000000000000000000000",
     *           "decimals": 18,
     *           "symbol": "ETH",
     *           "chainId": 1,
     *           "coinKey": "ETH",
     *           "name": "ETH",
     *           "logoURI": "https://static.debank.com/image/token/logo_url/eth/935ae4e4d1d12d59a99717a24f2540b5.png",
     *           "priceUSD": "2582.35"
     *         },
     *         {
     *           "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
     *           "decimals": 6,
     *           "symbol": "USDC",
     *           "chainId": 1,
     *           "coinKey": "USDC",
     *           "name": "USDC",
     *           "logoURI": "https://static.debank.com/image/eth_token/logo_url/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48/fffcd27b9efff5a86ab942084c05924d.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
     *           "decimals": 6,
     *           "symbol": "USDT",
     *           "chainId": 1,
     *           "coinKey": "USDT",
     *           "name": "USDT",
     *           "logoURI": "https://static.debank.com/image/eth_token/logo_url/0xdac17f958d2ee523a2206206994597c13d831ec7/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *           "priceUSD": "1"
     *         }
     *       ]
     *     },
     *     {
     *       "fromChainId": 137,
     *       "toChainId": 10,
     *       "fromTokens": [
     *         {
     *           "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 137,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         }
     *       ],
     *       "toTokens": [
     *         {
     *           "address": "0xda10009cbd5d07dd0cecc66161fc93d7c9000da1",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 10,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/0xda10009cbd5d07dd0cecc66161fc93d7c9000da1/45965130df45ecf234ff03ce28299cd1.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x0000000000000000000000000000000000000000",
     *           "decimals": 18,
     *           "symbol": "ETH",
     *           "chainId": 10,
     *           "coinKey": "ETH",
     *           "name": "ETH",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/op/d61441782d4a08a7479d54aea211679e.png",
     *           "priceUSD": "2582.35"
     *         },
     *         {
     *           "address": "0x7f5c764cbc14f9669b88837ca1490cca17c31607",
     *           "decimals": 6,
     *           "symbol": "USDC",
     *           "chainId": 10,
     *           "coinKey": "USDC",
     *           "name": "USDC",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/0x7f5c764cbc14f9669b88837ca1490cca17c31607/773a0161709a55edc211c3fa67f7c1a7.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x94b008aa00579c1307b0ef2c499ad98a8ce58e58",
     *           "decimals": 6,
     *           "symbol": "USDT",
     *           "chainId": 10,
     *           "coinKey": "USDT",
     *           "name": "USDT",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/0x94b008aa00579c1307b0ef2c499ad98a8ce58e58/37c9c2ddceb0c83f0f4c07ea4fa53e9d.png",
     *           "priceUSD": "1"
     *         }
     *       ]
     *     },
     *     {
     *       "fromChainId": 137,
     *       "toChainId": 56,
     *       "fromTokens": [
     *         {
     *           "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 137,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         }
     *       ],
     *       "toTokens": [
     *         {
     *           "address": "0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 56,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x2170ed0880ac9a755fd29b2688956bd959f933f8",
     *           "decimals": 18,
     *           "symbol": "ETH",
     *           "chainId": 56,
     *           "coinKey": "ETH",
     *           "name": "ETH",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x2170ed0880ac9a755fd29b2688956bd959f933f8/80dd95753396b5619cf84b0df135eae5.png",
     *           "priceUSD": "2582.35"
     *         },
     *         {
     *           "address": "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
     *           "decimals": 18,
     *           "symbol": "USDC",
     *           "chainId": 56,
     *           "coinKey": "USDC",
     *           "name": "USDC",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d/fffcd27b9efff5a86ab942084c05924d.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x55d398326f99059ff775485246999027b3197955",
     *           "decimals": 18,
     *           "symbol": "USDT",
     *           "chainId": 56,
     *           "coinKey": "USDT",
     *           "name": "USDT",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x55d398326f99059ff775485246999027b3197955/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *           "priceUSD": "1"
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    ConnectionsResponse: {
      /** @description The possible connections */
      connections?: components["schemas"]["Connection"][];
    };
    /**
     * Root Type for Connection
     * @description A connection from one chain to another defined by tokens that can be exchanged for another.
     * @example {
     *   "connections": [
     *     {
     *       "fromChainId": 137,
     *       "toChainId": 1,
     *       "fromTokens": [
     *         {
     *           "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 137,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         }
     *       ],
     *       "toTokens": [
     *         {
     *           "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 1,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/eth_token/logo_url/0x6b175474e89094c44da98b954eedeac495271d0f/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x0000000000000000000000000000000000000000",
     *           "decimals": 18,
     *           "symbol": "ETH",
     *           "chainId": 1,
     *           "coinKey": "ETH",
     *           "name": "ETH",
     *           "logoURI": "https://static.debank.com/image/token/logo_url/eth/935ae4e4d1d12d59a99717a24f2540b5.png",
     *           "priceUSD": "2582.35"
     *         },
     *         {
     *           "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
     *           "decimals": 6,
     *           "symbol": "USDC",
     *           "chainId": 1,
     *           "coinKey": "USDC",
     *           "name": "USDC",
     *           "logoURI": "https://static.debank.com/image/eth_token/logo_url/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48/fffcd27b9efff5a86ab942084c05924d.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
     *           "decimals": 6,
     *           "symbol": "USDT",
     *           "chainId": 1,
     *           "coinKey": "USDT",
     *           "name": "USDT",
     *           "logoURI": "https://static.debank.com/image/eth_token/logo_url/0xdac17f958d2ee523a2206206994597c13d831ec7/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *           "priceUSD": "1"
     *         }
     *       ]
     *     },
     *     {
     *       "fromChainId": 137,
     *       "toChainId": 10,
     *       "fromTokens": [
     *         {
     *           "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 137,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         }
     *       ],
     *       "toTokens": [
     *         {
     *           "address": "0xda10009cbd5d07dd0cecc66161fc93d7c9000da1",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 10,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/0xda10009cbd5d07dd0cecc66161fc93d7c9000da1/45965130df45ecf234ff03ce28299cd1.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x0000000000000000000000000000000000000000",
     *           "decimals": 18,
     *           "symbol": "ETH",
     *           "chainId": 10,
     *           "coinKey": "ETH",
     *           "name": "ETH",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/op/d61441782d4a08a7479d54aea211679e.png",
     *           "priceUSD": "2582.35"
     *         },
     *         {
     *           "address": "0x7f5c764cbc14f9669b88837ca1490cca17c31607",
     *           "decimals": 6,
     *           "symbol": "USDC",
     *           "chainId": 10,
     *           "coinKey": "USDC",
     *           "name": "USDC",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/0x7f5c764cbc14f9669b88837ca1490cca17c31607/773a0161709a55edc211c3fa67f7c1a7.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x94b008aa00579c1307b0ef2c499ad98a8ce58e58",
     *           "decimals": 6,
     *           "symbol": "USDT",
     *           "chainId": 10,
     *           "coinKey": "USDT",
     *           "name": "USDT",
     *           "logoURI": "https://static.debank.com/image/op_token/logo_url/0x94b008aa00579c1307b0ef2c499ad98a8ce58e58/37c9c2ddceb0c83f0f4c07ea4fa53e9d.png",
     *           "priceUSD": "1"
     *         }
     *       ]
     *     },
     *     {
     *       "fromChainId": 137,
     *       "toChainId": 56,
     *       "fromTokens": [
     *         {
     *           "address": "0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 137,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/matic_token/logo_url/0x8f3cf7ad23cd3cadbd9735aff958023239c6a063/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         }
     *       ],
     *       "toTokens": [
     *         {
     *           "address": "0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3",
     *           "decimals": 18,
     *           "symbol": "DAI",
     *           "chainId": 56,
     *           "coinKey": "DAI",
     *           "name": "DAI",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3/549c4205dbb199f1b8b03af783f35e71.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x2170ed0880ac9a755fd29b2688956bd959f933f8",
     *           "decimals": 18,
     *           "symbol": "ETH",
     *           "chainId": 56,
     *           "coinKey": "ETH",
     *           "name": "ETH",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x2170ed0880ac9a755fd29b2688956bd959f933f8/80dd95753396b5619cf84b0df135eae5.png",
     *           "priceUSD": "2582.35"
     *         },
     *         {
     *           "address": "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
     *           "decimals": 18,
     *           "symbol": "USDC",
     *           "chainId": 56,
     *           "coinKey": "USDC",
     *           "name": "USDC",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d/fffcd27b9efff5a86ab942084c05924d.png",
     *           "priceUSD": "1"
     *         },
     *         {
     *           "address": "0x55d398326f99059ff775485246999027b3197955",
     *           "decimals": 18,
     *           "symbol": "USDT",
     *           "chainId": 56,
     *           "coinKey": "USDT",
     *           "name": "USDT",
     *           "logoURI": "https://static.debank.com/image/bsc_token/logo_url/0x55d398326f99059ff775485246999027b3197955/66eadee7b7bb16b75e02b570ab8d5c01.png",
     *           "priceUSD": "1"
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    Connection: {
      /** @description The sending chain */
      fromChainId: number;
      /** @description The receiving chain */
      toChainId: number;
      /** @description List of possible tokens that can be sent */
      fromTokens: components["schemas"]["Token"][];
      /** @description List of tokens that can be sent */
      toTokens: components["schemas"]["Token"][];
    };
    /** @enum {string} */
    PossibilitiesTopicEnum: "chains" | "tokens" | "bridges" | "exchanges";
    /**
     * Root Type for WalletAnalyticsResponse
     * @description All transactions for a wallet address
     */
    WalletAnalyticsResponse: {
      /** @description Wallet address */
      walletAddress: string;
      transactions: components["schemas"]["StatusResponse"][];
    };
    /** Root Type for TransfersResult */
    TransfersResult: Record<string, never>;
  };
  responses: {
    /** @description Object listing all the currently enabled bridges and exchanges. */
    ToolsResponse: {
      content: {
        "application/json": components["schemas"]["Tools"];
      };
    };
    /** @description Gas Prices for the supplied chainID */
    GasPricesResponse: {
      content: {
        "application/json": components["schemas"]["GasPrice"];
      };
    };
    /** @description The status of a lifuel operation */
    LIFuelStatusResponse: {
      content: {
        "application/json": components["schemas"]["LIFuelStatus"];
      };
    };
    /** @description Object listing current possibilities for any-to-any cross-chain-swaps based on the provided preferences. */
    PossibilitiesResponse: {
      content: {
        "application/json": components["schemas"]["PossibilitiesResponse"];
      };
    };
    /** @description Invalid Routes Request */
    InvalidRoutesRequest: {
      content: never;
    };
    /** @description Requested `to` or `from` token was not found */
    InvalidRoutesNotFoundRequest: {
      content: never;
    };
    /** @description The resulting routes that can be used to realize the described transfer of tokens */
    RoutesResponse: {
      content: {
        "application/json": components["schemas"]["RoutesResponse"];
      };
    };
    /** @description The step populated with the transaction data */
    StepResponse: {
      content: {
        "application/json": components["schemas"]["Step"];
      };
    };
    /** @description Invalid Step Request */
    InvalidStepRequest: {
      content: never;
    };
    TokensResponse: {
      content: {
        "application/json": {
          /** @description The requested tokens */
          1?: components["schemas"]["Token"][];
        };
      };
    };
    TokenResponse: {
      content: {
        "application/json": components["schemas"]["Token"][];
      };
    };
    /** @description No token found for the given address and chain */
    NoTokenFound: {
      content: never;
    };
    /** @description Unable to find a quote for the requested transfer. */
    QuoteNotFound: {
      content: {
        "application/json": {
          /**
           * @description The error message
           * @example Unable to find a quote for the requested transfer
           */
          message?: string;
          errors?: Record<string, never>;
        };
      };
    };
    /** @description Invalid quote request */
    InvalidQuoteRequest: {
      content: never;
    };
    /** @description Response of the Status request */
    StatusResponse: {
      content: {
        "application/json": components["schemas"]["StatusResponse"];
      };
    };
    /** @description Transaction not found */
    StatusNotFound: {
      content: never;
    };
    /** @description The passed parameters are invalid */
    InvalidStatusRequest: {
      content: never;
    };
    /** @description Response of the Integrator request */
    IntegratorResponse: {
      content: {
        "application/json": components["schemas"]["IntegratorResponse"];
      };
    };
    /** @description Integrator with the name ${integratorId} is not found */
    InvalidIntegratorRequest: {
      content: never;
    };
    /** @description Response of the integrator's fee withdrawal transaction request */
    IntegratorWithdrawalTransactionResponse: {
      content: {
        "application/json": components["schemas"]["IntegratorWithdrawalResponse"];
      };
    };
    /** @description None of the requested tokens has a balance */
    InvalidIntegratorWithdrawalRequest: {
      content: never;
    };
    ChainsResponse: {
      content: {
        "application/json": components["schemas"]["ChainsResponse"];
      };
    };
    ConnectionsResponse: {
      content: {
        "application/json": components["schemas"]["ConnectionsResponse"];
      };
    };
    /** @description User passed an invalid chain id or abbrevation */
    InvalidChainResponse: {
      content: never;
    };
    /** @description Retrieve a list of transactions for a wallet address */
    WalletAnalyticsResponse: {
      content: {
        "application/json": components["schemas"]["WalletAnalyticsResponse"];
      };
    };
    /**
     * @description {
     *     "available": true,
     *     "recommended": {
     *         "token": {
     *             "address": "0x0000000000000000000000000000000000000000",
     *             "chainId": 137,
     *             "symbol": "MATIC",
     *             "decimals": 18,
     *             "name": "MATIC",
     *             "priceUSD": "1.219821",
     *             "logoURI": "https://static.debank.com/image/matic_token/logo_url/matic/6f5a6b6f0732a7a235131bd7804d357c.png",
     *             "coinKey": "MATIC"
     *         },
     *         "amount": "190510922050970750",
     *         "amountUsd": "0.23"
     *     },
     *     "limit": {
     *         "token": {
     *             "address": "0x0000000000000000000000000000000000000000",
     *             "chainId": 137,
     *             "symbol": "MATIC",
     *             "decimals": 18,
     *             "name": "MATIC",
     *             "priceUSD": "1.219821",
     *             "logoURI": "https://static.debank.com/image/matic_token/logo_url/matic/6f5a6b6f0732a7a235131bd7804d357c.png",
     *             "coinKey": "MATIC"
     *         },
     *         "amount": "1639584824330782959",
     *         "amountUsd": "2"
     *     },
     *     "serviceFee": {
     *         "token": {
     *             "address": "0x0000000000000000000000000000000000000000",
     *             "chainId": 137,
     *             "symbol": "MATIC",
     *             "decimals": 18,
     *             "name": "MATIC",
     *             "priceUSD": "1.219821",
     *             "logoURI": "https://static.debank.com/image/matic_token/logo_url/matic/6f5a6b6f0732a7a235131bd7804d357c.png",
     *             "coinKey": "MATIC"
     *         },
     *         "amount": "1829938819406250",
     *         "amountUsd": "0.01"
     *     },
     *     "fromToken": {
     *         "address": "eth",
     *         "symbol": "ETH",
     *         "decimals": 18,
     *         "chainId": 1,
     *         "name": "ETH",
     *         "coinKey": "ETH",
     *         "priceUSD": "1622.39",
     *         "logoURI": "https://static.debank.com/image/token/logo_url/eth/935ae4e4d1d12d59a99717a24f2540b5.png"
     *     },
     *     "fromAmount": "141766159801281"
     * }
     */
    GasSuggestionResponse: {
      content: never;
    };
    /**
     * @description [
     *     {
     *         "functionName": "swapTokensGeneric",
     *         "functionParameters": {
     *             "_transactionId": "0x40b0592501720ece27ef8614385fbef4bdbb5b2050ebaaa3563e72fee959e249",
     *             "_integrator": "jumper.exchange",
     *             "_referrer": "0x0000000000000000000000000000000000000000",
     *             "_receiver": "0x552008c0f6870c2f77e5cC1d2eb9bdff03e30Ea0",
     *             "_minAmount": "4640629752435722515",
     *             "_swapData": [
     *                 {
     *                     "callTo": "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
     *                     "approveTo": "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
     *                     "sendingAssetId": "0x0000000000000000000000000000000000000000",
     *                     "receivingAssetId": "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
     *                     "fromAmount": "5000000000000000000",
     *                     "callData": "0x415565b0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004066d42c380a491300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000004066d42c380a4913000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b0d500b1d8e8ef31e21c99d1db9a6444d3adf12700001f48f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000026c16b6926637cf5eb62c42991b4166add66ff9e0000000000000000000000000000000000000000000000d3adebcfec6458a4f9",
     *                     "requiresDeposit": true
     *                 },
     *                 {
     *                     "callTo": "0x464eF665Ea203d142F5aa25e12312290fA8917ec",
     *                     "approveTo": "0x464eF665Ea203d142F5aa25e12312290fA8917ec",
     *                     "sendingAssetId": "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
     *                     "receivingAssetId": "0x1305F6B6Df9Dc47159D12Eb7aC2804d4A33173c2",
     *                     "fromAmount": "4640629752435722515",
     *                     "callData": [
     *                         {
     *                             "functionName": "upgrade",
     *                             "functionParameters": {
     *                                 "superToken": "0x1305F6B6Df9Dc47159D12Eb7aC2804d4A33173c2",
     *                                 "account": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
     *                                 "amount": "4640629752435722515"
     *                             }
     *                         }
     *                     ],
     *                     "requiresDeposit": false
     *                 }
     *             ]
     *         }
     *     }
     * ]
     */
    ParsedCallDataResponse: {
      content: never;
    };
    /** @description Response of the /analtics/transfers endpoint */
    TransfersResponse: {
      content: {
        "application/json": components["schemas"]["TransfersResult"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
