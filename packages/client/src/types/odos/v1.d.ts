/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/info/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Supported Blockchains
         * @description All Chain IDs supported by Odos.
         */
        get: operations["get_chain_ids_info_chains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/contract-info/{version}/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Odos contract info
         * @description All relevant contract information for a given chain and router version.
         *
         *     ## Response Body
         *
         *     | Parameter | Description |
         *     | --- | --- |
         *     | `chainId` | ID of the chain this information is relevant for. Can be used to confirm input and output chains match. |
         *     | `routerAddress` | Address of the Odos Router Contract on the given chain and router version |
         *     | `executorAddress` | Address of the Odos Executor Contract currently in use on the given chain and router version. This contract is updated frequently to add support for new liquidity sources. |
         *     | `routerAbi` | ABI of the router |
         *     | `erc20Abi` | ERC20 Token ABI |
         */
        get: operations["get_contract_info_info_contract_info__version___chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/router/{version}/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Address of the Odos router for given chain and version
         * @description Address of Odos router contract that a swap path must be sent to.
         */
        get: operations["get_router_info_router__version___chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/executor/{version}/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Address of the Odos executor for given chain and version
         * @description Get Odos Executor address for chain
         */
        get: operations["get_executor_info_executor__version___chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/liquidity-sources/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Liquidity sources supported by Odos
         * @description List of all liquidity sources. This list can be used to filter out unwanted or problematic liquidity pools.
         *
         *     Please reach out if there is a liquidity source that we don't support. We pride ourselves in our DeFi coverage.
         */
        get: operations["get_liquidity_sources_info_liquidity_sources__chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/tokens/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Tokens supported by Odos
         * @description All of the supported ERC-20 tokens that Odos uses for swaps for input, output, and routing tokens. These tokens have been manually audited to ensure they will work with Odos. Custom tokens can also be used with Odos, but there is no guarantee Odos will find a valid path.
         *
         *     Please reach out if there is a token that should be added to Odos' natively supported tokens.
         */
        get: operations["get_token_map_info_tokens__chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/current-block/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current block number for Odos on given chain
         * @description Use this endpoint to monitor the current block number Odos is basing its quotes off of.
         */
        get: operations["get_current_block_info_current_block__chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sor/quote/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Odos Quote
         * @description Quote a path for swapping between assets atomically. This can be used programmatically to check for a quoted price of a given trade without needing to wait for an assembled transaction to be created and provided. It can also be used to anonymously check quotes.
         *
         *     ## Request Body
         *
         *     | Parameter | Description | Required |
         *     | --- | ------------- | --- |
         *     | `chainId` | Chain ID to use for quote generation. A list of valid chains can be retrieved from [`info/chains`](#/Info/get_chain_ids_info_chains_get). | Yes |
         *     | `inputTokens` | Input tokens and amounts for quote | Yes |
         *     | `outputTokens`| Output tokens and proportions for quote | Yes |
         *     | `gasPrice` | Gas price to use for path generation. This price directly affects the path computation. If no gas price is provided, our default price from our frontend will be used. | No |
         *     | `userAddr` | Address of the wallet executing the swap. If no wallet is provided, the quote cannot be turned into a path. This can be viewed as informational only. | No |
         *     | `slippageLimitPercent` | Slippage percent to use for checking if the path is valid. Float. Example: to set slippage to 0.5% send `0.5`. If 1% is desired, send `1`. If not provided, slippage will be set `0.3`.  | No |
         *     | `sourceBlacklist` | List of liquidity providers that are not to be used for the swap path. A list of all liquidity providers for a given chain can be retrieved from [`info/liquidity-sources/{chain_id}`](#/Info/liquidity_sources_info_liquidity_sources__chain_id__get) | No |
         *     | `sourceWhitelist` | List of liquidity providers to exclusively use for the swap path. A list of all liquidity providers for a given chain can be retrieved from [`info/liquidity-sources/{chain_id}`](#/Info/liquidity_sources_info_liquidity_sources__chain_id__get) | No |
         *     | `poolBlacklist` | List of pool ids that are not to be used for the swap path | No |
         *     | `pathVizImage` | Return a Base64 encoded SVG of path visualization image for display on web frontends | No |
         *     | `pathVizImageConfig` | Optional customization parameters for generated path viz image | No |
         *     | `disableRFQs` | Disable all exchanges that qualify as RFQs with centralized API dependencies and time-sensitive quotes or potential user address restrictions. Default is true. | No |
         *     | `referralCode` | Code for registering your usage with Odos and receiving partner specific benefits. [Referral Code Documentation](https://docs.odos.xyz/product/sor/v2/referral-code) | No |
         *     | `compact` | Use Odos V2 compact call data for transaction, defaults to `true` | No |
         *     | `likeAsset` | If input and output tokens are all the same asset type (ex: USD stable coins), only route through like assets for decreased slippage. Defaults to `false` | No |
         *     | `simple` | If a less complicated quote and/or a quicker response time is desired, this flag can be set. Defaults to `false` | No |
         *
         *     ### inputTokens
         *
         *     | Parameter | Description | Required |
         *     | --- | --- | --- |
         *     | `tokenAddress` | Address of the token to swap from. This should be a [checksummed address](https://eips.ethereum.org/EIPS/eip-55). | Yes |
         *     | `amount` | Amount of the token in fixed precision. String | Yes |
         *
         *
         *     ### outputTokens
         *
         *     | Parameter | Description | Required |
         *     | --- | --- | --- |
         *     | `tokenAddress` | Address of the token to swap to. This should be a [checksummed address](https://eips.ethereum.org/EIPS/eip-55). | Yes |
         *     | `proportion` | Percent of token to output. For a single swap, this is set to 1. Float. | Yes |
         *
         *     ### pathVizImageConfig
         *
         *     | Parameter | Description | Required |
         *     | --- | ------------- | --- |
         *     | `linkColors` | List of hex codes to generate color spectrum for liquidity sources in path visualization | No |
         *     | `nodeColor` | Hex code for setting the color of token nodes in path visualization | No |
         *     | `nodeTextColor` | Hex code to set the color of token symbol text on token nodes | No |
         *     | `legendTextColor` | Hex code to set the color of the visualization legend text | No |
         *     | `width` | Set a custom width proportion for the visualization | No |
         *     | `height` | Set a custom height proportion for the visualization | No |
         *
         *     #### Example Full Config Response:
         *
         *     ```json
         *     {
         *       "linkColors": ["#123456"],
         *       "nodeColor": "#1BEEF1",
         *       "nodeTextColor": "#FFFFFF",
         *       "legendTextColor": "#000000",
         *       "width": 1200,
         *       "height": 800
         *     }
         *     ```
         *
         *     #### Basic integration:
         *
         *     Set the `src` attribute of an `<img />` HTML tag to the `pathVizImage` text field of the quote response
         *
         *
         *     ## Response Body
         *
         *     | Parameter | Description |
         *     | --- | --- |
         *     | `deprecated` | If the endpoint or any part of the request is deprecated, this field will be populated with a message. This field is omitted if there is nothing to notify on. |
         *     | `pathId` | ID of the path used for asking for an assembled quote |
         *     | `blockNumber` | Block number the quote was generated for |
         *     | `gasEstimate` | A very naive gas estimate |
         *     | `gasEstimateValue` | USD Value of the `gasEstimate` |
         *     | `dataGasEstimate` | Used for Layer 2 chains |
         *     | `gweiPerGas` | Amount of gWei per gas unit |
         *     | `inTokens` | A list of token addresses and amounts |
         *     | `inAmounts` | A list of input token amounts |
         *     | `outTokens` | A list of token addresses and amounts |
         *     | `outAmounts` | A list of output token amounts |
         *     | `netOutValue` | USD value of the sum of the output tokens after gas |
         *     | `outValues` | A list of the output values of the given output tokens. In the same order as the `outputTokens` list |
         *     | `priceImpact` | Percent decrease in the realized price of the path from the initial price of the path before the swap is executed. |
         *     | `percentDiff` | Percent difference between the value of all input tokens and the value of all output tokens (as determined by the Odos pricing service) |
         *     | `partnerFeePercent` | Percent fee taken by partner referral code given. Fee is already deducted from quote |
         *     | `pathVizImage` | Base64 encoded image ready to be used within a UI |
         */
        post: operations["quote_sor_quote_v2_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sor/quote/v2/zap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Odos Zap Quote
         * @description Quote a path for zapping into or out of liquidity positions atomically. Input tokens can be both regular ERC-20 tokens and liquidity pool tokens. Outputs can be regular ERC-20 tokens or liquidity pool tokens.
         *
         *     ## Request Body
         *
         *     | Parameter | Description | Required |
         *     | --- | ------------- | --- |
         *     | `chainId` | Chain ID to use for quote generation. A list of valid chains can be retrieved from [`info/chains`](#/Info/get_chain_ids_info_chains_get). | Yes |
         *     | `inputTokens` | Input tokens and amounts for quote | Yes |
         *     | `outputTokens`| Output tokens and proportions for quote | Yes |
         *     | `gasPrice` | Gas price to use for path generation. This price directly affects the path computation. If no gas price is provided, our default price from our frontend will be used. | No |
         *     | `userAddr` | Address of the wallet executing the swap. If no wallet is provided, the quote cannot be turned into a path. This can be viewed as informational only. | No |
         *     | `slippageLimitPercent` | Slippage percent to use for checking if the path is valid. Float. Example: to set slippage to 0.5% send `0.5`. If 1% is desired, send `1`. If not provided, slippage will be set `0.3`.  | No |
         *     | `sourceBlacklist` | List of liquidity providers that are not to be used for the swap path. A list of all liquidity providers for a given chain can be retrieved from [`info/liquidity-sources/{chain_id}`](#/Info/liquidity_sources_info_liquidity_sources__chain_id__get) | No |
         *     | `sourceWhitelist` | List of liquidity providers to exclusively use for the swap path. A list of all liquidity providers for a given chain can be retrieved from [`info/liquidity-sources/{chain_id}`](#/Info/liquidity_sources_info_liquidity_sources__chain_id__get) | No |
         *     | `poolBlacklist` | List of pool ids that are not to be used for the swap path | No |
         *     | `pathVizImage` | Return a Base64 encoded SVG of path visualization image for display on web frontends | No |
         *     | `pathVizImageConfig` | Optional customization parameters for generated path viz image | No |
         *     | `disableRFQs` | Disable all exchanges that qualify as RFQs with centralized API dependencies and time-sensitive quotes or potential user address restrictions. Default is true. | No |
         *     | `referralCode` | Code for registering your usage with Odos and receiving partner specific benefits. [Referral Code Documentation](https://docs.odos.xyz/product/sor/v2/referral-code) | No |
         *     | `compact` | Use Odos V2 compact call data for transaction, defaults to `true` | No |
         *     | `likeAsset` | If input and output tokens are all the same asset type (ex: USD stable coins), only route through like assets for decreased slippage. Defaults to `false` | No |
         *     | `simple` | If a less complicated quote and/or a quicker response time is desired, this flag can be set. Defaults to `false` | No |
         *
         *     ### inputTokens
         *
         *     | Parameter | Description | Required |
         *     | --- | --- | --- |
         *     | `tokenAddress` | Address of the token to swap from. This should be a [checksummed address](https://eips.ethereum.org/EIPS/eip-55). | Yes |
         *     | `amount` | Amount of the token in fixed precision. String | Yes |
         *
         *
         *     ### outputTokens
         *
         *     | Parameter | Description | Required |
         *     | --- | --- | --- |
         *     | `tokenAddress` | Address of the token to swap to. This should be a [checksummed address](https://eips.ethereum.org/EIPS/eip-55). | Yes |
         *     | `proportion` | Percent of token to output. For a single swap, this is set to 1. Float. | Yes |
         *
         *     ### pathVizImageConfig
         *
         *     | Parameter | Description | Required |
         *     | --- | ------------- | --- |
         *     | `linkColors` | List of hex codes to generate color spectrum for liquidity sources in path visualization | No |
         *     | `nodeColor` | Hex code for setting the color of token nodes in path visualization | No |
         *     | `nodeTextColor` | Hex code to set the color of token symbol text on token nodes | No |
         *     | `legendTextColor` | Hex code to set the color of the visualization legend text | No |
         *     | `width` | Set a custom width proportion for the visualization | No |
         *     | `height` | Set a custom height proportion for the visualization | No |
         *
         *     #### Example Full Config Response:
         *
         *     ```json
         *     {
         *       "linkColors": ["#123456"],
         *       "nodeColor": "#1BEEF1",
         *       "nodeTextColor": "#FFFFFF",
         *       "legendTextColor": "#000000",
         *       "width": 1200,
         *       "height": 800
         *     }
         *     ```
         *
         *     #### Basic integration:
         *
         *     Set the `src` attribute of an `<img />` HTML tag to the `pathVizImage` text field of the quote response
         *
         *
         *     ## Response Body
         *
         *     | Parameter | Description |
         *     | --- | --- |
         *     | `deprecated` | If the endpoint or any part of the request is deprecated, this field will be populated with a message. This field is omitted if there is nothing to notify on. |
         *     | `pathId` | ID of the path used for asking for an assembled quote |
         *     | `blockNumber` | Block number the quote was generated for |
         *     | `gasEstimate` | A very naive gas estimate |
         *     | `gasEstimateValue` | USD Value of the `gasEstimate` |
         *     | `dataGasEstimate` | Used for Layer 2 chains |
         *     | `gweiPerGas` | Amount of gWei per gas unit |
         *     | `inTokens` | A list of token addresses and amounts |
         *     | `inAmounts` | A list of input token amounts |
         *     | `outTokens` | A list of token addresses and amounts |
         *     | `outAmounts` | A list of output token amounts |
         *     | `netOutValue` | USD value of the sum of the output tokens after gas |
         *     | `outValues` | A list of the output values of the given output tokens. In the same order as the `outputTokens` list |
         *     | `priceImpact` | Percent decrease in the realized price of the path from the initial price of the path before the swap is executed. |
         *     | `percentDiff` | Percent difference between the value of all input tokens and the value of all output tokens (as determined by the Odos pricing service) |
         *     | `partnerFeePercent` | Percent fee taken by partner referral code given. Fee is already deducted from quote |
         *     | `pathVizImage` | Base64 encoded image ready to be used within a UI |
         */
        post: operations["quote_zap_sor_quote_v2_zap_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sor/assemble": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assemble Odos quote into transaction
         * @description Provide valid call data for a given quoted path. This is called after calling the `sor/quote` endpoint and receiving back a quote and `pathID`.
         *
         *     A quote only lasts for 60 seconds. If it is not assembled in that time, it will not be available to assemble, and the path will need to be quoted again.
         *
         *     Use the information provided by this endpoint directly. Do not try to modify the call data. You will make a mistake and you will end up losing money. **We will not provide support for users modifying the call data provided by our API.** The data the API provides is directly able to be executed on chain.
         *
         *     ## Request Body
         *
         *     | Parameter | Description | Required |
         *     | --- | ------- | --- |
         *     | `userAddr` | Address of the user who requested the quote | Yes |
         *     | `pathId` | ID of the Path returned from the `sor/quote/{version}` endpoint | Yes |
         *     | `simulate` | Simulate the transaction to make sure it can actually be executed. This increases the response time to receive transaction data. Defaults to False. | No |
         *     | `receiver` | Optionally, specify a different receiver address for the transaction output, default receiver is `userAddr` | No |
         *
         *     ## Response Body
         *
         *     | Parameter | Description |
         *     | --- | --- |
         *     | `deprecated` | If the endpoint or any part of the request is deprecated, this field will be populated with a message. This field is omitted if there is nothing to notify on. |
         *     | `blockNumber` | Block number the quote was generated for |
         *     | `gasEstimate` | A very naive gas estimate |
         *     | `gasEstimateValue` | USD Value of the `gasEstimate` |
         *     | `inputTokens` | List of input token addresses and amounts |
         *     | `outputTokens` | List of output token addresses and amounts |
         *     | `netOutValue` | USD value of the sum of the output tokens after gas |
         *     | `outValues` | A list of the output values of the given output tokens. In the same order as the `outputTokens` list |
         *     | `transaction` | Transaction data needed for execution |
         *     | `simulation` | Simulation results |
         *
         *     ### Transaction
         *
         *     This structure can be signed by a wallet and be executed against the Odos router.
         *
         *     In the smart contract that makes the swap, the `data` field of the transaction given in the response can be used in a low level call from another contract:
         *
         *     ```solidity
         *     (bool success, bytes memory result) = router.call{value: $ethInput}(data)
         *     ```
         *
         *     Where `$ethInput` is `0` unless the native coin of the network is an input, in which case the value should be set to the corresponding path input amount. Approvals for ERC20 inputs should be made to the router address prior to the call. The address of the router can be found in the `to` field of the response, as well as from the `/info/router/{version}/{chain_id}` endpoint.
         *
         *     | Parameter | Description |
         *     | --- | --- |
         *     | `chainId` | The chain ID for the path to execute one |
         *     | `gas` | Suggested gas limit. Either 2X the naive gas estimate or 10% more than the simulated gas estimate |
         *     | `gasPrice` | Gas price used to calculate the path |
         *     | `value` | Input amount of gas token. 0 if the gas token is not one of the inputs |
         *     | `to` | Odos router address to be used for the transaction |
         *     | `from` | Source of the executed transaction |
         *     | `data` | Call data for the Odos router. This is the payload used by our executor contracts to execute the necessary DEX swaps. |
         *     | `nonce` | The standard ETH nonce |
         *
         *
         *     ### Simulation
         *
         *     This the result of the simulation
         *
         *     | Parameter | Description |
         *     | --- | --- |
         *     | `isSuccess` | If the transaction reverted or not |
         *     | `amountsOut` | Amounts out when the path was simulated |
         *     | `simGasUsed` | Gas used by the simulation |
         *     | `gasEstimate` | Estimate from a `eth_estimateGas` RPC call for the path |
         *     | `simulationError` | If a simulation error occurs, it will show up here. |
         */
        post: operations["assemble_sor_assemble_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of available currencies
         * @description Get list of available currencies and exchange rates for token prices
         */
        get: operations["get_currencies_pricing_currencies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/token/{chain_id}/{token_addr}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single token price
         * @description Get the token price info for a given chain and address. Price will be null if asset is valid but price is not available
         */
        get: operations["get_token_price_pricing_token__chain_id___token_addr__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing/token/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all chain whitelisted token prices, unless list is specified
         * @description Get all of the whitelisted token prices on an Odos supported chain
         */
        get: operations["get_chain_token_prices_pricing_token__chain_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AssemblePathRequest
         * @description Assemble Path Request Schema
         */
        AssemblePathRequest: {
            /** Useraddr */
            userAddr: string;
            /** Pathid */
            pathId: string;
            /**
             * Simulate
             * @default false
             */
            simulate: boolean | null;
            /** Receiver */
            receiver?: string | null;
        };
        /**
         * ChainTokenPriceMap
         * @description All token prices for a given chain
         *
         *     Attributes:
         *         currencyId (str): price service id of the currency
         *         tokenPrices (dict): Token and price
         */
        ChainTokenPriceMap: {
            /** Deprecated */
            deprecated?: string | null;
            /** Currencyid */
            currencyId: string;
            /** Tokenprices */
            tokenPrices: {
                [key: string]: (number | null) | undefined;
            };
        };
        /**
         * ContractInfo
         * @description Odos Contract Info Schema
         */
        ContractInfo: {
            /** Deprecated */
            deprecated?: string | null;
            /** Chainid */
            chainId: number;
            /** Routeraddress */
            routerAddress: string;
            /** Executoraddress */
            executorAddress: string;
            /** Routerabi */
            routerAbi: Record<string, never> | null;
            /** Erc20Abi */
            erc20Abi: Record<string, never> | null;
        };
        /**
         * CurrencyInfo
         * @description Schema for supported currency info
         *
         *     Attributes:TokenPrice
         *         id (str): price service id of the currency
         *         name (str): name of currency corresponding to ID
         */
        CurrencyInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
        };
        /**
         * CurrencyInfoList
         * @description Schema for list of supported currency info
         *
         *     Attributes:
         *         currencies (List[CurrencyInfo]): list of supported currency info entries
         */
        CurrencyInfoList: {
            /** Deprecated */
            deprecated?: string | null;
            /** Currencies */
            currencies: components["schemas"]["CurrencyInfo"][];
        };
        /**
         * CurrentBlockNumber
         * @description Schema for current block number response
         *
         *     Attributes:
         *         blockNumber (int): current odos block number
         */
        CurrentBlockNumber: {
            /** Deprecated */
            deprecated?: string | null;
            /** Blocknumber */
            blockNumber: number;
        };
        /**
         * ExecutorAddress
         * @description Odos Executor Address schema
         */
        ExecutorAddress: {
            /** Deprecated */
            deprecated?: string | null;
            /**
             * Address
             * @description Address of Odos Executor
             */
            address: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LiquiditySources
         * @description Odos liquidity sources schema
         */
        LiquiditySources: {
            /** Deprecated */
            deprecated?: string | null;
            /** Sources */
            sources: string[];
        };
        /**
         * OdosApiVersion
         * @description Odos API supported versions
         * @constant
         * @enum {string}
         */
        OdosApiVersion: "v2";
        /**
         * PathRequestV2
         * @description Public facing path request v2 schema
         */
        PathRequestV2: {
            /** Deprecated */
            deprecated?: string | null;
            /**
             * Chainid
             * @description Chain ID to request path for
             */
            chainId: number;
            /**
             * Inputtokens
             * @description Input tokens and amounts for quote
             */
            inputTokens: components["schemas"]["TokenAmount"][];
            /**
             * Outputtokens
             * @description Output tokens and proportions for quote
             */
            outputTokens: components["schemas"]["TokenProportion"][];
            /**
             * Gasprice
             * @description Gas Price
             */
            gasPrice?: number | null;
            /**
             * Useraddr
             * @description Address of wallet to use to generate transaction
             * @default 0x47E2D28169738039755586743E2dfCF3bd643f86
             */
            userAddr: string | null;
            /**
             * Slippagelimitpercent
             * @description Slippage to use for checking the path is valid
             * @default 0.3
             */
            slippageLimitPercent: number | null;
            /**
             * Sourceblacklist
             * @description List of liquidity providers that are not to be used for the swap path.
             */
            sourceBlacklist?: string[] | null;
            /**
             * Sourcewhitelist
             * @description List of liquidity providers to exclusively use for the swap path.
             */
            sourceWhitelist?: string[] | null;
            /**
             * Poolblacklist
             * @description List of pool addresses to exclude from swap path consideration
             */
            poolBlacklist?: string[] | null;
            /**
             * Pathviz
             * @default false
             */
            pathViz: boolean | null;
            /**
             * Pathvizimage
             * @default false
             */
            pathVizImage: boolean | null;
            pathVizImageConfig?: components["schemas"]["PathVizImageConfig"] | null;
            /**
             * Disablerfqs
             * @description Flag to disable all off-chain RFQs from order routing
             * @default true
             */
            disableRFQs: boolean | null;
            /**
             * Referralcode
             * @default 0
             */
            referralCode: number | null;
            /**
             * Compact
             * @default true
             */
            compact: boolean | null;
            /**
             * Likeasset
             * @default false
             */
            likeAsset: boolean | null;
            /**
             * Simple
             * @default false
             */
            simple: boolean | null;
        };
        /**
         * PathResponse
         * @description Assembled Path Transaction Response including quote, transaction, and simulation data
         *
         *     Attributes:
         *         blockNumber (int): block number of transaction quote
         *         gasEstimate (int): gas estimate for transaction quote
         *         gasEstimateValue (float): gas estimate value for transaction quote in gwei
         *         inputTokens (List[TokenAmount]): list of input token amounts and input values
         *         outputTokens (List[TokenAmount]): list of output token amounts and output values
         *         netOutValue (float): new out value of transaction from quote
         *         outValues (List[str]) out values from transaction quote
         *         transaction (Optional[Transaction]): assembled transaction data for quote
         *         simulation (Optional[Simulation]): simulation output data if enabled
         *         pathVizImage (Optional[str]): path viz image if requested
         */
        PathResponse: {
            /** Deprecated */
            deprecated?: string | null;
            /** Blocknumber */
            blockNumber: number;
            /** Gasestimate */
            gasEstimate: number;
            /** Gasestimatevalue */
            gasEstimateValue: number;
            /** Inputtokens */
            inputTokens: components["schemas"]["TokenAmount"][];
            /** Outputtokens */
            outputTokens: components["schemas"]["TokenAmount"][];
            /** Netoutvalue */
            netOutValue: number;
            /** Outvalues */
            outValues: string[];
            transaction: components["schemas"]["Transaction"] | null;
            simulation: components["schemas"]["Simulation"] | null;
        };
        /**
         * PathVizImageConfig
         * @description Schema for path viz image config
         */
        PathVizImageConfig: {
            /** Linkcolors */
            linkColors?: string[] | null;
            /** Nodecolor */
            nodeColor?: string | null;
            /** Nodetextcolor */
            nodeTextColor?: string | null;
            /** Legendtextcolor */
            legendTextColor?: string | null;
            /** Width */
            width?: number | null;
            /** Height */
            height?: number | null;
            [key: string]: unknown;
        };
        /**
         * QuoteResponse
         * @description Quote response schema
         */
        QuoteResponse: {
            /** Deprecated */
            deprecated?: string | null;
            /** Intokens */
            inTokens: string[];
            /** Outtokens */
            outTokens: string[];
            /** Inamounts */
            inAmounts: string[];
            /** Outamounts */
            outAmounts: string[];
            /** Gasestimate */
            gasEstimate: number;
            /** Datagasestimate */
            dataGasEstimate: number;
            /** Gweipergas */
            gweiPerGas: number;
            /** Gasestimatevalue */
            gasEstimateValue: number;
            /** Invalues */
            inValues: number[];
            /** Outvalues */
            outValues: number[];
            /** Netoutvalue */
            netOutValue: number;
            /** Priceimpact */
            priceImpact?: number | null;
            /** Percentdiff */
            percentDiff: number;
            /**
             * Partnerfeepercent
             * @default 0
             */
            partnerFeePercent: number;
            /** Pathid */
            pathId?: string | null;
            /** Pathviz */
            pathViz?: Record<string, never> | null;
            /** Pathvizimage */
            pathVizImage?: string | null;
            /** Blocknumber */
            blockNumber: number;
        };
        /**
         * RouterAddress
         * @description Odos Router Address schema
         */
        RouterAddress: {
            /** Deprecated */
            deprecated?: string | null;
            /**
             * Address
             * @description Address of Odos Router
             */
            address: string;
        };
        /**
         * Simulation
         * @description Simulation data schema
         *
         *     Attributes:
         *         is_success (bool): true if no errors were detected during simulation
         *         amountsOut (List[int]): list of amounts out from simulation
         *         gasEstimate (int): on-chain estimateGas raw response value
         *         simulationError (Optional[SimulationError]): simulation error data (if error)
         */
        Simulation: {
            /** Issuccess */
            isSuccess: boolean;
            /** Amountsout */
            amountsOut: number[];
            /** Gasestimate */
            gasEstimate: number;
            simulationError: components["schemas"]["SimulationError"] | null;
        };
        /**
         * SimulationError
         * @description Simulation error schema
         *
         *     Attributes:
         *         type (str): error type
         *         errorMessage (str): content of the simulation error message
         */
        SimulationError: {
            /** Type */
            type: string;
            /** Errormessage */
            errorMessage: string;
        };
        /**
         * SupportedChains
         * @description Supported Chains schema
         */
        SupportedChains: {
            /** Deprecated */
            deprecated?: string | null;
            /** Chains */
            chains: number[];
        };
        /**
         * Token
         * @description Token Schema
         */
        Token: {
            /** Name */
            name: string;
            /** Symbol */
            symbol: string;
            /** Decimals */
            decimals: number;
            /** Assetid */
            assetId: string;
            /** Assettype */
            assetType: string;
            /** Protocolid */
            protocolId: string | null;
            /** Isrebasing */
            isRebasing: boolean;
        };
        /**
         * TokenAmount
         * @description Quote token input amount schema
         */
        TokenAmount: {
            /**
             * Tokenaddress
             * @description Token contract address
             */
            tokenAddress: string;
            /**
             * Amount
             * @description Amount of token to swap
             */
            amount: string;
        };
        /**
         * TokenMap
         * @description Token Map Schema
         */
        TokenMap: {
            /** Deprecated */
            deprecated?: string | null;
            /** Tokenmap */
            tokenMap: {
                [key: string]: components["schemas"]["Token"] | undefined;
            };
        };
        /**
         * TokenPrice
         * @description Schema for basic token price structure
         *
         *     Attributes:
         *         currencyId (str): price service id of the currency
         *         price (Optional[float]): fiat price of asset if it is available
         */
        TokenPrice: {
            /** Deprecated */
            deprecated?: string | null;
            /** Currencyid */
            currencyId: string;
            /** Price */
            price: number | null;
        };
        /**
         * TokenProportion
         * @description Quote token output proportion schema
         */
        TokenProportion: {
            /**
             * Tokenaddress
             * @description Token contract address
             */
            tokenAddress: string;
            /**
             * Proportion
             * @description Proportion of token
             * @default 1
             */
            proportion: number;
        };
        /**
         * Transaction
         * @description Assembled Transaction Schema
         *
         *     Attributes:
         *         gas (int): txn gas amount
         *         gasPrice (int): txn gas price in gwei
         *         value (str): value of the transaction
         *         to (str): txn to address
         *         from_ (str): txn from address
         *         data (str): txn bytecode to execute
         *         nonce (int): current user nonce
         *         chainId (int): id of the chain transaction was assembled for
         */
        Transaction: {
            /** Gas */
            gas: number;
            /** Gasprice */
            gasPrice: number;
            /** Value */
            value: string;
            /** To */
            to: string;
            /** From */
            from: string;
            /** Data */
            data: string;
            /** Nonce */
            nonce: number;
            /** Chainid */
            chainId: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_chain_ids_info_chains_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupportedChains"];
                };
            };
        };
    };
    get_contract_info_info_contract_info__version___chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                version: components["schemas"]["OdosApiVersion"];
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_router_info_router__version___chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                version: components["schemas"]["OdosApiVersion"];
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouterAddress"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_executor_info_executor__version___chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                version: components["schemas"]["OdosApiVersion"];
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutorAddress"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_liquidity_sources_info_liquidity_sources__chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LiquiditySources"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_token_map_info_tokens__chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenMap"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_block_info_current_block__chain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentBlockNumber"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    quote_sor_quote_v2_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathRequestV2"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteResponse"];
                };
            };
            /** @description Improperly formatted inputs */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Unexpected downstream error */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    quote_zap_sor_quote_v2_zap_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathRequestV2"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteResponse"];
                };
            };
            /** @description Improperly formatted inputs */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Unexpected downstream error */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assemble_sor_assemble_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssemblePathRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PathResponse"];
                };
            };
            /** @description Improperly formatted inputs */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Unexpected downstream error */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_currencies_pricing_currencies_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrencyInfoList"];
                };
            };
        };
    };
    get_token_price_pricing_token__chain_id___token_addr__get: {
        parameters: {
            query?: {
                currencyId?: string | null;
            };
            header?: never;
            path: {
                chain_id: number;
                token_addr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenPrice"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chain_token_prices_pricing_token__chain_id__get: {
        parameters: {
            query?: {
                token_addresses?: string[];
                currencyId?: string | null;
            };
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChainTokenPriceMap"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
