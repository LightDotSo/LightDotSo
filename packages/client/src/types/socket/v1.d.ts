/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v2/gas-price": {
    get: operations["AppController_getGasPrice"];
  };
  "/v2/token-price": {
    get: operations["AppController_getTokenPrice"];
  };
  "/v2/build-tx": {
    get: operations["AppController_getSingleTxFromQuery"];
    post: operations["AppController_getSingleTx"];
  };
  "/v2/bridge-status": {
    get: operations["AppController_getBridgingStatus"];
  };
  "/v2/tx-receipt": {
    get: operations["AppController_getTransactionReceipt"];
  };
  "/v2/quote": {
    get: operations["QuoteController_getQuote"];
  };
  "/v2/supported/bridges": {
    get: operations["SupportedController_getAllBridges"];
  };
  "/v2/supported/chains": {
    get: operations["SupportedController_getAllSupportedRoutes"];
  };
  "/v2/supported/token-support": {
    get: operations["SupportedController_getIfTokenIsSupported"];
  };
  "/v2/approval/check-allowance": {
    get: operations["ApproveController_fetchApprovals"];
  };
  "/v2/approval/build-tx": {
    get: operations["ApproveController_fetchApprovalsCalldata"];
  };
  "/v2/balances": {
    get: operations["BalancesController_getBalances"];
  };
  "/v2/balances/token-balance": {
    get: operations["BalancesController_getBalance"];
  };
  "/v2/route/start": {
    /**
     * @description Function that takes in a route and starts the selected route.
     *   Function is responsible for
     *   - Saving the selected route to bridge tokens from one chain to another.
     *   - Saving the fromChain, toChain, and fromAsssetAddress and toAssetAddress
     *   - Returns the Active Route Id, Current Tx, Total number of txs, txType
     */
    post: operations["ActiveRoutesController_startActiveRoute"];
  };
  "/v2/route/active-routes": {
    get: operations["ActiveRoutesController_getActiveRoutes"];
  };
  "/v2/route/active-routes/users": {
    get: operations["ActiveRoutesController_getActiveRoutesForUser"];
  };
  "/v2/route/build-next-tx": {
    get: operations["ActiveRoutesController_nextTx"];
  };
  "/v2/route/prepare": {
    get: operations["ActiveRoutesController_getActiveRouteStatus"];
  };
  "/v2/token-lists/from-token-list": {
    get: operations["TokenListController_getfromTokenList"];
  };
  "/v2/token-lists/to-token-list": {
    get: operations["TokenListController_getToTokenList"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ResponseDTO: {
      ok: boolean;
    };
    GasPriceResponseDTO: {
      success: boolean;
      result: {
        chainId?: number;
        txType?: number;
        fast?: {
          gasPrice?: number;
          estimatedSeconds?: number;
        };
        normal?: {
          gasPrice?: number;
          estimatedSeconds?: number;
        };
        slow?: {
          gasPrice?: number;
          estimatedSeconds?: number;
        };
      };
    };
    TokenPriceResponseDTO: {
      success: boolean;
      result: {
        chainId?: number;
        tokenAddress?: string;
        tokenPrice?: number;
        currency?: string;
      };
    };
    ChainGasBalances: Record<string, never>;
    MinGasBalances: Record<string, never>;
    Route: {
      /**
       * @description Unique id for each route.
       * @example 6a4c26b6-b008-431d-a37c-028e0b30482b
       */
      routeId: string;
      /**
       * @description Sending token amount.
       * @example 100000000000000000000
       */
      fromAmount: string;
      chainGasBalances: components["schemas"]["ChainGasBalances"];
      minimumGasBalances: components["schemas"]["MinGasBalances"];
      /**
       * @description Approximate receiving token amount.
       * @example 100000000000000000000
       */
      toAmount: string;
      /**
       * @description Array of bridges used in the route
       * @example [anyswap-router-v4]
       */
      usedBridgeNames: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
      /**
       * @description Total number of transactions for the route.
       * @example 3
       */
      totalUserTx: number;
      /**
       * @description Combined USD gas fees for all transactions in the route.
       * @example 125.4
       */
      totalGasFeesInUsd: number;
      /**
       * @description Address of user receiving the amount.
       * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
       */
      recipient: string;
      /**
       * @description Address of user making the transactions.
       * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
       */
      sender: string;
      /** @description Array of user transactions. */
      userTxs: Record<string, never>[];
      /**
       * @description Estimate of total time in seconds, excluding the transaction time.
       * @example 600
       */
      serviceTime: number;
      /**
       * @description Estimate of max time to exit from the chain in seconds.
       * @example 600
       */
      maxServiceTime: number;
    };
    TokenAsset: {
      /**
       * @description Name of token.
       * @example USD Coin
       */
      name?: string;
      /**
       * @description Address of token.
       * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
       */
      address: string;
      /**
       * @description URL for icon of token.
       * @example https://maticnetwork.github.io/polygon-token-assets/assets/usdc.svg
       */
      icon?: string;
      /**
       * @description Decimal used for token.
       * @example 6
       */
      decimals?: number;
      /**
       * @description Symbol of token.
       * @example USDC
       */
      symbol: string;
      /**
       * @description Chain id of the token
       * @example 137
       * @enum {string}
       */
      chainId: "ETHEREUM" | "OPTIMISM" | "BSC" | "XDAI" | "POLYGON" | "FANTOM" | "BOBA" | "ARBITRUM" | "AVALANCHE" | "AURORA";
      /**
       * @description URL for icon of token.
       * @example https://maticnetwork.github.io/polygon-token-assets/assets/usdc.svg
       */
      logoURI?: string;
      /**
       * @description Unique Id over all chains
       * @example DAI
       */
      chainAgnosticId?: string;
    };
    GasFee: {
      /**
       * @description Approx Gas Limit of the transaction.
       * @example 250000
       */
      gasLimit: number;
      /**
       * @description USD value of gas fees at current gas price.
       * @example 125.4
       */
      feesInUsd: number;
      /** @description Gas token details. */
      asset: components["schemas"]["TokenAsset"];
      /** @description Estimated Amount of gas token will be used */
      gasAmount: string;
    };
    RefuelData: {
      fromAmount: string;
      toAmount: string;
      gasFees: components["schemas"]["GasFee"];
      recipient: string;
      serviceTime: number;
      fromAsset: components["schemas"]["TokenAsset"];
      toAsset: components["schemas"]["TokenAsset"];
      fromChainId: number;
      toChainId: number;
    };
    SingleTxDTO: {
      route: components["schemas"]["Route"];
      refuel: components["schemas"]["RefuelData"];
    };
    ApprovalData: {
      /**
       * @description Minimum amount of approval needed.
       * @example 10000000000000000
       */
      minimumApprovalAmount: string;
      /**
       * @description Address of token for which approval is required.
       * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
       */
      approvalTokenAddress: string;
      /**
       * @description Contract address that needs approval.
       * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
       */
      allowanceTarget: string;
      /**
       * @description Address of owner.
       * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
       */
      owner: string;
    };
    SingleTxResponse: {
      /**
       * @description Type of user transaction.
       * @example dex-swap
       * @enum {string}
       */
      userTxType: "approve" | "fund-movr" | "claim" | "dex-swap" | "sign";
      /**
       * @description Address to which transaction has to be sent.
       * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
       */
      txTarget: string;
      /**
       * @description Id of chain where transaction has to be sent.
       * @example 137
       * @enum {string}
       */
      chainId: "ETHEREUM" | "OPTIMISM" | "BSC" | "XDAI" | "POLYGON" | "FANTOM" | "BOBA" | "ARBITRUM" | "AVALANCHE" | "AURORA";
      /**
       * @description Calldata for transaction.
       * @example 0xasjajfbalkfajfalalglaglagbalga
       */
      txData: string;
      /**
       * @description Type of transaction.
       * @example eth_sendTransaction
       * @enum {string}
       */
      txType: "eth_sendTransaction" | "eth_signMessage";
      /**
       * @description Native token amount to be sent with transaction.
       * @example 10000000000000000
       */
      value: string;
      /**
       * @description Total number of transactions in Active Route.
       * @example 2
       */
      totalUserTx: number;
      approvalData: components["schemas"]["ApprovalData"];
    };
    SingleTxOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      status: boolean;
      result: components["schemas"]["SingleTxResponse"];
    };
    BridgeStatusResponse: {
      /**
       * @description Source Transaction.
       * @example 0xa6574b28b36dceb147a7ff3ca06839f1f0835bcfd5f0409406fbc524412e281a
       */
      sourceTx: string;
      /**
       * @description Status of source transaction while bridging.
       * @example COMPLETED
       * @enum {string}
       */
      sourceTxStatus: "PENDING" | "COMPLETED";
      /**
       * @description Destination Transaction hash.
       * @example 0xa6574b28b36dceb147a7ff3ca06839f1f0835bcfd5f0409406fbc524412e281a
       */
      destinationTransactionHash: string;
      /**
       * @description Status of destination transaction while bridging.
       * @example COMPLETED
       * @enum {string}
       */
      destinationTxStatus: "PENDING" | "COMPLETED";
      /**
       * @description Source Chain Id
       * @example 1
       */
      fromChainId: number;
      /**
       * @description Destination Chain Id.
       * @example 137
       */
      toChainId: number;
    };
    BridgeStatusResponseDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      success: boolean;
      result: components["schemas"]["BridgeStatusResponse"];
    };
    TransactionReceiptResponseDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      success: boolean;
      result: Record<string, never>;
    };
    QuoteOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      success: boolean;
      result: {
        routes?: components["schemas"]["Route"][];
        fromChainId?: number;
        fromAsset?: components["schemas"]["TokenAsset"];
        toChainId?: number;
        toAsset?: components["schemas"]["TokenAsset"];
        refuel?: components["schemas"]["RefuelData"] | null;
      };
    };
    BridgeDetails: {
      /**
       * @description Name of bridge.
       * @example anyswap-router-v4
       * @enum {string}
       */
      bridgeName: "polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge";
      /**
       * @description URL for icon of bridge.
       * @example https://bridgelogos.s3.ap-south-1.amazonaws.com/anyswap.png
       */
      icon?: string;
      /**
       * @description Approx time for bridging in seconds.
       * @example 600
       */
      serviceTime: number;
      /**
       * @description Display name of bridge.
       * @example Anyswap
       */
      displayName: string;
    };
    SupportedBridgesOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      success: boolean;
      result: components["schemas"]["BridgeDetails"][];
    };
    GasTokenDetails: {
      /**
       * @description Address of gas token.
       * @example 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
       */
      address: string;
      /**
       * @description URL for icon of gas token.
       * @example https://maticnetwork.github.io/polygon-token-assets/assets/matic.svg
       */
      icon: string;
      /**
       * @description Name of gas token.
       * @example Matic
       */
      name: string;
      /**
       * @description Symbol of gas token.
       * @example MATIC
       */
      symbol: string;
      /**
       * @description Decimals of gas token.
       * @example 18
       */
      decimals: number;
      /**
       * @description Minimum amount to be left for gas while using max amount.
       * @example 100000000000000000
       */
      minNativeCurrencyForGas: string;
    };
    ChainDetails: {
      /**
       * @description Id of chain.
       * @example 137
       */
      chainId: number;
      /**
       * @description Name of chain.
       * @example Polygon
       */
      name: string;
      /**
       * @description URL for icon of chain.
       * @example https://movricons.s3.ap-south-1.amazonaws.com/Matic.svg
       */
      icon: string;
      /**
       * @description Flag indicating whether the chain is L1.
       * @example false
       */
      isL1: boolean;
      /**
       * @description Flag indicating whether sending of tokens is supported from chain.
       * @example true
       */
      sendingEnabled: boolean;
      /**
       * @description Flag indicating whether receiving of tokens is supported to chain.
       * @example true
       */
      receivingEnabled: boolean;
      refuel: {
        sendingEnabled?: boolean;
        receivingEnabled?: boolean;
      };
      currency: components["schemas"]["GasTokenDetails"];
      rpcs: string[];
      explorers: string[];
    };
    SupportedChainsOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      success: boolean;
      result: components["schemas"]["ChainDetails"][];
    };
    ApprovalOutputDTO: {
      success: boolean;
      result: {
        value?: string;
        tokenAddress?: string;
      };
    };
    ApprovalTxOutputDTO: {
      success: boolean;
      result: {
        data?: string;
        to?: string;
        from?: string;
      };
    };
    BalanceResult: {
      chainId: number;
      address: string;
      name: string;
      symbol: string;
      decimals: number;
      price: number;
      amount: number;
      currency: string;
    };
    Balance: {
      success: boolean;
      result: components["schemas"]["BalanceResult"][];
    };
    TokenBalanceReponseDTO: {
      success: boolean;
      result: {
        chainId?: number;
        tokenAddress?: string;
        userAddress?: string;
        balance?: string;
        decimals?: number;
        icon?: string;
        symbol?: string;
        name?: string;
      };
    };
    StartActiveRouteInputDTO: {
      /**
       * @description Chain id of source chain.
       * @example 137
       * @enum {string}
       */
      fromChainId: "ETHEREUM" | "OPTIMISM" | "BSC" | "XDAI" | "POLYGON" | "FANTOM" | "BOBA" | "ARBITRUM" | "AVALANCHE" | "AURORA";
      /**
       * @description Chain id of destination chain.
       * @example 56
       * @enum {string}
       */
      toChainId: "ETHEREUM" | "OPTIMISM" | "BSC" | "XDAI" | "POLYGON" | "FANTOM" | "BOBA" | "ARBITRUM" | "AVALANCHE" | "AURORA";
      /**
       * @description Token address on source chain.
       * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
       */
      fromAssetAddress: string;
      /**
       * @description Token address on destination chain.
       * @example 0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3
       */
      toAssetAddress: string;
      /**
       * @description Include the tx details for the first user transaction. If true it will return the txData txType etc.
       * If false, it will only return the active route Id of the selected route.
       * @example true
       */
      includeFirstTxDetails?: boolean;
      /** @description Selected route by the user to bridge tokens from one chain to another. */
      route: components["schemas"]["Route"];
      /** @description Refuel data for if the user have selected bridge with gas option */
      refuel: components["schemas"]["RefuelData"];
    };
    StartActiveRouteResponseDTO: {
      /** @enum {string} */
      userTxType?: "approve" | "fund-movr" | "claim" | "dex-swap" | "sign";
      txTarget?: string;
      /** @enum {string} */
      chainId?: "ETHEREUM" | "OPTIMISM" | "BSC" | "XDAI" | "POLYGON" | "FANTOM" | "BOBA" | "ARBITRUM" | "AVALANCHE" | "AURORA";
      activeRouteId: number;
      txData?: string;
      /** @enum {string} */
      txType?: "eth_sendTransaction" | "eth_signMessage";
      value?: string;
      userTxIndex?: number;
      totalUserTx: number;
      approvalData?: components["schemas"]["ApprovalData"];
    };
    ActiveRouteResponse: {
      /**
       * @description Id of the Active Route.
       * @example 420
       */
      activeRouteId: number;
      /**
       * @description Address of user doing the Active Route.
       * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
       */
      userAddress: string;
      /**
       * @description Total number of txs required in Active Route.
       * @example 3
       */
      totalUserTx: number;
      /** @description Array of user txs. */
      userTxs: Record<string, never>[];
      /**
       * @description Id of source chain.
       * @example 137
       */
      fromChainId: number;
      /**
       * @description Id of destination chain.
       * @example 56
       */
      toChainId: number;
      /**
       * @description Address of token on source chain.
       * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
       */
      fromAssetAddress: string;
      /**
       * @description Address of token on destination chain.
       * @example 0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3
       */
      toAssetAddress: string;
      /**
       * @description Amount of sending tokens.
       * @example 100000000
       */
      fromAmount: string;
      /**
       * @description Approximate amount of receiving tokens.
       * @example 100000000
       */
      toAmount: string;
      /**
       * @description Status of the Active Route.
       * @example PENDING
       */
      routeStatus: string;
      /**
       * Format: date-time
       * @description Timestamp of Route start.
       * @example 1642009930239
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Timestamp of last route update.
       * @example 1642009930239
       */
      updatedAt: string;
      /**
       * @description Index of current tx in userTxs array.
       * @example 1642009930239
       */
      currentUserTxIndex: number;
      fromAsset: components["schemas"]["TokenAsset"];
      toAsset: components["schemas"]["TokenAsset"];
    };
    ActiveRoutesOutputDTO: {
      /**
       * @description Status of API response.
       * @example true
       */
      success: boolean;
      result: components["schemas"]["ActiveRouteResponse"];
    };
    NextTxResponse: {
      /**
       * @description Type of user transaction.
       * @example dex-swap
       * @enum {string}
       */
      userTxType: "approve" | "fund-movr" | "claim" | "dex-swap" | "sign";
      /**
       * @description Address to which transaction has to be sent.
       * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
       */
      txTarget: string;
      /**
       * @description Id of chain where transaction has to be sent.
       * @example 137
       * @enum {string}
       */
      chainId: "ETHEREUM" | "OPTIMISM" | "BSC" | "XDAI" | "POLYGON" | "FANTOM" | "BOBA" | "ARBITRUM" | "AVALANCHE" | "AURORA";
      /**
       * @description Calldata for transaction.
       * @example 0xaajlafnalfnal
       */
      txData: string;
      /**
       * @description Type of transaction.
       * @example eth_sendTransaction
       * @enum {string}
       */
      txType: "eth_sendTransaction" | "eth_signMessage";
      /**
       * @description Id of Active Route.
       * @example 420
       */
      activeRouteId: number;
      /**
       * @description Native token amount to be sent with transaction.
       * @example 10000000000000000
       */
      value: string;
      /**
       * @description Index of transaction in Active Route. Index of the object in the userTxs array.
       * @example 2
       */
      userTxIndex: number;
      /**
       * @description Total number of transactions in Active Route.
       * @example 2
       */
      totalUserTx: number;
      approvalData: components["schemas"]["ApprovalData"];
    };
    NextTxOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      status: boolean;
      result: components["schemas"]["NextTxResponse"];
    };
    RouteStatusOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      status: boolean;
      /** @enum {string} */
      result: "PENDING" | "COMPLETED";
    };
    TokenListOutputDTO: {
      /**
       * @description Status of API.
       * @example true
       */
      success: boolean;
      results: components["schemas"]["TokenAsset"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getGasPrice: {
    parameters: {
      query: {
        /**
         * @description ID of chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        chainId: string;
      };
    };
    responses: {
      /** @description Current gas prices for a chain */
      200: {
        content: {
          "application/json": components["schemas"]["GasPriceResponseDTO"];
        };
      };
    };
  };
  AppController_getTokenPrice: {
    parameters: {
      query: {
        /**
         * @description Token contract address on network, e.g USDC on Ethereum Mainnet
         * @example 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
         */
        tokenAddress: string;
        /**
         * @description ID of chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        chainId: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Returns price of token for a given chain */
      200: {
        content: {
          "application/json": components["schemas"]["TokenPriceResponseDTO"];
        };
      };
    };
  };
  AppController_getSingleTxFromQuery: {
    parameters: {
      query: {
        sender: string;
        recipient: string;
        routePath: string;
        fromChainId: string;
        toChainId: string;
        fromTokenAddress: string;
        toTokenAddress: string;
        fromAmount: string;
        toAmount: string;
        bridgeInputTokenAddress: string;
        bridgeWithGas: boolean;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Get the tx details for the route. */
      200: {
        content: {
          "application/json": components["schemas"]["SingleTxOutputDTO"];
        };
      };
    };
  };
  AppController_getSingleTx: {
    parameters: {
      header?: {
        "API-KEY"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SingleTxDTO"];
      };
    };
    responses: {
      /** @description Get the tx details for the route. */
      200: {
        content: {
          "application/json": components["schemas"]["SingleTxOutputDTO"];
        };
      };
      201: {
        content: never;
      };
    };
  };
  AppController_getBridgingStatus: {
    parameters: {
      query: {
        /**
         * @description Transaction hash originating from the source chain while bridging assets.
         * @example 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
         */
        transactionHash: string;
        /**
         * @description ID of source chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        fromChainId: string;
        /**
         * @description ID of destination chain, e.g Ethereum Mainnet = 1
         * @example 137
         */
        toChainId: string;
        /**
         * @description Name of the bridge used while bridging.
         * @example hop
         */
        bridgeName?: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Returns the status of the bridging transaction if completed or pending. */
      200: {
        content: {
          "application/json": components["schemas"]["BridgeStatusResponseDTO"];
        };
      };
    };
  };
  AppController_getTransactionReceipt: {
    parameters: {
      query: {
        /**
         * @description Transaction hash originating from the source chain while bridging assets.
         * @example 0xddb77ebf8e52e8dd5931ad82cb482feabdb019862eedde35c3e8f9c6df72a781
         */
        transactionHash: string;
        /**
         * @description ID of source chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        chainId: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Returns the receipt of the transaction. */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionReceiptResponseDTO"];
        };
      };
    };
  };
  QuoteController_getQuote: {
    parameters: {
      query: {
        /**
         * @description Chain id of source chain.
         * @example 137
         */
        fromChainId: string;
        /**
         * @description Token address on source chain.
         * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
         */
        fromTokenAddress: string;
        /**
         * @description Chain id of destination chain.
         * @example 56
         */
        toChainId: string;
        /**
         * @description Token address on destination chain.
         * @example 0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3
         */
        toTokenAddress: string;
        /**
         * @description Amount of sending tokens.
         * @example 100000000
         */
        fromAmount: string;
        /**
         * @description Address of user. This will be used to check approvals.
         * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
         */
        userAddress: string;
        /**
         * @description Address of recipient. This will be used to check approvals.
         * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
         */
        recipient?: string;
        /**
         * @description Flag to return only best route per bridge using the sort criteria
         * @example true
         */
        uniqueRoutesPerBridge: boolean;
        /** @description Flag to specify if routes that have dex swap should be ignored. */
        disableSwapping?: boolean;
        /** @description Specify Dexes that should be included in routes. */
        includeDexes?: ("oneinch" | "zerox")[];
        /**
         * @description Specify Dexes that should be excluded in routes.
         * This option will be ignored if includeDexes is specified.
         */
        excludeDexes?: ("oneinch" | "zerox")[];
        /** @description Specify Bridges that should be included in routes. */
        includeBridges?: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
        /**
         * @description Specify Bridges that should be excluded in routes.
         * This option will be ignored if includeBridges is specified.
         */
        excludeBridges?: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
        /** @description Param to sort routes based on. */
        sort: "output" | "gas" | "time";
        /**
         * @description Maximum number of transactions.
         * This option will be ignored if singleTxOnly is marked as true.
         */
        maxUserTxs?: string;
        /** @description Only get quotes with one user transaction to bridge. */
        singleTxOnly?: boolean;
        /** @description Only get quotes with that are compatible with contracts */
        isContractCall?: boolean;
        /** @description include gas transfer with bridging tx */
        bridgeWithGas?: boolean;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Returns all the possible routes for bridging tokens from one chain to another. One of the routes can be selected and passed in to start the route. */
      200: {
        content: {
          "application/json": components["schemas"]["QuoteOutputDTO"];
        };
      };
    };
  };
  SupportedController_getAllBridges: {
    responses: {
      /** @description All Supported Bridges */
      200: {
        content: {
          "application/json": components["schemas"]["SupportedBridgesOutputDTO"];
        };
      };
    };
  };
  SupportedController_getAllSupportedRoutes: {
    parameters: {
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description All Supported Chains by Movr */
      200: {
        content: {
          "application/json": components["schemas"]["SupportedChainsOutputDTO"];
        };
      };
    };
  };
  SupportedController_getIfTokenIsSupported: {
    parameters: {
      query: {
        /**
         * @description Id of chain, e.g Optimism = 10
         * @example 10
         */
        chainId: string;
        /**
         * @description Contract address of the token
         * @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
         */
        address: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Get if token is supported */
      200: {
        content: {
          "application/json": components["schemas"]["SupportedChainsOutputDTO"];
        };
      };
    };
  };
  ApproveController_fetchApprovals: {
    parameters: {
      query: {
        /**
         * @description ID of chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        chainID: string;
        /**
         * @description Wallet address of token holder
         * @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
         */
        owner: string;
        /**
         * @description Address whose spending allowance is to be checked
         * @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
         */
        allowanceTarget: string;
        /**
         * @description Contract address of token
         * @example 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
         */
        tokenAddress: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Gives approval values of given tokens for a given owner & chainId */
      200: {
        content: {
          "application/json": components["schemas"]["ApprovalOutputDTO"];
        };
      };
    };
  };
  ApproveController_fetchApprovalsCalldata: {
    parameters: {
      query: {
        /**
         * @description ID of chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        chainID: string;
        /**
         * @description Wallet address of token holder
         * @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
         */
        owner: string;
        /**
         * @description Address whose spending allowance is to be checked
         * @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
         */
        allowanceTarget: string;
        /**
         * @description Contract address of token
         * @example 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
         */
        tokenAddress: string;
        /**
         * @description Amount of tokens to approve, e.g 10 USDC (6 decimals)
         * @example 10000000
         */
        amount: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Return the Approval Tx Data for the given params. */
      200: {
        content: {
          "application/json": components["schemas"]["ApprovalTxOutputDTO"];
        };
      };
    };
  };
  BalancesController_getBalances: {
    parameters: {
      query: {
        /** @example 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 */
        userAddress: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Returns the balance of all tokens for a user address on all supported chains */
      200: {
        content: {
          "application/json": components["schemas"]["Balance"];
        };
      };
    };
  };
  BalancesController_getBalance: {
    parameters: {
      query: {
        /**
         * @description Token contract address on network, e.g USDC on Ethereum Mainnet
         * @example 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
         */
        tokenAddress: string;
        /**
         * @description ID of chain, e.g Ethereum Mainnet = 1
         * @example 1
         */
        chainId: string;
        /**
         * @description Address of the user
         * @example 0x0E1B5AB67aF1c99F8c7Ebc71f41f75D4D6211e53
         */
        userAddress: string;
      };
    };
    responses: {
      /** @description Returns the balance of the token on any given chain */
      200: {
        content: {
          "application/json": components["schemas"]["TokenBalanceReponseDTO"];
        };
      };
    };
  };
  /**
   * @description Function that takes in a route and starts the selected route.
   *   Function is responsible for
   *   - Saving the selected route to bridge tokens from one chain to another.
   *   - Saving the fromChain, toChain, and fromAsssetAddress and toAssetAddress
   *   - Returns the Active Route Id, Current Tx, Total number of txs, txType
   */
  ActiveRoutesController_startActiveRoute: {
    parameters: {
      header?: {
        "API-KEY"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StartActiveRouteInputDTO"];
      };
    };
    responses: {
      /** @description Starts the Active Route and gives back the data to start the route */
      200: {
        content: {
          "application/json": components["schemas"]["StartActiveRouteResponseDTO"];
        };
      };
      201: {
        content: never;
      };
    };
  };
  ActiveRoutesController_getActiveRoutes: {
    parameters: {
      query: {
        /**
         * @description Id of the Active Route.
         * @example 420
         */
        activeRouteId: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Get active route details using active route id */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveRoutesOutputDTO"];
        };
      };
    };
  };
  ActiveRoutesController_getActiveRoutesForUser: {
    parameters: {
      query: {
        /**
         * @description Address of user starting the route.
         * @example 0x3e8cB4bd04d81498aB4b94a392c334F5328b237b
         */
        userAddress: string;
        /** @description Sort param for routes. */
        sort?: "updatedAt" | "createdAt";
        /** @description Offset for fetching active routes. */
        offset?: string;
        /** @description Number of active routes to return in one API call. */
        limit?: string;
        /** @description Status of the route. The route will only be marked completed if all the user txs have been completed. */
        routeStatus?: "PENDING" | "COMPLETED";
        /**
         * @description Id of sending chain
         * @example 137
         */
        fromChainId?: string;
        /**
         * @description Id of destination chain.
         * @example 56
         */
        toChainId?: string;
        /**
         * @description Address of token on source chain.
         * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
         */
        fromTokenAddress?: string;
        /**
         * @description Token address on destination chain.
         * @example 0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3
         */
        toTokenAddress?: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Get all the active routes from a user address. Filters like fromChainId, toChainId and token addresses can be used to get back specific active routes. */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveRoutesOutputDTO"];
        };
      };
    };
  };
  ActiveRoutesController_nextTx: {
    parameters: {
      query: {
        /**
         * @description Id of Active Route.
         * @example 420
         */
        activeRouteId: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Get next tx details of an active route */
      200: {
        content: {
          "application/json": components["schemas"]["NextTxOutputDTO"];
        };
      };
    };
  };
  ActiveRoutesController_getActiveRouteStatus: {
    parameters: {
      query: {
        /**
         * @description Id of Active Route.
         * @example 420
         */
        activeRouteId: string;
        /**
         * @description Index of the userTxs in the Active Route. Every active route will have a userTxs array. userTxIndex is the index of the object in the userTxs array.
         * @example 2
         */
        userTxIndex: string;
        /**
         * @description Transaction hash that relates to the userTxIndex. Each object in the userTxs is a transaction that has to be done by the user to progress in the route. If all the transactions are completed in the route, it will be marked complete.
         * @example 0x66b41ab61c3fd3a20649b9a722e69bdab58706c0
         */
        txHash?: string;
        /**
         * @description Signature to be sent in case the next transaction is dependant on the signature.
         * @example xyz
         */
        signature?: string;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description Get status of an active route */
      200: {
        content: {
          "application/json": components["schemas"]["RouteStatusOutputDTO"];
        };
      };
    };
  };
  TokenListController_getfromTokenList: {
    parameters: {
      query: {
        /**
         * @description Id of source chain, e.g Optimism = 10
         * @example 10
         */
        fromChainId: string;
        /**
         * @description Id of destination chain, e.g xDAI = 100
         * @example 100
         */
        toChainId?: string;
        /** @description Flag to specify if tokens that need dex swap should be ignored. */
        disableSwapping?: boolean;
        /** @description Specify Dexes that should be included for token support. */
        includeDexes?: ("oneinch" | "zerox")[];
        /**
         * @description Specify Dexes that should be excluded for token support.
         * This option will be ignored if includeDexes is specified.
         */
        excludeDexes?: ("oneinch" | "zerox")[];
        /** @description Specify Bridges that should be included for token support. */
        includeBridges?: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
        /**
         * @description Specify Bridges that should be excluded for token support.
         * This option will be ignored if includeBridges is specified.
         */
        excludeBridges?: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
        /** @description To be Marked true if you want the token list that needs only a single transaction from the user to bridge. */
        singleTxOnly?: boolean;
        /** @description To be Marked true if you want the shorter and more efficient token list. */
        isShortList?: boolean;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description All Supported token by a given chainId */
      200: {
        content: {
          "application/json": components["schemas"]["TokenListOutputDTO"];
        };
      };
    };
  };
  TokenListController_getToTokenList: {
    parameters: {
      query: {
        /**
         * @description Id of source chain, e.g Optimism = 10
         * @example 10
         */
        fromChainId: string;
        /**
         * @description Id of destination chain, e.g xDAI = 100
         * @example 100
         */
        toChainId: string;
        /**
         * @description Flag to specify if tokens that need dex swap should be ignored.
         * This option will be ignored if singleTxOnly is marked true.
         */
        disableSwapping?: boolean;
        /** @description Specify Dexes that should be included for token support. */
        includeDexes?: ("oneinch" | "zerox")[];
        /**
         * @description Specify Dexes that should be excluded for token support.
         * This option will be ignored if includeDexes is specified.
         */
        excludeDexes?: ("oneinch" | "zerox")[];
        /** @description Specify Bridges that should be included for token support. */
        includeBridges?: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
        /**
         * @description Specify Bridges that should be excluded for token support.
         * This option will be ignored if includeBridges is specified.
         */
        excludeBridges?: ("polygon-bridge" | "hop" | "anyswap-router-v4" | "hyphen" | "arbitrum-bridge" | "connext" | "celer" | "across" | "optimism-bridge" | "refuel-bridge")[];
        /** @description To be Marked true if you want the token list that needs only a single transaction from the user to bridge. */
        singleTxOnly?: boolean;
        /** @description To be Marked true if you want the shorter and more efficient token list. */
        isShortList?: boolean;
      };
      header?: {
        "API-KEY"?: string;
      };
    };
    responses: {
      /** @description All Supported token by a given route */
      200: {
        content: {
          "application/json": components["schemas"]["TokenListOutputDTO"];
        };
      };
    };
  };
}
